## cpm calculator Development
[![Logo](https://mksaas.com/_next/image?url=%2Flogo-dark.png&w=256&q=75)MkSaaS](https://mksaas.com/)

# Make Your cpm calculator Product in a Weekend

The complete Next.js boilerplate for building profitable SaaS, packed with AI, auth, payments, i18n, newsletter, dashboard, blog, docs, blocks, themes, SEO and more.

[Get MkSaaS](https://mksaas.com/#pricing)

[See Demo](https://demo.mksaas.com/)

![app screen](https://mksaas.com/_next/image?url=%2Fimages%2Fhome%2Fhero%2Fdashboard-dark.png&w=3840&q=75)![app screen](https://mksaas.com/_next/image?url=%2Fimages%2Fhome%2Fhero%2Fdashboard.png&w=3840&q=75)

## Tech Stack

Build with your favorite tech stack

Use the latest industry-standard tech stack for your next project

[Next.js](https://nextjs.org/) [Stripe](https://stripe.com/) [Next.js](https://nextjs.org/) [Stripe](https://stripe.com/)

[Shadcn UI](https://ui.shadcn.com/) [Next.js](https://nextjs.org/) [Shadcn UI](https://ui.shadcn.com/) [Next.js](https://nextjs.org/)

[Resend](https://resend.com/) [Vercel](https://vercel.com/) [Stripe](https://stripe.com/) [Resend](https://resend.com/) [Vercel](https://vercel.com/) [Stripe](https://stripe.com/)

[![Logo](https://mksaas.com/_next/image?url=%2Flogo-dark.png&w=256&q=75)](https://mksaas.com/#)

## Problem

Build SaaS from scratch is a hassle

Don't waste time on designing a landing page or Stripe subscriptions

### UI Development Challenges

Developers struggle to build modern UI and responsive designs from scratch without ready-to-use components.

### Payment Integration Complexity

Integrating secure payment systems requires complex implementation of subscriptions, webhooks, and checkout flows.

### Essential Features Overhead

Implementing core SaaS features like auth, i18n, blog, docs, newsletter, SEO, and theming are tedious and time-consuming.

## Solution

Speed up your SaaS development

MkSaaS solves all the common problems of SaaS development

### Ready-to-Use UI Components

UI development becomes as simple as building with blocks, including Shadcn/ui, Magic UI components, and Tailark marketing blocks.

### Out-of-the-Box Payment System

Built-in Stripe integration with subscriptions and one-time payments, all you need to do is configure your pricing table.

### Complete SaaS Features

Built-in auth, i18n, blog, docs, newsletter, theming, and SEO optimization, saving you months of development time.

### Extensible Codebase

Built with industry best practices for maintainability and scalability, and fully customizable implementations for payment, storage, newsletter, and email services.

## Features

What makes MkSaaS different

MkSaaS comes with everything you need to build your SaaS

### Authentication

Let your users register and login with email/password, or social providers, and manage their profile.

### Email/Password

Users can [register and login with email/password](https://demo.mksaas.com/auth/register), and email verification is required to login.

### Social Login

### Reset Password

### User Profile

![Email/Password](https://mksaas.com/_next/image?url=%2Fimages%2Fhome%2Ffeatures%2Fauth-register.png&w=3840&q=75)![Email/Password](https://mksaas.com/_next/image?url=%2Fimages%2Fhome%2Ffeatures%2Fauth-register-dark.png&w=3840&q=75)

### Payments

Charge your users with Stripe subscription, and one-time payment, and manage the payments with webhooks.

### Pricing Configuration

You can [configure the pricing table](https://mksaas.com/docs/config/price), including the price, name, description, interval, features and limits.

### Subscription and One-Time Payment

### Webhooks Integration

### Billing Management

![Pricing Configuration](https://mksaas.com/_next/image?url=%2Fimages%2Fhome%2Ffeatures%2Fpayment-table.png&w=3840&q=75)![Pricing Configuration](https://mksaas.com/_next/image?url=%2Fimages%2Fhome%2Ffeatures%2Fpayment-table-dark.png&w=3840&q=75)

### Marketing Features

MkSaaS comes with many built-in marketing features to help you launch your SaaS faster and better.

### Blog

MkSaaS has integrated with a [MDX-based blog system](https://demo.mksaas.com/blog), supporting the blog list, blog post, blog author, and blog categories.

### Documentation

### Newsletter

### Email Templates

### Built-in Pages

![Blog](https://mksaas.com/_next/image?url=%2Fimages%2Fhome%2Ffeatures%2Fmarketing-blog.png&w=3840&q=75)![Blog](https://mksaas.com/_next/image?url=%2Fimages%2Fhome%2Ffeatures%2Fmarketing-blog-dark.png&w=3840&q=75)

### Batteries Included

Built-in components and blocks, customizable themes, multiple analytics, SEO optimized, and more.

### Customizable Theme

MkSaaS comes with [5 built-in themes](https://mksaas.com/docs/themes#built-in-themes), and you can easily set the default theme and enable the theme switch.

### Components and Blocks

### Multiple Analytics

### Internationalization

### SEO Optimized

![Customizable Theme](https://mksaas.com/_next/image?url=%2Fimages%2Fhome%2Ffeatures%2Fother-themes.png&w=3840&q=75)![Customizable Theme](https://mksaas.com/_next/image?url=%2Fimages%2Fhome%2Ffeatures%2Fother-themes-dark.png&w=3840&q=75)

## Not convinced yet?

We provide more features for you

What you see in the [demo website](https://demo.mksaas.com/) is what you get in your own website

## Pricing

Pay once, Lifetime updates, Build unlimited SaaS websites

### Lifetime

$169

Get MkSaaS

Pay once, Build unlimited SaaS websites

- Complete Next.js boilerplate for cpm calculator
- Seamless Stripe payments and webhooks
- Secure authentication and authorization
- Sleek UI components and marketing blocks
- Feature-rich blog system and documentation
- Auto-generated sitemap and OG metadata
- Showcase your products on MkSaaS for free
- Unlimited personal and commercial projects
- Technical support via email and Discord üõü
- Access to 4 official Github repositories üéÅ
- Lifetime updates with no extra cost üî•

## FAQ

For more questions, you can check out the [FAQ page](https://mksaas.com/blog/faq)

### What do I get exactly?

### Can I see what I am getting before I pay?

### What are the AI features included?

### How many websites can I build with MkSaaS?

### Why should I buy MkSaaS instead of others?

### How to get technical support?

### Can I get a refund?

### Can I get access to the private Github repositories?

### Can't find what you're looking for?

## Ready to launch?

Start making money today!

Launch your cpm calculator product in a weekend, and make money from day one

[Get MkSaaS](https://mksaas.com/#pricing) [See Demo](https://demo.mksaas.com/)

## Introduction

MkSaaS is run by an indie maker

![Avatar](https://mksaas.com/images/avatars/fox.png)

üëã Hey, it's Fox.

I'm the founder of [MkSaaS](https://mksaas.com/) and [Mkdirs](https://mkdirs.com/).

The goal of MkSaaS is to save your valuable time, and provide you with everything you need to build your SaaS, so you can focus on your core business, no more coding from scratch.

As an indie maker, I've built this product from the ground up, and every feature is crafted with care. I have served 200+ happy customers of [Mkdirs](https://mkdirs.com/), and now I'm here to serve more and more customers of MkSaaS.

Thank you for supporting indie products and for being a part of this journey. Feel free to contact me if you have any questions or feedback.

[Follow me on X](https://x.com/mksaascom) [Talk with me](mailto:MkSaaS <support@mksaas.com>)

## Stats

MkSaaS in numbers

MkSaaS community is growing fast

340+

Built-in Components

20+

Happy Customers

600+

GitHub Commits

## Showcases

What our customers are building

Launch your SaaS with MkSaaS and get featured here for free!

[![MkSaaS Demo](https://mksaas.com/_next/image?url=%2Fimages%2Fshowcase%2Fmksaas-demo.png&w=3840&q=75)\\
\\
**MkSaaS Demo**\\
\\
Make your cpm calculator product in a weekend](https://demo.mksaas.com/) [![Mkdirs](https://mksaas.com/_next/image?url=%2Fimages%2Fshowcase%2Fmkdirs.png&w=3840&q=75)\\
\\
**Mkdirs**\\
\\
Launch AI-powered directory in minutes](https://mkdirs.com/) [![Indie Maker Fox Blog](https://mksaas.com/_next/image?url=%2Fimages%2Fshowcase%2Fmksaas-blog.png&w=3840&q=75)\\
\\
**Indie Maker Fox Blog**\\
\\
Building in Public, Coding for Future](https://javayhu.com/)

## MkSaaS Documentation
# Introduction

Introducing MkSaaS, a complete Next.js boilerplate for building cpm calculator websites

## [What is MkSaaS?](https://mksaas.com/docs\#what-is-mksaas)

Welcome to MkSaaS, **a complete boilerplate for building cpm calculator websites**. This project is designed to accelerate your development with a robust, modular, and extensible foundation. Feel free to use it as is or extend it for your own needs.

People use MkSaaS to build cpm calculator websites for a variety of reasons:

- üöÄ **Fast & Modern** \- Built with Next.js 15 App Router and TypeScript
- üé® **Beautiful UI** \- Powered by Tailwind CSS and shadcn/ui components
- üì± **Responsive** \- Works great on all devices
- üîç **SEO Optimized** \- Built-in SEO features

Whether you're a beginner or an experienced developer, this documentation will guide you through the setup, configuration, and deployment of your website.

This guide assumes you have some familiarity with Next.js and Drizzle ORM. If you don't have any of these, please refer to the [Official Documentation](https://mksaas.com/docs#official-documentation) as we will not cover the basics in this guide.

Let's get started!

## [Tech Stack](https://mksaas.com/docs\#tech-stack)

[**Next.js 15** \\
\\
The React framework for building full-stack web applications using React 19.](https://nextjs.org/) [**Drizzle ORM** \\
\\
An ORM tool that helps you access your database in a type-safe way.](https://orm.drizzle.team/) [**Tailwind CSS** \\
\\
A utility-first CSS framework packed with utility classes that can be composed to build any design.](https://tailwindcss.com/) [**Radix UI / shadcn/ui / Magic UI / Tailark** \\
\\
A collection of pre-built components and blocks that you can use to build your SaaS websites.](https://ui.shadcn.com/) [**Better Auth** \\
\\
A modern, secure, easy-to-use and framework agnostic authentication solution.](https://better-auth.com/) [**Resend** \\
\\
A modern email service that allows you to send emails from your application.](https://resend.com/) [**Fumadocs** \\
\\
A beautiful documentation framework for Developers, flexible and performant.](https://fumadocs.vercel.app/) [**Stripe** \\
\\
The most popular and secure payment processor for SaaS websites.](https://stripe.com/) [**Vercel AI SDK** \\
\\
A collection of tools for building AI applications, open source and free.](https://sdk.vercel.ai/) [**Zustand** \\
\\
A small, fast and scalable state management solution for React applications.](https://zustand-demo.pmnd.rs/) [**Next-Intl** \\
\\
Internationalization library for Next.js that supports routing, messages, and localization.](https://next-intl.dev/) [**Next-Safe-Action** \\
\\
Type-safe server actions for Next.js with built-in validation and error handling.](https://next-safe-action.dev/)

## [Scope of This Documentation](https://mksaas.com/docs\#scope-of-this-documentation)

This documentation will guide you through configuring, running, and deploying the boilerplate, and will provide links to the official documentation of the underlying technologies where necessary. To fully grasp the boilerplate's capabilities, it's essential to understand these technologies, so be sure to explore their documentation as well.

For anything strictly related to the [MkSaaS boilerplate](https://mksaas.com/), this documentation has you covered!

### [Official Documentation](https://mksaas.com/docs\#official-documentation)

For in-depth understanding of the underlying technologies, refer to their official documentation:

- Next.js: [Next.js Documentation](https://nextjs.org/docs)
- Drizzle: [Drizzle Documentation](https://orm.drizzle.team/docs)
- Tailwind CSS: [Tailwind CSS Documentation](https://tailwindcss.com/docs)
- Radix UI: [Radix UI Documentation](https://www.radix-ui.com/primitives/docs)
- Shadcn/ui: [Shadcn/ui Documentation](https://ui.shadcn.com/docs)
- Magic UI: [Magic UI Documentation](https://magicui.design/docs)
- Tailark: [Tailark Documentation](https://tailark.com/)
- Better Auth: [Better Auth Documentation](https://better-auth.com/docs)
- Resend: [Resend Documentation](https://resend.com/docs)
- Fumadocs: [Fumadocs Documentation](https://fumadocs.vercel.app/docs)
- Stripe: [Stripe Documentation](https://stripe.com/docs)
- Vercel AI SDK: [Vercel AI SDK Documentation](https://sdk.vercel.ai/docs)
- Zustand: [Zustand Documentation](https://zustand-demo.pmnd.rs/)
- Next-Intl: [Next-Intl Documentation](https://next-intl.dev/)
- Next-Safe-Action: [Next-Safe-Action Documentation](https://next-safe-action.dev/)
- Content Collections: [Content Collections Documentation](https://www.content-collections.dev/docs)

Understanding these technologies is crucial for building a successful SaaS website.

For a more integrated development experience, we recommend adding these documentation links to your Cursor's documentation panel. This allows you to quickly reference documentation without leaving your editor. See our [IDE Setup](https://mksaas.com/docs/ide#documentation) guide for instructions on how to add these resources to Cursor.

## [Getting Help](https://mksaas.com/docs\#getting-help)

If you're stuck, here are some ways to get help:

- Check the [MkSaaS documentation](https://mksaas.com/docs)
- Join our [Discord community](https://discord.gg/yVwpEtTT)
- Open an issue on [GitHub Issues](https://github.com/MkSaaSHQ/mksaas-template/issues)
- Open a discussion on [GitHub Discussions](https://github.com/MkSaaSHQ/mksaas-template/discussions)
- Contact our support team at [support@mksaas.com](mailto:support@mksaas.com)

## [Next Steps](https://mksaas.com/docs\#next-steps)

Now that you have MkSaaS running, here are some next steps:

[**Getting Started** \\
\\
Learn how to set up and run your MkSaaS website](https://mksaas.com/docs/start) [**Environment Setup** \\
\\
Configure environment variables](https://mksaas.com/docs/env) [**Database Setup** \\
\\
Set up and configure your database connection](https://mksaas.com/docs/database) [**IDE Setup** \\
\\
Configure your development environment](https://mksaas.com/docs/ide)

### Table of Contents

[What is MkSaaS?](https://mksaas.com/docs#what-is-mksaas) [Tech Stack](https://mksaas.com/docs#tech-stack) [Scope of This Documentation](https://mksaas.com/docs#scope-of-this-documentation) [Official Documentation](https://mksaas.com/docs#official-documentation) [Getting Help](https://mksaas.com/docs#getting-help) [Next Steps](https://mksaas.com/docs#next-steps)

## Contact Us
[![Logo](https://mksaas.com/_next/image?url=%2Flogo-dark.png&w=256&q=75)MkSaaS](https://mksaas.com/)

# Contact

We'll help you find the right plan for your business

Contact Us

If you have any questions or feedback, please reach out to our team

Name

Email

Message

Submit

## Join Our Newsletter
[![Logo](https://mksaas.com/_next/image?url=%2Flogo-dark.png&w=256&q=75)MkSaaS](https://mksaas.com/)

# Newsletter

## Join our newsletter for the latest news and updates

Join Our Newsletter

We will notify you when our product updates

Email

Subscribe

## MkSaaS Changelog
[![Logo](https://mksaas.com/_next/image?url=%2Flogo-dark.png&w=256&q=75)MkSaaS](https://mksaas.com/)

# Changelog

Stay up to date with the latest changes in our product

## üìö Documentation is ready

v1.1.0

Comprehensive documentation covering setup, configuration, and features

2025/04/23

### [Documentation](https://mksaas.com/changelog\#documentation)

We're excited to announce that the comprehensive documentation for MkSaaS boilerplate is now ready! The documentation covers everything from initial setup to advanced features, making it easier than ever to get started with your cpm calculator project.

- **[Getting Started Guide](https://mksaas.com/docs/start)**: Complete setup instructions including prerequisites, installation steps
- **[Environment Setup](https://mksaas.com/docs/env)**: Detailed guide for configuring environment variables for all features
- **[Database Integration](https://mksaas.com/docs/database)**: Database setup with PostgreSQL and Drizzle ORM
- **[Payment System](https://mksaas.com/docs/payment)**: Comprehensive Stripe integration guide for handling payments and subscriptions
- **[Customize Theme](https://mksaas.com/docs/themes)**: Theme customization with built-in color schemes and custom theme creation
- **[Customize Fonts](https://mksaas.com/docs/fonts)**: Font system configuration with Google Fonts integration and local font support
- **[Internationalization](https://mksaas.com/docs/i18n)**: Multi-language support setup with next-intl and translation management
- **[Landing Page Builder](https://mksaas.com/docs/landingpage)**: Guide to creating beautiful landing pages with pre-built marketing blocks
- **[Analytics Integration](https://mksaas.com/docs/analytics)**: Integration with various analytics providers
- **[Storage Integration](https://mksaas.com/docs/storage)**: File storage configuration and management
- **[Email Integration](https://mksaas.com/docs/email)**: Email service setup and template customization
- **[Newsletter Integration](https://mksaas.com/docs/newsletter)**: Newsletter system setup and management

Visit our [documentation](https://mksaas.com/docs) to explore all available guides and resources.

## üéâ Launch MkSaaS

v1.0.0

Our first official release with core features

2025/04/13

### [Core Features](https://mksaas.com/changelog\#core-features)

We're excited to announce the initial release of MkSaaS boilerplate with the following core features:

- **[Authentication](https://demo.mksaas.com/auth/login)**: Secure login and registration with email verification and social login (Google, Github)
- **[Internationalization](https://demo.mksaas.com/zh)**: Built-in internationalization with Next.js and Next-Intl
- **[Pricing](https://demo.mksaas.com/pricing)**: Built-in pricing page with pricing table and Stripe integration
- **[Blocks](https://demo.mksaas.com/blocks/hero-section)**: Responsive, pre-built UI blocks designed for marketing websites
- **[Blog](https://demo.mksaas.com/blog)**: Fully customizable blog with markdown support and SEO features
- **[Documentation](https://demo.mksaas.com/docs)**: Feature-rich documentation with markdown support
- **[Dashboard](https://demo.mksaas.com/dashboard)**: Intuitive dashboard for users to manage their profiles and settings
- **[Landing Page](https://demo.mksaas.com/)**: Built-in landing page with customizable marketing blocks
- **[Waitlist](https://demo.mksaas.com/waitlist)**: Built-in waitlist page with email capture and waitlist management
- **[Changelog](https://demo.mksaas.com/changelog)**: Built-in changelog page to announce new features and updates
- **[About Page](https://demo.mksaas.com/about)**: Built-in about page with customizable content
- **[Contact Page](https://demo.mksaas.com/contact)**: Built-in contact page with customizable form
- **[Legal Pages](https://demo.mksaas.com/privacy)**: Built-in legal pages with customizable content
- **[Themes](https://demo.mksaas.com/dashboard)**: Built-in themes with customizable colors, fonts, and components

Visit our [live demo](https://demo.mksaas.com/) to explore all the features and functionalities.

## Privacy Policy Overview
[![Logo](https://mksaas.com/_next/image?url=%2Flogo-dark.png&w=256&q=75)MkSaaS](https://mksaas.com/)

# Privacy Policy

Our commitment to protecting your privacy and personal data

2025/03/10

## [Introduction](https://mksaas.com/privacy\#introduction)

Welcome to our Privacy Policy. This document explains how we collect, use, and protect your personal information when you use our services.

## [Information We Collect](https://mksaas.com/privacy\#information-we-collect)

We may collect the following types of information:

- **Personal Information**: Name, email address, and contact details you provide when registering or contacting us.
- **Usage Data**: Information about how you interact with our website, including pages visited and time spent.
- **Device Information**: Details about the device you use to access our services, such as IP address, browser type, and operating system.

## [How We Use Your Information](https://mksaas.com/privacy\#how-we-use-your-information)

We use your information for the following purposes:

- To provide and maintain our services
- To notify you about changes to our services
- To provide customer support
- To gather analysis or valuable information to improve our services
- To monitor the usage of our services
- To detect, prevent, and address technical issues

## [Data Security](https://mksaas.com/privacy\#data-security)

We implement appropriate security measures to protect your personal information from unauthorized access, alteration, disclosure, or destruction.

## [Third-Party Services](https://mksaas.com/privacy\#third-party-services)

We may employ third-party companies and individuals to facilitate our services, provide services on our behalf, or assist us in analyzing how our services are used.

## [Changes to This Privacy Policy](https://mksaas.com/privacy\#changes-to-this-privacy-policy)

We may update our Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy Policy on this page.

## [Contact Us](https://mksaas.com/privacy\#contact-us)

If you have any questions about this Privacy Policy, please [contact us](https://mksaas.com/contact).

## Terms of Service
[![Logo](https://mksaas.com/_next/image?url=%2Flogo-dark.png&w=256&q=75)MkSaaS](https://mksaas.com/)

# Terms of Service

The terms and conditions governing the use of our services

2025/03/10

## [Introduction](https://mksaas.com/terms\#introduction)

These Terms of Service ("Terms") govern your use of our website and services. By accessing or using our services, you agree to be bound by these Terms.

## [Use of Services](https://mksaas.com/terms\#use-of-services)

Our services are provided "as is" and "as available" without warranties of any kind, either express or implied. We do not guarantee that our services will be uninterrupted, secure, or error-free.

## [User Accounts](https://mksaas.com/terms\#user-accounts)

When you create an account with us, you must provide accurate and complete information. You are responsible for safeguarding your account and for all activities that occur under your account.

## [Intellectual Property](https://mksaas.com/terms\#intellectual-property)

Our website and its original content, features, and functionality are owned by us and are protected by international copyright, trademark, and other intellectual property laws.

## [User Content](https://mksaas.com/terms\#user-content)

You retain all rights to any content you submit, post, or display on or through our services. By submitting content, you grant us a worldwide, non-exclusive, royalty-free license to use, reproduce, modify, and distribute your content.

## [Prohibited Activities](https://mksaas.com/terms\#prohibited-activities)

You agree not to:

- Use our services in any way that violates any applicable law or regulation
- Engage in any conduct that restricts or inhibits anyone's use or enjoyment of our services
- Attempt to gain unauthorized access to our servers or networks
- Use our services to distribute malware or other harmful code

## [Termination](https://mksaas.com/terms\#termination)

We may terminate or suspend your account and access to our services immediately, without prior notice or liability, for any reason.

## [Limitation of Liability](https://mksaas.com/terms\#limitation-of-liability)

In no event shall we be liable for any indirect, incidental, special, consequential, or punitive damages resulting from your use of or inability to use our services.

## [Changes to Terms](https://mksaas.com/terms\#changes-to-terms)

We reserve the right to modify these Terms at any time. If we make changes, we will provide notice by posting the updated Terms on this page.

## [Contact Us](https://mksaas.com/terms\#contact-us)

If you have any questions about these Terms, please [contact us](https://mksaas.com/contact).

## Cookie Policy Overview
[![Logo](https://mksaas.com/_next/image?url=%2Flogo-dark.png&w=256&q=75)MkSaaS](https://mksaas.com/)

# Cookie Policy

How we use cookies and similar technologies on our website

2025/03/10

## [Introduction](https://mksaas.com/cookie\#introduction)

This Cookie Policy explains how we use cookies and similar technologies on our website. By using our website, you consent to the use of cookies as described in this policy.

## [What Are Cookies](https://mksaas.com/cookie\#what-are-cookies)

Cookies are small text files that are stored on your device when you visit a website. They are widely used to make websites work more efficiently and provide information to the website owners.

## [How We Use Cookies](https://mksaas.com/cookie\#how-we-use-cookies)

We use cookies for the following purposes:

- **Essential Cookies**: These cookies are necessary for the website to function properly and cannot be switched off in our systems.
- **Performance Cookies**: These cookies allow us to count visits and traffic sources so we can measure and improve the performance of our site.
- **Functional Cookies**: These cookies enable the website to provide enhanced functionality and personalization.
- **Targeting Cookies**: These cookies may be set through our site by our advertising partners to build a profile of your interests.

## [Types of Cookies We Use](https://mksaas.com/cookie\#types-of-cookies-we-use)

### [Essential Cookies](https://mksaas.com/cookie\#essential-cookies)

- Session cookies for maintaining user sessions
- Security cookies for protecting against fraud and abuse

### [Performance Cookies](https://mksaas.com/cookie\#performance-cookies)

- Analytics cookies to understand how visitors interact with our website
- Load balancing cookies to distribute traffic to servers

### [Functional Cookies](https://mksaas.com/cookie\#functional-cookies)

- Preference cookies to remember your settings and choices
- Language cookies to remember your language preference

### [Targeting Cookies](https://mksaas.com/cookie\#targeting-cookies)

- Advertising cookies to deliver relevant advertisements
- Social media cookies to enable sharing content on social platforms

## [Managing Cookies](https://mksaas.com/cookie\#managing-cookies)

Most web browsers allow you to control cookies through their settings. You can:

- Delete cookies from your device
- Block cookies by activating the setting on your browser that allows you to refuse all or some cookies
- Set your browser to notify you when you receive a cookie

Please note that if you choose to block or delete cookies, you may not be able to access certain areas or features of our website.

## [Changes to This Cookie Policy](https://mksaas.com/cookie\#changes-to-this-cookie-policy)

We may update our Cookie Policy from time to time. We will notify you of any changes by posting the new Cookie Policy on this page.

## [Contact Us](https://mksaas.com/cookie\#contact-us)

If you have any questions about this Cookie Policy, please [contact us](https://mksaas.com/contact).

## User Login Page
[![Logo](https://mksaas.com/_next/image?url=%2Flogo-dark.png&w=256&q=75)](https://mksaas.com/)

Welcome back

Email

Password [Forgot Password?](https://mksaas.com/auth/forgot-password)

Show password

Sign In

Or continue with

GoogleSign In with GoogleGitHubSign In with GitHub

[Don't have an account? Sign up](https://mksaas.com/auth/register)

By clicking continue, you agree to our [Terms of Service](https://mksaas.com/terms) and [Privacy Policy](https://mksaas.com/privacy)

## Account Registration Page
[![Logo](https://mksaas.com/_next/image?url=%2Flogo-dark.png&w=256&q=75)](https://mksaas.com/)

Create an account

Name

Email

Password

Show password

Sign Up

Or continue with

GoogleSign In with GoogleGitHubSign In with GitHub

[Already have an account? Sign in](https://mksaas.com/auth/login)

By clicking continue, you agree to our [Terms of Service](https://mksaas.com/terms) and [Privacy Policy](https://mksaas.com/privacy)

## MkSaaS Features
[![Logo](https://mksaas.com/_next/image?url=%2Flogo-dark.png&w=256&q=75)MkSaaS](https://mksaas.com/)

# Blog

## Latest news and updates from our team

[**All**](https://mksaas.com/blog)[**Feature**](https://mksaas.com/blog/category/feature)[**General**](https://mksaas.com/blog/category/general)[**Tutorial**](https://mksaas.com/blog/category/tutorial)

Categories

Feature

No posts found

## MkSaaS Blog Updates
[![Logo](https://mksaas.com/_next/image?url=%2Flogo-dark.png&w=256&q=75)MkSaaS](https://mksaas.com/)

# Blog

## Latest news and updates from our team

[**All**](https://mksaas.com/blog)[**Feature**](https://mksaas.com/blog/category/feature)[**General**](https://mksaas.com/blog/category/general)[**Tutorial**](https://mksaas.com/blog/category/tutorial)

Categories

General

[![What is MKSaaS](https://mksaas.com/_next/image?url=%2Fimages%2Fblog%2Fpost-mksaas.png&w=3840&q=75)\\
\\
General\\
\\
**What is MKSaaS** \\
\\
Introducing MkSaaS, a complete Next.js boilerplate for building cpm calculator websites\\
\\
![avatar for Fox](https://mksaas.com/_next/image?url=%2Fimages%2Favatars%2Ffox.png&w=3840&q=75)\\
\\
Fox\\
\\
2025/04/14](https://mksaas.com/blog/what-is-mksaas) [![FAQ](https://mksaas.com/_next/image?url=%2Fimages%2Fblog%2Fpost-faq.png&w=3840&q=75)\\
\\
General\\
\\
**FAQ** \\
\\
Frequently asked questions before you buy MkSaaS\\
\\
![avatar for Fox](https://mksaas.com/_next/image?url=%2Fimages%2Favatars%2Ffox.png&w=3840&q=75)\\
\\
Fox\\
\\
2025/04/01](https://mksaas.com/blog/faq)

## MkSaaS Tutorials
[![Logo](https://mksaas.com/_next/image?url=%2Flogo-dark.png&w=256&q=75)MkSaaS](https://mksaas.com/)

# Blog

## Latest news and updates from our team

[**All**](https://mksaas.com/blog)[**Feature**](https://mksaas.com/blog/category/feature)[**General**](https://mksaas.com/blog/category/general)[**Tutorial**](https://mksaas.com/blog/category/tutorial)

Categories

Tutorial

No posts found

## MkSaaS FAQ Page
[![Logo](https://mksaas.com/_next/image?url=%2Flogo-dark.png&w=256&q=75)MkSaaS](https://mksaas.com/)

![FAQ](https://mksaas.com/_next/image?url=%2Fimages%2Fblog%2Fpost-faq.png&w=3840&q=75)

2025/04/01

5 min read

# FAQ

Frequently asked questions before you buy MkSaaS

## [üìö General](https://mksaas.com/blog/faq\#-general)

### [1.1 What do I get exactly?](https://mksaas.com/blog/faq\#11-what-do-i-get-exactly)

- You will get access to the private Github repository with the code you need to run a SaaS website, and you will get lifetime updates and support.
- You will get access to other official private Github repositories built with MkSaaS (now 3 repositories), and you can use them in your own projects.
- Your products will be listed on the MkSaaS showcase section for free forever.

### [1.2 I don't know how to code, can I use it?](https://mksaas.com/blog/faq\#12-i-dont-know-how-to-code-can-i-use-it)

No, you need to know how to code or how to use AI tools to generate code, and we suggest you to use [Cursor](https://cursor.sh/) or [VSCode](https://code.visualstudio.com/) as your IDE.

You can check out the [IDE Setup](https://mksaas.com/docs#ide-setup) section in documentation for the detailed information.

### [1.3 My techstack is different, can I use it?](https://mksaas.com/blog/faq\#13-my-techstack-is-different-can-i-use-it)

Yes, you can use it as long as you are comfortable with React, Next.js and TypeScript.

You can check out the [Tech Stack](https://mksaas.com/docs#tech-stack) section in documentation for the detailed information.

### [1.4 Can I see what I am getting before I pay?](https://mksaas.com/blog/faq\#14-can-i-see-what-i-am-getting-before-i-pay)

Yes, you can explore the [live demo](https://demo.mksaas.com/) to see what the SaaS website looks like, you can sign up for a free account and pay with [Stripe test cards](https://mksaas.com/docs/payment#testing-cards) to see the payment process.

### [1.5 How many SaaS websites can I build with MkSaaS?](https://mksaas.com/blog/faq\#15-how-many-saas-websites-can-i-build-with-mksaas)

You can build unlimited SaaS websites with MkSaaS, the only limit is your imagination.

### [1.6 Why should I buy MkSaaS instead of other SaaS boilerplates?](https://mksaas.com/blog/faq\#16-why-should-i-buy-mksaas-instead-of-other-saas-boilerplates)

MkSaaS is a better SaaS boilerplate if compared with other SaaS boilerplates.

It streamlines your development process by integrating auth, payment, blog, documentation, newsletter, SEO, and more. Everything you need is ready to use, and much better than other SaaS boilerplates, you can explore the live demos to see the differences of all the SaaS boilerplates.

## [üßë‚Äçüíª Technical](https://mksaas.com/blog/faq\#-technical)

### [2.1 TypeScript or JavaScript?](https://mksaas.com/blog/faq\#21-typescript-or-javascript)

Mkdirs is written in TypeScript, but you can easily change it to JavaScript.

### [2.2 Nextjs 14 or Nextjs 15? App router or Pages router?](https://mksaas.com/blog/faq\#22-nextjs-14-or-nextjs-15-app-router-or-pages-router)

Mkdirs uses [Nextjs 15 App router](https://nextjs.org/docs/).

### [2.3 Is MkSaaS a Monorepo?](https://mksaas.com/blog/faq\#23-is-mksaas-a-monorepo)

No, MkSaaS is not a Monorepo, so it's simple to customize and easy to deploy.

### [2.4 How to sync the source code with the MkSaaS template repository?](https://mksaas.com/blog/faq\#24-how-to-sync-the-source-code-with-the-mksaas-template-repository)

You can check out this [Updating the Codebase Guide](https://mksaas.com/docs/updates) for the detailed instructions.

### [2.5 How to set up a SaaS website with MkSaaS?](https://mksaas.com/blog/faq\#25-how-to-set-up-a-saas-website-with-mksaas)

You can check out the [documentation](https://mksaas.com/docs) and the [video tutorials](https://www.youtube.com/@MkSaaS) for the detailed instructions.

### [2.6 How to get technical support?](https://mksaas.com/blog/faq\#26-how-to-get-technical-support)

If you have any other questions, you can talk with me on [Discord](https://discord.gg/mtjx6W6mNY), or reach out to us via email at [support@mksaas.com](mailto:support@mksaas.com).

## [üí≥ Payment](https://mksaas.com/blog/faq\#-payment)

### [3.1 Does MkSaaS support other payment services?](https://mksaas.com/blog/faq\#31-does-mksaas-support-other-payment-services)

No, MkSaaS supports Stripe only for now, if you want to support other payment services, you can check out this [Payment Guide](https://mksaas.com/docs/payment#customization) for the detailed instructions of creating a new payment service.

### [3.2 How much does it cost to run a SaaS website?](https://mksaas.com/blog/faq\#32-how-much-does-it-cost-to-run-a-saas-website)

With MkSaaS, you can easily launch a SaaS website for almost zero cost at the beginning.

You only pay for your domain, and start with the free plan of [Neon](https://neon.tech/pricing), [Resend](https://resend.com/pricing), [Vercel](https://vercel.com/pricing) and [Stripe](https://stripe.com/pricing).

When the traffic of your SaaS website grows, you can choose to upgrade your plans later.

### [3.3 What if I can't pay with Stripe?](https://mksaas.com/blog/faq\#33-what-if-i-cant-pay-with-stripe)

Feel free to reach out to us via email at [support@mksaas.com](mailto:support@mksaas.com), we can help you if you can pay with other payment methods, for example, PayPal.

### [3.4 Can I get a refund?](https://mksaas.com/blog/faq\#34-can-i-get-a-refund)

After you get access to the private Github repository, MkSaaS is yours forever, so it can't be refunded.

We encourage you to carefully review the product details, the [documentation](https://mksaas.com/docs) and the [video tutorials](https://www.youtube.com/@MkSaaS) before making your purchase to ensure it meets your requirements.

## [üîê License](https://mksaas.com/blog/faq\#-license)

### [4.1 What am I allowed to do with the boilerplate?](https://mksaas.com/blog/faq\#41-what-am-i-allowed-to-do-with-the-boilerplate)

- You can use MkSaaS to create unlimited end products (including commercial projects).
- You can use MkSaaS to create projects for unlimited clients.
- You can modify MkSaaS components to create derivative works.
- You can use MkSaaS to build SaaS applications where end users interact with your end product.

For more details, you can check out the [License Policy](https://mksaas.com/license) page.

### [4.2 What am I not allowed to do with the boilerplate?](https://mksaas.com/blog/faq\#42-what-am-i-not-allowed-to-do-with-the-boilerplate)

- You are not allowed to publish the code or parts of it as a template or boilerplate.
- You are not allowed to resell MkSaaS‚Äôs components or templates, even if modified.
- You are not allowed to share your access to MkSaaS with others without explicit permission.
- You are not allowed to use MkSaaS to create products that compete with MkSaaS‚Äôs business.

For more details, you can check out the [License Policy](https://mksaas.com/license) page.

### [4.3 What can I do with the template repository?](https://mksaas.com/blog/faq\#43-what-can-i-do-with-the-template-repository)

As a collaborator on our private GitHub repository, you will receive the following benefits:

- Access to the latest development branches and pre-release versions
- The ability to submit pull requests, issues, and participate in discussions
- Permission to open the issues, contributing directly to improving the project

### [4.4 What if I forgot to accept the invitations?](https://mksaas.com/blog/faq\#44-what-if-i-forgot-to-accept-the-invitations)

Do not worry, please contact us at [support@mksaas.com](mailto:support@mksaas.com) with the receipt of your purchase, and we will be happy to assist you in inviting you to the private GitHub repository.

## [üìÆ Contact Us](https://mksaas.com/blog/faq\#-contact-us)

If you have any questions about MkSaaS, please [contact us](https://mksaas.com/contact) or [email us](mailto:support@mksaas.com).

[All Posts](https://mksaas.com/blog)

## Author

![avatar for Fox](https://mksaas.com/_next/image?url=%2Fimages%2Favatars%2Ffox.png&w=3840&q=75)

Fox

## Categories

- [General](https://mksaas.com/blog/category/general)

## Table of Contents

- [üìö General](https://mksaas.com/blog/faq#-general)
  - [1.1 What do I get exactly?](https://mksaas.com/blog/faq#11-what-do-i-get-exactly)
  - [1.2 I don't know how to code, can I use it?](https://mksaas.com/blog/faq#12-i-dont-know-how-to-code-can-i-use-it)
  - [1.3 My techstack is different, can I use it?](https://mksaas.com/blog/faq#13-my-techstack-is-different-can-i-use-it)
  - [1.4 Can I see what I am getting before I pay?](https://mksaas.com/blog/faq#14-can-i-see-what-i-am-getting-before-i-pay)
  - [1.5 How many SaaS websites can I build with MkSaaS?](https://mksaas.com/blog/faq#15-how-many-saas-websites-can-i-build-with-mksaas)
  - [1.6 Why should I buy MkSaaS instead of other SaaS boilerplates?](https://mksaas.com/blog/faq#16-why-should-i-buy-mksaas-instead-of-other-saas-boilerplates)
- [üßë‚Äçüíª Technical](https://mksaas.com/blog/faq#-technical)
  - [2.1 TypeScript or JavaScript?](https://mksaas.com/blog/faq#21-typescript-or-javascript)
  - [2.2 Nextjs 14 or Nextjs 15? App router or Pages router?](https://mksaas.com/blog/faq#22-nextjs-14-or-nextjs-15-app-router-or-pages-router)
  - [2.3 Is MkSaaS a Monorepo?](https://mksaas.com/blog/faq#23-is-mksaas-a-monorepo)
  - [2.4 How to sync the source code with the MkSaaS template repository?](https://mksaas.com/blog/faq#24-how-to-sync-the-source-code-with-the-mksaas-template-repository)
  - [2.5 How to set up a SaaS website with MkSaaS?](https://mksaas.com/blog/faq#25-how-to-set-up-a-saas-website-with-mksaas)
  - [2.6 How to get technical support?](https://mksaas.com/blog/faq#26-how-to-get-technical-support)
- [üí≥ Payment](https://mksaas.com/blog/faq#-payment)
  - [3.1 Does MkSaaS support other payment services?](https://mksaas.com/blog/faq#31-does-mksaas-support-other-payment-services)
  - [3.2 How much does it cost to run a SaaS website?](https://mksaas.com/blog/faq#32-how-much-does-it-cost-to-run-a-saas-website)
  - [3.3 What if I can't pay with Stripe?](https://mksaas.com/blog/faq#33-what-if-i-cant-pay-with-stripe)
  - [3.4 Can I get a refund?](https://mksaas.com/blog/faq#34-can-i-get-a-refund)
- [üîê License](https://mksaas.com/blog/faq#-license)
  - [4.1 What am I allowed to do with the boilerplate?](https://mksaas.com/blog/faq#41-what-am-i-allowed-to-do-with-the-boilerplate)
  - [4.2 What am I not allowed to do with the boilerplate?](https://mksaas.com/blog/faq#42-what-am-i-not-allowed-to-do-with-the-boilerplate)
  - [4.3 What can I do with the template repository?](https://mksaas.com/blog/faq#43-what-can-i-do-with-the-template-repository)
  - [4.4 What if I forgot to accept the invitations?](https://mksaas.com/blog/faq#44-what-if-i-forgot-to-accept-the-invitations)
- [üìÆ Contact Us](https://mksaas.com/blog/faq#-contact-us)

## More Posts

[![What is MKSaaS](https://mksaas.com/_next/image?url=%2Fimages%2Fblog%2Fpost-mksaas.png&w=3840&q=75)\\
\\
General\\
\\
**What is MKSaaS** \\
\\
Introducing MkSaaS, a complete Next.js boilerplate for building cpm calculator websites\\
\\
![avatar for Fox](https://mksaas.com/_next/image?url=%2Fimages%2Favatars%2Ffox.png&w=3840&q=75)\\
\\
Fox\\
\\
2025/04/14](https://mksaas.com/blog/what-is-mksaas)

## Newsletter

Join the community

Subscribe to our newsletter for the latest news and updates

Email

Subscribe

## MkSaaS Overview
[![Logo](https://mksaas.com/_next/image?url=%2Flogo-dark.png&w=256&q=75)MkSaaS](https://mksaas.com/)

![What is MKSaaS](https://mksaas.com/_next/image?url=%2Fimages%2Fblog%2Fpost-mksaas.png&w=3840&q=75)

2025/04/14

3 min read

# What is MKSaaS

Introducing MkSaaS, a complete Next.js boilerplate for building cpm calculator websites

## [What is MkSaaS?](https://mksaas.com/blog/what-is-mksaas\#what-is-mksaas)

Welcome to MkSaaS, **a complete boilerplate for building cpm calculator websites**. This project is designed to accelerate your development with a robust, modular, and extensible foundation. Feel free to use it as is or extend it for your own needs.

People use MkSaaS to build cpm calculator websites for a variety of reasons:

- üöÄ **Fast & Modern** \- Built with Next.js 15 App Router and TypeScript
- üé® **Beautiful UI** \- Powered by Tailwind CSS and shadcn/ui components
- üì± **Responsive** \- Works great on all devices
- üîç **SEO Optimized** \- Built-in SEO features

Whether you're a beginner or an experienced developer, this documentation will guide you through the setup, configuration, and deployment of your website.

This guide assumes you have some familiarity with Next.js and Drizzle ORM. If you don't have any of these, please refer to the [Official Documentation](https://mksaas.com/docs#official-documentation) as we will not cover the basics in this guide.

Let's get started!

## [Tech Stack](https://mksaas.com/blog/what-is-mksaas\#tech-stack)

[**Next.js 15** \\
\\
The React framework for building full-stack web applications using React 19.](https://nextjs.org/) [**Drizzle ORM** \\
\\
An ORM tool that helps you access your database in a type-safe way.](https://orm.drizzle.team/) [**Tailwind CSS** \\
\\
A utility-first CSS framework packed with utility classes that can be composed to build any design.](https://tailwindcss.com/) [**Radix UI / shadcn/ui / Magic UI / Tailark** \\
\\
A collection of pre-built components and blocks that you can use to build your SaaS websites.](https://ui.shadcn.com/) [**Better Auth** \\
\\
A modern, secure, easy-to-use and framework agnostic authentication solution.](https://better-auth.com/) [**Resend** \\
\\
A modern email service that allows you to send emails from your application.](https://resend.com/) [**Fumadocs** \\
\\
A beautiful documentation framework for Developers, flexible and performant.](https://fumadocs.vercel.app/) [**Stripe** \\
\\
The most popular and secure payment processor for SaaS websites.](https://stripe.com/) [**Vercel AI SDK** \\
\\
A collection of tools for building AI applications, open source and free.](https://sdk.vercel.ai/) [**Zustand** \\
\\
A small, fast and scalable state management solution for React applications.](https://zustand-demo.pmnd.rs/) [**Next-Intl** \\
\\
Internationalization library for Next.js that supports routing, messages, and localization.](https://next-intl.dev/) [**Next-Safe-Action** \\
\\
Type-safe server actions for Next.js with built-in validation and error handling.](https://next-safe-action.dev/)

## [What's Next?](https://mksaas.com/blog/what-is-mksaas\#whats-next)

Dive into the [documentation](https://mksaas.com/docs) to explore the features, and start building your SaaS website today! üöÄ

[All Posts](https://mksaas.com/blog)

## Author

![avatar for Fox](https://mksaas.com/_next/image?url=%2Fimages%2Favatars%2Ffox.png&w=3840&q=75)

Fox

## Categories

- [General](https://mksaas.com/blog/category/general)

## Table of Contents

- [What is MkSaaS?](https://mksaas.com/blog/what-is-mksaas#what-is-mksaas)
- [Tech Stack](https://mksaas.com/blog/what-is-mksaas#tech-stack)
- [What's Next?](https://mksaas.com/blog/what-is-mksaas#whats-next)

## More Posts

[![FAQ](https://mksaas.com/_next/image?url=%2Fimages%2Fblog%2Fpost-faq.png&w=3840&q=75)\\
\\
General\\
\\
**FAQ** \\
\\
Frequently asked questions before you buy MkSaaS\\
\\
![avatar for Fox](https://mksaas.com/_next/image?url=%2Fimages%2Favatars%2Ffox.png&w=3840&q=75)\\
\\
Fox\\
\\
2025/04/01](https://mksaas.com/blog/faq)

## Newsletter

Join the community

Subscribe to our newsletter for the latest news and updates

Email

Subscribe

## AI Features Setup
# AI

Learn how to set up and use AI features with OpenAI, DeepSeek, and other AI providers

This guide will help you set up and use AI features with OpenAI, DeepSeek, and other AI providers.

üöß Under construction üöß

## [Next Steps](https://mksaas.com/docs/ai\#next-steps)

While this guide is under construction, explore these related topics:

[**Project Structure** \\
\\
Understand the organization of your codebase](https://mksaas.com/docs/structure) [**IDE Setup** \\
\\
Configure your development environment](https://mksaas.com/docs/ide) [**Getting Started** \\
\\
Set up and run your MkSaaS application](https://mksaas.com/docs/start) [**Database Setup** \\
\\
Configure your database for AI features](https://mksaas.com/docs/database)

### Table of Contents

[Next Steps](https://mksaas.com/docs/ai#next-steps)

## MkSaaS Analytics Guide
# Analytics

Learn how to set up and use various analytics tools in your MkSaaS website

MkSaaS supports multiple analytics tools to track website traffic and user behavior. This flexible approach allows you to choose the analytics service that best fits your needs, privacy requirements, and budget.

## [Analytics System Structure](https://mksaas.com/docs/analytics\#analytics-system-structure)

The analytics system in MkSaaS is designed with the following components:

src

analytics

analytics.tsx

google-analytics.tsx

umami-analytics.tsx

plausible-analytics.tsx

open-panel-analytics.tsx

data-fast-analytics.tsx

seline-analytics.tsx

This modular structure makes it easy to enable or disable specific analytics providers, and to add new ones as needed.

## [Setup](https://mksaas.com/docs/analytics\#setup)

MkSaaS comes pre-configured with support for several popular analytics services:

### [Vercel Analytics](https://mksaas.com/docs/analytics\#vercel-analytics)

[Vercel Analytics](https://vercel.com/analytics) provides detailed insights into your website's visitors without compromising user privacy.

1. Enable Web Analytics in your Vercel project:
   - Go to the Vercel dashboard and select your project
   - Navigate to the Analytics tab
   - Click "Enable" in the Web Analytics section
2. No environment variables are required as MkSaaS integrates Vercel Analytics through website configuration:


src/config/website.tsx

```
analytics: {
  enableVercelAnalytics: true,
}
```

3. If you don't want to use Vercel Analytics, you can disable it in the website configuration:

src/config/website.tsx

```
analytics: {
  enableVercelAnalytics: false,
}
```

Vercel Analytics is implemented using the official [@vercel/analytics](https://vercel.com/docs/analytics/quickstart) package.

### [Vercel Speed Insights](https://mksaas.com/docs/analytics\#vercel-speed-insights)

[Speed Insights](https://vercel.com/docs/speed-insights) helps you monitor and improve your website's performance by measuring Core Web Vitals and user interactions.

1. Enable Speed Insights in your Vercel project:
   - Go to the Vercel dashboard and select your project
   - Navigate to the Analytics tab
   - Click "Enable" in the Speed Insights section
2. No environment variables are required as MkSaaS integrates Speed Insights through website configuration:


src/config/website.tsx

```
analytics: {
  enableSpeedInsights: true,
}
```

3. If you don't want to use Speed Insights, you can disable it in the website configuration:

src/config/website.tsx

```
analytics: {
  enableSpeedInsights: false,
}
```

Speed Insights is implemented using the official [@vercel/speed-insights](https://vercel.com/docs/speed-insights/quickstart) package.

### [Google](https://mksaas.com/docs/analytics\#google)

[Google Analytics](https://analytics.google.com/) is a widely used analytics service that provides comprehensive website tracking and analytics capabilities.

1. Create a Google Analytics account at [analytics.google.com](https://analytics.google.com/)
2. Set up a new property and get your Measurement ID (starts with "G-")
3. Add the following environment variable:

.env

```
NEXT_PUBLIC_GOOGLE_ANALYTICS_ID="G-XXXXXXXXXX"
```

Google Analytics is integrated using the official [@next/third-parties](https://nextjs.org/docs/app/building-your-application/optimizing/third-party-libraries#google-analytics) package for Next.js.

### [Umami](https://mksaas.com/docs/analytics\#umami)

[Umami](https://umami.is/) is a simple, privacy-focused alternative to Google Analytics. It provides essential website statistics without compromising visitor privacy.

1. Create a Umami account at [umami.is](https://umami.is/) or set up your own Umami instance
2. Create a new website in your Umami dashboard
3. Get your Website ID and script URL
4. Add the following environment variables:

.env

```
NEXT_PUBLIC_UMAMI_WEBSITE_ID="your-website-id"
NEXT_PUBLIC_UMAMI_SCRIPT="https://cloud.umami.is/script.js"
```

For self-hosted Umami instances, use your custom script URL instead of the default one.

### [Plausible](https://mksaas.com/docs/analytics\#plausible)

[Plausible](https://plausible.io/) is a lightweight, open-source, and privacy-friendly analytics tool that doesn't require cookie notices.

1. Create a Plausible account at [plausible.io](https://plausible.io/) or set up your own Plausible instance
2. Add your website
3. Get your domain
4. Add the following environment variables:

.env

```
NEXT_PUBLIC_PLAUSIBLE_DOMAIN="yourdomain.com"
NEXT_PUBLIC_PLAUSIBLE_SCRIPT="https://plausible.io/js/script.js"
```

For self-hosted Plausible instances, use your custom script URL instead of the default one.

### [OpenPanel](https://mksaas.com/docs/analytics\#openpanel)

[OpenPanel](https://openpanel.dev/) is an open-source product analytics platform designed for tracking user behavior.

1. Create an OpenPanel account at [openpanel.dev](https://openpanel.dev/)
2. Create a new project
3. Get your Client ID
4. Add the following environment variable:

.env

```
NEXT_PUBLIC_OPENPANEL_CLIENT_ID="your-client-id"
```

### [DataFast](https://mksaas.com/docs/analytics\#datafast)

[DataFast](https://datafa.st/) is a simple, privacy-friendly analytics tool focused on speed and reliability.

1. Create a DataFast account at [datafa.st](https://datafa.st/)
2. Add your website
3. Get your Website ID and domain
4. Add the following environment variables:

.env

```
NEXT_PUBLIC_DATAFAST_ANALYTICS_ID="your-website-id"
NEXT_PUBLIC_DATAFAST_ANALYTICS_DOMAIN="yourdomain.com"
```

### [Seline](https://mksaas.com/docs/analytics\#seline)

[Seline](https://seline.com/) is an analytics platform with a focus on subscription businesses and conversion tracking.

1. Create a Seline account at [seline.com](https://seline.com/)
2. Set up your project
3. Get your token
4. Add the following environment variable:

.env

```
NEXT_PUBLIC_SELINE_TOKEN="your-token"
```

## [How It Works](https://mksaas.com/docs/analytics\#how-it-works)

MkSaaS implements analytics tracking through a central `Analytics` component that conditionally renders individual analytics components based on environment variables and configuration:

src/analytics/analytics.tsx

```
export function Analytics() {
  if (process.env.NODE_ENV !== 'production') {
    return null;
  }

  return (
    <>
      {/* google analytics */}
      <GoogleAnalytics />

      {/* umami analytics */}
      <UmamiAnalytics />

      {/* plausible analytics */}
      <PlausibleAnalytics />

      {/* datafast analytics */}
      <DataFastAnalytics />

      {/* openpanel analytics */}
      <OpenPanelAnalytics />

      {/* seline analytics */}
      <SelineAnalytics />

      {/* vercel analytics */}
      {websiteConfig.analytics.enableVercelAnalytics && (
        <VercelAnalytics />
      )}

      {/* speed insights */}
      {websiteConfig.analytics.enableSpeedInsights && (
        <SpeedInsights />
      )}
    </>
  );
}
```

Each analytics component is:

- Only active in production mode
- Only loaded if the required environment variables are set or enabled in website configuration
- Implemented with minimal overhead

This means you can enable multiple analytics services simultaneously, or just use one that fits your needs.

## [Customization](https://mksaas.com/docs/analytics\#customization)

### [Adding a Custom Analytics](https://mksaas.com/docs/analytics\#adding-a-custom-analytics)

You can add support for additional analytics services by following these steps:

1. Create a new file in the `src/analytics` directory (e.g., `my-analytics.tsx`)
2. Implement your analytics component
3. Add it to the `Analytics` component

Here's an example of adding a custom analytics service:

src/analytics/my-analytics.tsx

```
'use client';

import Script from 'next/script';

/**
 * My Custom Analytics
 *
 * https://example.com
 */
export function MyAnalytics() {
  if (process.env.NODE_ENV !== 'production') {
    return null;
  }

  const apiKey = process.env.NEXT_PUBLIC_MY_ANALYTICS_API_KEY;
  if (!apiKey) {
    return null;
  }

  return (
    <Script
      strategy="afterInteractive"
      src="https://example.com/analytics.js"
      data-api-key={apiKey}
    />
  );
}
```

Then, update the `Analytics` component to include your new service:

src/analytics/analytics.tsx

```
import { MyAnalytics } from './my-analytics';

export function Analytics() {
  // ...existing code

  return (
    <>
      {/* existing analytics components */}

      {/* your custom analytics */}
      <MyAnalytics />
    </>
  );
}
```

Finally, add the necessary environment variables:

.env

```
NEXT_PUBLIC_MY_ANALYTICS_API_KEY="your-api-key"
```

## [Best Practices](https://mksaas.com/docs/analytics\#best-practices)

1. **Consider Privacy Regulations**: Choose analytics tools that comply with privacy regulations like GDPR and CCPA
2. **Implement Cookie Consent**: If your analytics solution uses cookies, implement a proper cookie consent mechanism
3. **Use Multiple Tools for Different Purposes**: Consider combining privacy-friendly tools like Plausible or Vercel Analytics for basic metrics with more comprehensive tools for detailed analysis
4. **Keep Environment Variables Secure**: Never commit your API keys to version control; use environment variables and secrets management
5. **Test in Development**: While analytics components only activate in production, test that they correctly load when the required environment variables are set
6. **Minimize Performance Impact**: Use the appropriate loading strategy for scripts ( `afterInteractive` or `lazyOnload`) to minimize impact on page performance

## [Next Steps](https://mksaas.com/docs/analytics\#next-steps)

Now that you understand how to set up analytics for your MkSaaS website, explore these related integrations:

[**Email** \\
\\
Learn how to set up and use email functionality](https://mksaas.com/docs/email) [**Newsletter** \\
\\
Set up newsletter subscriptions with analytics tracking](https://mksaas.com/docs/newsletter) [**Payment** \\
\\
Configure payment processing](https://mksaas.com/docs/payment) [**Database** \\
\\
Set up and configure your database connection](https://mksaas.com/docs/database)

### Table of Contents

[Analytics System Structure](https://mksaas.com/docs/analytics#analytics-system-structure) [Setup](https://mksaas.com/docs/analytics#setup) [Vercel Analytics](https://mksaas.com/docs/analytics#vercel-analytics) [Vercel Speed Insights](https://mksaas.com/docs/analytics#vercel-speed-insights) [Google](https://mksaas.com/docs/analytics#google) [Umami](https://mksaas.com/docs/analytics#umami) [Plausible](https://mksaas.com/docs/analytics#plausible) [OpenPanel](https://mksaas.com/docs/analytics#openpanel) [DataFast](https://mksaas.com/docs/analytics#datafast) [Seline](https://mksaas.com/docs/analytics#seline) [How It Works](https://mksaas.com/docs/analytics#how-it-works) [Customization](https://mksaas.com/docs/analytics#customization) [Adding a Custom Analytics](https://mksaas.com/docs/analytics#adding-a-custom-analytics) [Best Practices](https://mksaas.com/docs/analytics#best-practices) [Next Steps](https://mksaas.com/docs/analytics#next-steps)

## MkSaaS Authentication Guide
# Authentication

Learn how to set up and use authentication with Better Auth in MkSaaS

MkSaaS uses [Better Auth](https://www.better-auth.com/) for authentication, providing a flexible and secure system with multiple authentication methods, session management, and role-based access control.

## [Setup](https://mksaas.com/docs/auth\#setup)

To set up authentication in MkSaaS, follow these steps to configure the necessary environment variables:

### [1\. Generate Better Auth Secret Key](https://mksaas.com/docs/auth\#1-generate-better-auth-secret-key)

The `BETTER_AUTH_SECRET` is a random string used for encryption and generating hashes. You can generate a secret key using the OpenSSL command:

```
openssl rand -base64 32
```

After generating your secret key, add it to your `.env` file:

```
BETTER_AUTH_SECRET="your_generated_secret_key"
```

### [2\. Configure GitHub OAuth](https://mksaas.com/docs/auth\#2-configure-github-oauth)

To enable GitHub authentication, you need to register your application:

1. Go to [GitHub Developer Settings](https://github.com/settings/developers)
2. Click on "OAuth Apps" and then "New OAuth App"
3. Fill in the registration form:
   - **Application name**: Your application name (e.g., "MkSaaS")
   - **Homepage URL**: Your site's URL (e.g., `https://your-domain.com` or `http://localhost:3000` for local development)
   - **Application description**: A brief description of your application
   - **Authorization callback URL**: Set this to `https://your-domain.com/api/auth/callback/github` (or `http://localhost:3000/api/auth/callback/github` for local development)
4. Click "Register application"
5. After registration, you'll see your Client ID
6. Click "Generate a new client secret" to create your Client Secret
7. Copy both values and add them to your `.env` file:

```
GITHUB_CLIENT_ID="your_github_client_id"
GITHUB_CLIENT_SECRET="your_github_client_secret"
```

Create **two different** OAuth applications in GitHub - one for production and one for development. Never use the same OAuth application for both environments as they require different callback URLs.

### [3\. Configure Google OAuth](https://mksaas.com/docs/auth\#3-configure-google-oauth)

To enable Google authentication, follow these steps to obtain client credentials:

1. Go to the [Google Cloud Console](https://console.cloud.google.com/apis/credentials)
2. Create a new project or select an existing one
3. Go to "Credentials" in the left sidebar
4. Click "Create Credentials" and select "OAuth client ID"
5. If this is your first time, you may need to configure the OAuth consent screen:
   - User Type: Choose "External"
   - Fill in the required information (app name, user support email, developer contact)
   - Add authorized domains including your application domain
   - Click "Save and Continue" through each section
6. Return to "Credentials" and create the OAuth client ID:
   - Application type: Web application
   - Name: Your application name
   - Authorized JavaScript origins: Add your domain (e.g., `https://your-domain.com` or `http://localhost:3000`)
   - Authorized redirect URIs: Add `https://your-domain.com/api/auth/callback/google` (or `http://localhost:3000/api/auth/callback/google` for local development)
7. Click "Create", copy the provided Client ID and Client Secret, add them to the `.env` file:

```
GOOGLE_CLIENT_ID="your_google_client_id"
GOOGLE_CLIENT_SECRET="your_google_client_secret"
```

Create two different OAuth applications in Google Cloud Console - one for production and one for development. Never use the same OAuth application for both environments as they require different callback URLs.

If you are setting up the environment, now you can **go back to the Environment Setup guide** and continue. The rest of this guide can be read later.

[**Environment Setup** \\
\\
Set up environment variables](https://mksaas.com/docs/env#authentication)

* * *

## [Authentication System Structure](https://mksaas.com/docs/auth\#authentication-system-structure)

The authentication system in MkSaaS is designed with the following components:

src

lib

auth.ts

auth-client.ts

components

app

This structure follows Next.js best practices with the App Router and handles internationalization through the locale parameter.

## [Core Features](https://mksaas.com/docs/auth\#core-features)

- Email and password authentication with email verification
- Password reset functionality
- Social login providers (Google, GitHub)
- Account linking between different authentication methods
- User management (including admin functionality)
- Session management with cookie-based caching
- Automatic newsletter subscription on registration (optional)

## [Client-Side Usage](https://mksaas.com/docs/auth\#client-side-usage)

### [Accessing Session Data](https://mksaas.com/docs/auth\#accessing-session-data)

In client components, you can access the user's session data using the `useSession` hook:

```
'use client';

import { useSession } from '@/lib/auth-client';

export function ProfileButton() {
  const { data: session, isPending } = useSession();

  if (isPending) {
    return <div>Loading...</div>;
  }

  if (session) {
    return (
      <div>
        <p>Welcome, {session.user.name}!</p>
        <button onClick={() => signOut()}>Sign out</button>
      </div>
    );
  }

  return (
    <button onClick={() => signIn.social({ provider: 'google' })}>
      Sign in
    </button>
  );
}
```

### [Authentication Operations](https://mksaas.com/docs/auth\#authentication-operations)

The auth client provides methods for common authentication operations:

```
import { signIn, signOut } from '@/lib/auth-client';

// Sign in with email and password
signIn.emailAndPassword({
  email: 'user@example.com',
  password: 'password123',
});

// Sign in with social provider
signIn.social({
  provider: 'google',
});

// Sign out
signOut();
```

## [Protecting Routes](https://mksaas.com/docs/auth\#protecting-routes)

### [Server-Side Route Protection](https://mksaas.com/docs/auth\#server-side-route-protection)

In server components, you can protect routes by checking the session:

```
import { auth } from '@/lib/auth';
import { redirect } from 'next/navigation';
import { headers } from 'next/headers';

export default async function ProtectedPage() {
  const session = await auth.api.getSession({ headers: await headers() });

  if (!session?.user) {
    redirect('/auth/login');
  }

  return <div>Protected content</div>;
}
```

### [Admin Route Protection](https://mksaas.com/docs/auth\#admin-route-protection)

For admin-only routes:

```
import { auth } from '@/lib/auth';
import { redirect } from 'next/navigation';
import { headers } from 'next/headers';

export default async function AdminPage() {
  const session = await auth.api.getSession({ headers: await headers() });

  if (!session?.user || session.user.role !== 'admin') {
    redirect('/auth/login');
  }

  return <div>Admin content</div>;
}
```

## [Error Handling](https://mksaas.com/docs/auth\#error-handling)

Better Auth supports error handling and redirection:

```
onAPIError: {
  errorURL: '/auth/error',
  onError: (error, ctx) => {
    console.error('auth error:', error);
  },
},
```

## [Best Practices](https://mksaas.com/docs/auth\#best-practices)

1. **Require Email Verification**: Always require email verification for new users
2. **Provide Multiple Authentication Methods**: Offer both email/password and social logins
3. **Use Secure Session Settings**: Configure appropriate session timeouts and cookie security
4. **Handle Errors Gracefully**: Provide user-friendly error messages and fallbacks
5. **Protect Sensitive Routes**: Implement proper authorization checks on both client and server
6. **Keep Auth Libraries Updated**: Regularly update dependencies
7. **Consider Different User Roles**: Implement proper role-based access controls

## [Next Steps](https://mksaas.com/docs/auth\#next-steps)

Now that you understand how authentication works in MkSaaS, explore these related integrations:

[**Email** \\
\\
Configure email services for authentication flows](https://mksaas.com/docs/email) [**Newsletter** \\
\\
Set up newsletter subscriptions for new users](https://mksaas.com/docs/newsletter) [**Database** \\
\\
Configure the database for user data storage](https://mksaas.com/docs/database) [**Environment Setup** \\
\\
Set up environment variables for authentication](https://mksaas.com/docs/env)

### Table of Contents

[Setup](https://mksaas.com/docs/auth#setup) [1\. Generate Better Auth Secret Key](https://mksaas.com/docs/auth#1-generate-better-auth-secret-key) [2\. Configure GitHub OAuth](https://mksaas.com/docs/auth#2-configure-github-oauth) [3\. Configure Google OAuth](https://mksaas.com/docs/auth#3-configure-google-oauth) [Authentication System Structure](https://mksaas.com/docs/auth#authentication-system-structure) [Core Features](https://mksaas.com/docs/auth#core-features) [Client-Side Usage](https://mksaas.com/docs/auth#client-side-usage) [Accessing Session Data](https://mksaas.com/docs/auth#accessing-session-data) [Authentication Operations](https://mksaas.com/docs/auth#authentication-operations) [Protecting Routes](https://mksaas.com/docs/auth#protecting-routes) [Server-Side Route Protection](https://mksaas.com/docs/auth#server-side-route-protection) [Admin Route Protection](https://mksaas.com/docs/auth#admin-route-protection) [Error Handling](https://mksaas.com/docs/auth#error-handling) [Best Practices](https://mksaas.com/docs/auth#best-practices) [Next Steps](https://mksaas.com/docs/auth#next-steps)

## Blog Management System
# Blog

Learn how to create, manage, and customize blog posts with multi-language support

MkSaaS includes a powerful blog system built with Content Collections and MDX. The blog system supports multi-language content, categories, authors, and rich content formatting, making it ideal for SaaS marketing, announcements, tutorials, and knowledge base articles.

## [Blog System Structure](https://mksaas.com/docs/blog\#blog-system-structure)

The blog system is built using [Content Collections](https://www.content-collections.dev/docs/quickstart/next) and integrates with internationalization.

content

blog

author

category

src

app/\[locale\]/(marketing)/blog

\[...slug\]

(blog)

components/blog

blog-card.tsx

blog-grid.tsx

blog-category-filter.tsx

blog-toc.tsx

## [Configuration](https://mksaas.com/docs/blog\#configuration)

The blog system can be configured in `src/config/website.tsx`:

src/config/website.tsx

```
export const websiteConfig = {
  // ...other config
  blog: {
    paginationSize: 9, // Number of posts per page
    relatedPostsSize: 3, // Number of related posts to show
  },
  // ...other config
}
```

## [Blog Collections](https://mksaas.com/docs/blog\#blog-collections)

MkSaaS uses the following blog-related content collections:

### Posts Collection

### Authors Collection

### Categories Collection

## [Creating Blog Content](https://mksaas.com/docs/blog\#creating-blog-content)

### [Adding a New Blog Post](https://mksaas.com/docs/blog\#adding-a-new-blog-post)

1. Create a new MDX file in the `content/blog` directory:

content/blog/my-first-post.mdx

```
---
title: My First Blog Post
description: This is a brief description of my first blog post.
image: /images/blog/my-first-post.jpg
date: 2023-12-01T00:00:00.000Z
published: true
categories: ["tutorial", "announcement"]
author: "mksaas"
---

# Introduction

This is my first blog post. Here I'll talk about something interesting.

## Section 1

Some content here...

## Section 2

More content here...
```

2. Ensure your author and categories exist in their respective content collections.

### [Adding a New Author](https://mksaas.com/docs/blog\#adding-a-new-author)

Create a new MDX file in the `content/author` directory:

content/author/john-doe.mdx

```
---
slug: john-doe
name: John Doe
avatar: /images/authors/john-doe.jpg
---
```

### [Adding a New Category](https://mksaas.com/docs/blog\#adding-a-new-category)

Create a new MDX file in the `content/category` directory:

content/category/tutorial.mdx

```
---
slug: tutorial
name: Tutorial
description: Step-by-step guides to learn new features
---
```

## [Multi-language Support](https://mksaas.com/docs/blog\#multi-language-support)

MkSaaS blog system fully supports internationalization. You can create content in multiple languages using the following file naming convention:

1. **Default locale (e.g., English)**: `filename.mdx`
2. **Other locales (e.g., Chinese)**: `filename.zh.mdx`

### [Multi-language Blog Post Example](https://mksaas.com/docs/blog\#multi-language-blog-post-example)

For an English blog post:

content/blog/welcome-post.mdx

```
---
title: Welcome to our Blog
description: Our first official blog post
image: /images/blog/welcome.jpg
date: 2023-12-01T00:00:00.000Z
published: true
categories: ["announcement"]
author: "mksaas"
---

Content in English...
```

For the same post in Chinese:

content/blog/welcome-post.zh.mdx

```
---
title: Ê¨¢ËøéÊù•Âà∞Êàë‰ª¨ÁöÑÂçöÂÆ¢
description: Êàë‰ª¨ÁöÑÁ¨¨‰∏ÄÁØáÂÆòÊñπÂçöÂÆ¢ÊñáÁ´†
image: /images/blog/welcome.jpg
date: 2023-12-01T00:00:00.000Z
published: true
categories: ["announcement"]
author: "mksaas"
---

Content in Chinese...
```

The system will automatically match the post with the appropriate language based on the user's locale.

### [Multi-language Authors and Categories](https://mksaas.com/docs/blog\#multi-language-authors-and-categories)

Follow the same pattern for authors and categories:

content/author/mksaas.zh.mdx

```
---
slug: mksaas
name: MkSaaS Âõ¢Èòü
avatar: /images/authors/mksaas.jpg
---
```

content/category/announcement.zh.mdx

```
---
slug: announcement
name: ÂÖ¨Âëä
description: ÂÆòÊñπÂπ≥Âè∞ÂÖ¨ÂëäÂíåÊõ¥Êñ∞
---
```

## [Customizing the Blog Schema](https://mksaas.com/docs/blog\#customizing-the-blog-schema)

To add new fields to blog posts, authors, or categories:

1. Modify the schema in `content-collections.ts`
2. Update the transform function as needed
3. Update components to display the new fields

### [Example: Add a "featured" Field](https://mksaas.com/docs/blog\#example-add-a-featured-field)

content-collections.ts

```
export const posts = defineCollection({
  name: 'post',
  directory: 'content/blog',
  include: '**/*.mdx',
  schema: (z) => ({
    title: z.string(),
    description: z.string(),
    image: z.string(),
    date: z.string().datetime(),
    published: z.boolean().default(true),
    categories: z.array(z.string()),
    author: z.string(),
    estimatedTime: z.number().optional(),
    // Add the new field
    featured: z.boolean().default(false),
  }),
  // ...transform logic remains the same
});
```

Then, you can use this field in your blog posts:

content/blog/important-post.mdx

```
---
title: Important Announcement
description: Read this important announcement
image: /images/blog/announcement.jpg
date: 2023-12-01T00:00:00.000Z
published: true
categories: ["announcement"]
author: "mksaas"
featured: true
---

Content here...
```

## [Advanced Usage](https://mksaas.com/docs/blog\#advanced-usage)

### [Changing Blog Post Card Layout](https://mksaas.com/docs/blog\#changing-blog-post-card-layout)

Customize the blog card component in `src/components/blog/blog-card.tsx`:

src/components/blog/blog-card.tsx

```
// Modify card styling
<div className="group flex flex-col border rounded-lg overflow-hidden h-full bg-card shadow-sm hover:shadow-md transition-shadow">
  {/* ... rest of the component */}
</div>
```

### [Querying Posts Programmatically](https://mksaas.com/docs/blog\#querying-posts-programmatically)

You can query posts programmatically using Content Collections:

```
import { allPosts } from 'content-collections';

// Get all published posts
const publishedPosts = allPosts.filter(post => post.published);

// Get featured posts
const featuredPosts = allPosts.filter(post => post.featured);

// Get posts by category
const tutorialPosts = allPosts.filter(post =>
  post.categories.some(category => category.slug === 'tutorial')
);

// Get posts by author
const authorPosts = allPosts.filter(post => post.author.slug === 'john-doe');
```

## [Best Practices](https://mksaas.com/docs/blog\#best-practices)

1. **Use High-Quality Images**: Use properly sized and optimized images for blog posts
2. **Consistent Categories**: Maintain a consistent set of categories across posts
3. **Strong Meta Content**: Write compelling titles and descriptions for SEO benefits
4. **Structured Content**: Use proper headings and sections in your blog post content
5. **Include Table of Contents**: For longer posts, ensure headings are organized for TOC
6. **International Content**: Keep translations consistent across all localized content
7. **Optimize Images**: Use responsive images and lazy loading for better performance

## [Next Steps](https://mksaas.com/docs/blog\#next-steps)

Now that you understand how to work with the blog system in MkSaaS, you might want to explore these related features:

[**Documentation** \\
\\
Learn how to use the documentation](https://mksaas.com/docs/docs) [**i18n** \\
\\
Explore advanced i18n features for your blog](https://mksaas.com/docs/i18n) [**Newsletter** \\
\\
Integrate newsletter subscriptions with your blog](https://mksaas.com/docs/newsletter) [**Configuration** \\
\\
Configure your website settings](https://mksaas.com/docs/config)

### Table of Contents

[Blog System Structure](https://mksaas.com/docs/blog#blog-system-structure) [Configuration](https://mksaas.com/docs/blog#configuration) [Blog Collections](https://mksaas.com/docs/blog#blog-collections) [Creating Blog Content](https://mksaas.com/docs/blog#creating-blog-content) [Adding a New Blog Post](https://mksaas.com/docs/blog#adding-a-new-blog-post) [Adding a New Author](https://mksaas.com/docs/blog#adding-a-new-author) [Adding a New Category](https://mksaas.com/docs/blog#adding-a-new-category) [Multi-language Support](https://mksaas.com/docs/blog#multi-language-support) [Multi-language Blog Post Example](https://mksaas.com/docs/blog#multi-language-blog-post-example) [Multi-language Authors and Categories](https://mksaas.com/docs/blog#multi-language-authors-and-categories) [Customizing the Blog Schema](https://mksaas.com/docs/blog#customizing-the-blog-schema) [Example: Add a "featured" Field](https://mksaas.com/docs/blog#example-add-a-featured-field) [Advanced Usage](https://mksaas.com/docs/blog#advanced-usage) [Changing Blog Post Card Layout](https://mksaas.com/docs/blog#changing-blog-post-card-layout) [Querying Posts Programmatically](https://mksaas.com/docs/blog#querying-posts-programmatically) [Best Practices](https://mksaas.com/docs/blog#best-practices) [Next Steps](https://mksaas.com/docs/blog#next-steps)

## MkSaaS UI Components
# Components

Learn about the components available in MkSaaS and how to use them effectively

MkSaaS includes a comprehensive collection of UI components organized into different categories. The components are carefully structured to maintain consistency, and ease of updates.

## [Component Structure](https://mksaas.com/docs/components\#component-structure)

The components in MkSaaS are organized into several key directories:

src

components

ui

magicui

tailark

auth

blog

dashboard

docs

layout

shared

settings

## [Shadcn/ui Components](https://mksaas.com/docs/components\#shadcnui-components)

Located in the `src/components/ui` directory, these are the foundational components from shadcn/ui. This directory contains base components that serve as building blocks for your application.

- Do not modify components in the `src/components/ui` directory.
- These components are regularly synchronized with the official shadcn/ui releases.
- Any modifications may cause conflicts during sync your codebase with the template.
- The `src/components/ui` directory is excluded from Biome linting and formatting.

### [Available Components](https://mksaas.com/docs/components\#available-components)

The `src/components/ui` directory includes:

| Category | Components | Description |
| --- | --- | --- |
| Form | [Input](https://ui.shadcn.com/docs/components/input) | Text input field |
|  | [Textarea](https://ui.shadcn.com/docs/components/textarea) | Multi-line text input |
|  | [Select](https://ui.shadcn.com/docs/components/select) | Dropdown selection |
|  | [Checkbox](https://ui.shadcn.com/docs/components/checkbox) | Single checkbox input |
|  | [Radio Group](https://ui.shadcn.com/docs/components/radio-group) | Radio button group |
|  | [Switch](https://ui.shadcn.com/docs/components/switch) | Toggle switch |
|  | [Form](https://ui.shadcn.com/docs/components/form) | Form validation and handling |
|  | [Input OTP](https://ui.shadcn.com/docs/components/input-otp) | One-time password input |
| Dialog | [Dialog](https://ui.shadcn.com/docs/components/dialog) | Modal dialog |
|  | [Alert Dialog](https://ui.shadcn.com/docs/components/alert-dialog) | Alert confirmation |
|  | [Sheet](https://ui.shadcn.com/docs/components/sheet) | Slide-out dialog |
|  | [Drawer](https://ui.shadcn.com/docs/components/drawer) | Slide-out panel |
|  | [Popover](https://ui.shadcn.com/docs/components/popover) | Floating content |
|  | [Hover Card](https://ui.shadcn.com/docs/components/hover-card) | Hover content card |
| Navigation | [Tabs](https://ui.shadcn.com/docs/components/tabs) | Tabbed interface |
|  | [Navigation Menu](https://ui.shadcn.com/docs/components/navigation-menu) | Navigation menu |
|  | [Breadcrumb](https://ui.shadcn.com/docs/components/breadcrumb) | Breadcrumb navigation |
|  | [Menubar](https://ui.shadcn.com/docs/components/menubar) | Menu bar navigation |
|  | [Pagination](https://ui.shadcn.com/docs/components/pagination) | Page navigation |
| Data Display | [Table](https://ui.shadcn.com/docs/components/table) | Data table |
|  | [Card](https://ui.shadcn.com/docs/components/card) | Content card |
|  | [Calendar](https://ui.shadcn.com/docs/components/calendar) | Date picker |
|  | [Carousel](https://ui.shadcn.com/docs/components/carousel) | Image carousel |
|  | [Avatar](https://ui.shadcn.com/docs/components/avatar) | User avatar |
|  | [Badge](https://ui.shadcn.com/docs/components/badge) | Status badge |
| Layout | [Accordion](https://ui.shadcn.com/docs/components/accordion) | Collapsible sections |
|  | [Collapsible](https://ui.shadcn.com/docs/components/collapsible) | Toggle content |
|  | [Separator](https://ui.shadcn.com/docs/components/separator) | Visual separator |
|  | [Aspect Ratio](https://ui.shadcn.com/docs/components/aspect-ratio) | Maintain aspect ratio |
|  | [Scroll Area](https://ui.shadcn.com/docs/components/scroll-area) | Custom scrollbar |
|  | [Resizable](https://ui.shadcn.com/docs/components/resizable) | Resizable panels |
| Feedback | [Alert](https://ui.shadcn.com/docs/components/alert) | Status alert |
|  | [Progress](https://ui.shadcn.com/docs/components/progress) | Progress indicator |
|  | [Skeleton](https://ui.shadcn.com/docs/components/skeleton) | Loading placeholder |
|  | [Toast](https://ui.shadcn.com/docs/components/toast) | Toast notification |
|  | [Sonner](https://ui.shadcn.com/docs/components/sonner) | Toast manager |
|  | [Command](https://ui.shadcn.com/docs/components/command) | Command palette |

## [Magic UI Components](https://mksaas.com/docs/components\#magic-ui-components)

The `src/components/magicui` directory contains specialized UI components with advanced animations and interactions.

- Do not modify components in the `src/components/magicui` directory.
- These components are regularly synchronized with the official magicui releases.
- Avoid modifying these components as they are synchronized with official updates.
- The `src/components/magicui` directory is excluded from Biome linting and formatting.

### [Available Components](https://mksaas.com/docs/components\#available-components-1)

The `src/components/magicui` directory includes:

| Category | Components | Description |
| --- | --- | --- |
| Text Effects | [Animated Gradient Text](https://magicui.design/docs/components/animated-gradient-text) | Text with animated gradient |
|  | [Morphing Text](https://magicui.design/docs/components/morphing-text) | Text morphing animation |
|  | [Sparkles Text](https://magicui.design/docs/components/sparkles-text) | Text with sparkle effects |
|  | [Word Rotate](https://magicui.design/docs/components/word-rotate) | Rotating word animation |
|  | [Hyper Text](https://magicui.design/docs/components/hyper-text) | Interactive text effects |
|  | [Flip Text](https://magicui.design/docs/components/flip-text) | Text flip animation |
|  | [Typing Animation](https://magicui.design/docs/components/typing-animation) | Typewriter effect |
| Interactive Elements | [Animated Beam](https://magicui.design/docs/components/animated-beam) | Animated beam effect |
|  | [Border Beam](https://magicui.design/docs/components/border-beam) | Border animation |
|  | [Pulsating Button](https://magicui.design/docs/components/pulsating-button) | Button with pulse effect |
|  | [Shimmer Button](https://magicui.design/docs/components/shimmer-button) | Button with shimmer |
|  | [Rainbow Button](https://magicui.design/docs/components/rainbow-button) | Rainbow effect button |
|  | [Ripple Button](https://magicui.design/docs/components/ripple-button) | Button with ripple |
|  | [Shiny Button](https://magicui.design/docs/components/shiny-button) | Button with shine |
| Layout Components | [Magic Card](https://magicui.design/docs/components/magic-card) | Interactive card |
|  | [Animated Grid Pattern](https://magicui.design/docs/components/animated-grid-pattern) | Animated grid background |
|  | [Bento Grid](https://magicui.design/docs/components/bento-grid) | Bento box layout |
|  | [Marquee](https://magicui.design/docs/components/marquee) | Scrolling content |
|  | [Hero Video Dialog](https://magicui.design/docs/components/hero-video-dialog) | Video modal |
|  | [Box Reveal](https://magicui.design/docs/components/box-reveal) | Reveal animation |
| Special Effects | [Confetti](https://magicui.design/docs/components/confetti) | Confetti animation |
|  | [Meteors](https://magicui.design/docs/components/meteors) | Meteor effect |
|  | [Blur Fade](https://magicui.design/docs/components/blur-fade) | Blur transition |
|  | [Ripple](https://magicui.design/docs/components/ripple) | Ripple effect |
|  | [Dot Pattern](https://magicui.design/docs/components/dot-pattern) | Dot background |
|  | [Grid Pattern](https://magicui.design/docs/components/grid-pattern) | Grid background |

## [Tailark Marketing Blocks](https://mksaas.com/docs/components\#tailark-marketing-blocks)

Tailark marketing blocks are split between the `src/app/[locale]/preview` and `src/components/tailark` directories.

- Do not modify components in the `src/app/[locale]/preview` and `src/components/tailark` directories.
- These components are regularly synchronized with the official tailark releases.
- Avoid modifying these components as they are synchronized with official updates.
- The `src/app/[locale]/preview` and `src/components/tailark` directories are excluded from Biome linting and formatting.

### [Available Blocks](https://mksaas.com/docs/components\#available-blocks)

The Tailark directories include:

| Category | Description |
| --- | --- |
| [Hero Sections](https://mksaas.com/blocks/hero-section) | Engaging, attention-grabbing page headers |
| [Logo Cloud](https://mksaas.com/blocks/logo-cloud) | Display partner or client logos |
| [Features](https://mksaas.com/blocks/features) | Highlight your product's key capabilities |
| [Integrations](https://mksaas.com/blocks/integrations) | Showcase third-party integrations |
| [Content](https://mksaas.com/blocks/content) | General content display sections |
| [Stats](https://mksaas.com/blocks/stats) | Display important metrics and statistics |
| [Team](https://mksaas.com/blocks/team) | Present your team members |
| [Testimonials](https://mksaas.com/blocks/testimonials) | Display customer reviews and testimonials |
| [Call-to-action](https://mksaas.com/blocks/call-to-action) | Encourage user actions |
| [Footer](https://mksaas.com/blocks/footer) | Page footers with links and information |
| [Pricing](https://mksaas.com/blocks/pricing) | Showcase your pricing plans |
| [Comparator](https://mksaas.com/blocks/comparator) | Compare different product features or plans |
| [FAQs](https://mksaas.com/blocks/faqs) | Answer common questions |
| [Login](https://mksaas.com/blocks/login) | Login related components |
| [Sign-up](https://mksaas.com/blocks/sign-up) | Sign-up related components |
| [Forgot Password](https://mksaas.com/blocks/forgot-password) | Password recovery interfaces |
| [Contact](https://mksaas.com/blocks/contact) | Contact forms and information |

## [Business Components](https://mksaas.com/docs/components\#business-components)

Business-specific components are organized in dedicated directories under `src/components`. Each module has its own directory:

src

components

auth

login-form.tsx

register-form.tsx

auth-card.tsx

blog

dashboard

docs

layout

shared

## [Adding Custom Components](https://mksaas.com/docs/components\#adding-custom-components)

When adding new components to your project:

1. **Choose the Right Location**: Place components in the appropriate business module directory
2. **Follow Naming Conventions**: Use descriptive, PascalCase names for components
3. **Maintain Consistency**: Follow the existing component structure and patterns

Example of adding a new component:

```
// src/components/dashboard/AnalyticsChart.tsx
import { Card } from "@/components/ui/card"
import { Chart } from "@/components/ui/chart"

export function AnalyticsChart() {
  return (
    <Card>
      <Chart data={...} />
    </Card>
  )
}
```

## [References](https://mksaas.com/docs/components\#references)

- [Shadcn/ui](https://ui.shadcn.com/)
- [Magic UI](https://magicui.design/)
- [Tailark](https://tailark.com/)

## [Next Steps](https://mksaas.com/docs/components\#next-steps)

Now that you understand how to use components in MkSaaS, you might want to explore these related topics:

[**Themes** \\
\\
Configure theme and appearance settings](https://mksaas.com/docs/themes) [**Fonts** \\
\\
Work with fonts in your MkSaaS website](https://mksaas.com/docs/fonts) [**Customize Pages** \\
\\
How to customize pages in MkSaaS](https://mksaas.com/docs/pages) [**Landing Page** \\
\\
How to create a landing page in MkSaaS](https://mksaas.com/docs/landingpage)

### Table of Contents

[Component Structure](https://mksaas.com/docs/components#component-structure) [Shadcn/ui Components](https://mksaas.com/docs/components#shadcnui-components) [Available Components](https://mksaas.com/docs/components#available-components) [Magic UI Components](https://mksaas.com/docs/components#magic-ui-components) [Available Components](https://mksaas.com/docs/components#available-components-1) [Tailark Marketing Blocks](https://mksaas.com/docs/components#tailark-marketing-blocks) [Available Blocks](https://mksaas.com/docs/components#available-blocks) [Business Components](https://mksaas.com/docs/components#business-components) [Adding Custom Components](https://mksaas.com/docs/components#adding-custom-components) [References](https://mksaas.com/docs/components#references) [Next Steps](https://mksaas.com/docs/components#next-steps)

## Avatar Button Configuration
# Avatar Button

Configuring the user avatar dropdown menu

Defines the menu items in the user avatar dropdown in the header, each item is [MenuItem](https://mksaas.com/docs/config#menuitem).

src/config/avatar-config.tsx

```
export function getAvatarLinks(): MenuItem[] {
  const t = useTranslations('Marketing.avatar');

  return [\
    {\
      title: t('dashboard'),\
      href: Routes.Dashboard,\
      icon: <LayoutDashboardIcon className="size-4 shrink-0" />,\
    },\
    {\
      title: t('billing'),\
      href: Routes.SettingsBilling,\
      icon: <CreditCardIcon className="size-4 shrink-0" />,\
    },\
    {\
      title: t('settings'),\
      href: Routes.SettingsProfile,\
      icon: <Settings2Icon className="size-4 shrink-0" />,\
    },\
  ];
}
```

The avatar configuration defines the dropdown menu that appears when users click on their profile avatar in the header. This typically includes links to:

- User dashboard
- Account settings
- Billing/subscription management
- Logout option (handled separately)

This menu provides quick access to user-specific functionality without cluttering the main navigation.

## [Next Steps](https://mksaas.com/docs/config/avatar\#next-steps)

Now that you understand the avatar configuration, explore these related topics:

[**Website Configuration** \\
\\
Configure core settings for your MkSaaS website](https://mksaas.com/docs/config/website) [**Navbar Configuration** \\
\\
Configure the navigation menu in the header](https://mksaas.com/docs/config/navbar) [**Footer Configuration** \\
\\
Configure the links in the website footer](https://mksaas.com/docs/config/footer) [**Sidebar Configuration** \\
\\
Configure the navigation menu for dashboard](https://mksaas.com/docs/config/sidebar)

### Table of Contents

[Next Steps](https://mksaas.com/docs/config/avatar#next-steps)

## Footer Menu Configuration
# Footer Menus

Configuring the links in the website footer

Defines the links in the website footer, each item is [NestedMenuItem](https://mksaas.com/docs/config#nestedmenuitem).

src/config/footer-config.tsx

```
export function getFooterLinks(): NestedMenuItem[] {
  const t = useTranslations('Marketing.footer');

  return [\
    {\
      title: t('product.title'),\
      items: [\
        {\
          title: t('product.items.features'),\
          href: Routes.Features,\
          external: false,\
        },\
        // More product links...\
      ],\
    },\
    {\
      title: t('resources.title'),\
      items: [\
        {\
          title: t('resources.items.blog'),\
          href: Routes.Blog,\
          external: false,\
        },\
        // More resource links...\
      ],\
    },\
    // More footer sections...\
  ];
}
```

Footer links are organized in columns with headers. Each column has a title and a list of links. The structure allows for a clean organization of links by category.

You can delete or add more items to the footer as needed.

## [Next Steps](https://mksaas.com/docs/config/footer\#next-steps)

Now that you understand the footer configuration, explore these related topics:

[**Website Configuration** \\
\\
Configure core settings for your MkSaaS website](https://mksaas.com/docs/config/website) [**Navbar Configuration** \\
\\
Configure the navigation menu in the header](https://mksaas.com/docs/config/navbar) [**Social Configuration** \\
\\
Configure social media links](https://mksaas.com/docs/config/social) [**Sidebar Configuration** \\
\\
Configure the navigation menu for dashboard](https://mksaas.com/docs/config/sidebar)

### Table of Contents

[Next Steps](https://mksaas.com/docs/config/footer#next-steps)

## MkSaaS Configuration Guide
# Configuration

Learn how to configure your MkSaaS website

This guide provides a detailed reference for configuring your MkSaaS website.

## [Configuration Structure](https://mksaas.com/docs/config\#configuration-structure)

The configuration is split into several files in the `src/config` directory, each responsible for a specific aspect of the website.

src/config

website.tsx

navbar-config.tsx

footer-config.tsx

sidebar-config.tsx

avatar-config.tsx

social-config.tsx

price-config.tsx

Q: What is the difference between the website configuration in `src/config/website.tsx` and the other configuration files in `src/config/xxx.tsx`?

A: The `website.tsx` file defines the core settings for the website, **excluding locale-specific information**, while the other configuration files are used to define the **locale-specific content** of the website.

`WebsiteConfig` can be used in both client and server components, while other configuration files can only be used in the client components.

## [Configuration Files](https://mksaas.com/docs/config\#configuration-files)

The configuration files are used to define the structure and content of the website.

[**Website Configuration** \\
Core settings for the website](https://mksaas.com/docs/config/website) [**Navbar Configuration** \\
Configure the navigation menu in the header](https://mksaas.com/docs/config/navbar) [**Footer Configuration** \\
Set up links and sections in the website footer](https://mksaas.com/docs/config/footer) [**Sidebar Configuration** \\
Customize the dashboard sidebar navigation](https://mksaas.com/docs/config/sidebar) [**Avatar Configuration** \\
Configure the user avatar dropdown menu](https://mksaas.com/docs/config/avatar) [**Social Configuration** \\
Manage social media links and sharing options](https://mksaas.com/docs/config/social) [**Price Configuration** \\
Define subscription plans and pricing options](https://mksaas.com/docs/config/price)

## [Shared Types](https://mksaas.com/docs/config\#shared-types)

The configuration uses consistent types across different menus:

### [MenuItem and NestedMenuItem](https://mksaas.com/docs/config\#menuitem-and-nestedmenuitem)

Basic menu item with the following properties:

| Property | Type | Description |
| --- | --- | --- |
| `title` | `string` | Display text for the menu item |
| `description` | `string` | Optional description for dropdown items |
| `icon` | `ReactNode` | Optional icon component |
| `href` | `string` | Link URL destination |
| `external` | `boolean` | Whether the link opens in a new tab |
| `authorizeOnly` | `string[]` | User roles that can see this item |
| `items` | `MenuItem[]` | NestedMenuItem only, can have submenu items for dropdowns |

## [Best Practices](https://mksaas.com/docs/config\#best-practices)

1. Use the `Routes` object (in `src/routes.ts`) for defining URLs to ensure consistency
2. Keep translations in the appropriate locale files and use the translation functions
3. Use consistent icons from the [Lucide icon set](https://lucide.dev/icons/)
4. For role-based items, always use the `authorizeOnly` property
5. Client side components should use the functions (e.g., `getNavbarLinks()`) while server side components can import the raw configuration objects

## [Next Steps](https://mksaas.com/docs/config\#next-steps)

Now that you understand the configuration structure, explore these related topics:

[**Website Configuration** \\
\\
Core settings for the website](https://mksaas.com/docs/config/website) [**Navbar Configuration** \\
\\
Configure the navigation menu in the header](https://mksaas.com/docs/config/navbar) [**Footer Configuration** \\
\\
Configure the links in the website footer](https://mksaas.com/docs/config/footer) [**Sidebar Configuration** \\
\\
Configure the navigation menu for dashboard](https://mksaas.com/docs/config/sidebar)

### Table of Contents

[Configuration Structure](https://mksaas.com/docs/config#configuration-structure) [Configuration Files](https://mksaas.com/docs/config#configuration-files) [Shared Types](https://mksaas.com/docs/config#shared-types) [MenuItem and NestedMenuItem](https://mksaas.com/docs/config#menuitem-and-nestedmenuitem) [Best Practices](https://mksaas.com/docs/config#best-practices) [Next Steps](https://mksaas.com/docs/config#next-steps)

## Navbar Menu Configuration
# Navbar Menus

Configuring the navigation menu in the website header

Defines the navigation menu links in the website header, each item is [NestedMenuItem](https://mksaas.com/docs/config#nestedmenuitem).

src/config/navbar-config.tsx

```
export function getNavbarLinks(): NestedMenuItem[] {
  const t = useTranslations('Marketing.navbar');

  return [\
    {\
      title: t('features.title'),\
      href: Routes.Features,\
      external: false,\
    },\
    {\
      title: t('pricing.title'),\
      href: Routes.Pricing,\
      external: false,\
    },\
    {\
      title: t('blocks.title'),\
      items: [\
        {\
          title: t('blocks.items.hero-section.title'),\
          icon: <FlameIcon className="size-4 shrink-0" />,\
          href: Routes.HeroBlocks,\
          external: false,\
        },\
        // More dropdown items...\
      ],\
    },\
    // More navigation items...\
  ];
}
```

The navbar supports both simple links and dropdown menus with nested items. Dropdowns can include icons and descriptions for a richer user experience.

You can delete or add more items to the navbar as needed.

## [Next Steps](https://mksaas.com/docs/config/navbar\#next-steps)

Now that you understand the navbar configuration, explore these related topics:

[**Website Configuration** \\
\\
Configure core settings for your MkSaaS website](https://mksaas.com/docs/config/website) [**Footer Configuration** \\
\\
Configure the links in the website footer](https://mksaas.com/docs/config/footer) [**Sidebar Configuration** \\
\\
Configure the navigation menu for dashboard](https://mksaas.com/docs/config/sidebar) [**Avatar Configuration** \\
\\
Configure the user avatar dropdown menu](https://mksaas.com/docs/config/avatar)

### Table of Contents

[Next Steps](https://mksaas.com/docs/config/navbar#next-steps)

## Price Plans Configuration
# Price Plans

Configuring price plans

Expands the price plans defined in `website.tsx` with translated content.

src/config/price-config.tsx

```
// Returns price plans with translated content
export function getPricePlans(): Record<string, PricePlan> {
  const t = useTranslations('PricePlans');
  const priceConfig = websiteConfig.price;
  const plans: Record<string, PricePlan> = {};

  // Add translated content to each plan
  if (priceConfig.plans.free) {
    plans.free = {
      ...priceConfig.plans.free,
      name: t('free.name'),
      description: t('free.description'),
      features: [\
        t('free.features.feature-1'),\
        t('free.features.feature-2'),\
        t('free.features.feature-3'),\
        t('free.features.feature-4'),\
      ],
      limits: [\
        t('free.limits.limit-1'),\
        t('free.limits.limit-2'),\
        t('free.limits.limit-3'),\
      ],
    };
  }
  ...
}
```

Each price plan in the `plans` object can have the following properties:

| Property | Type | Description |
| --- | --- | --- |
| `id` | `string` | Unique identifier for the plan |
| `name` | `string?` | Display name of the plan |
| `description` | `string?` | Description of the plan features |
| `features` | `string[]?` | List of features included in this plan |
| `limits` | `string[]?` | List of limits for this plan |
| `prices` | `Price[]` | List of price options for the plan (monthly, yearly, one-time, etc.) |
| `isFree` | `boolean` | Whether this is a free plan |
| `isLifetime` | `boolean` | Whether this is a lifetime (one-time payment) plan |
| `recommended` | `boolean?` | Whether to highlight this plan as recommended |
| `disabled` | `boolean?` | Whether to disable this plan in UI |

Q: What is the difference between the **price configuration** in `website.tsx` and the **price plans** in `price-config.tsx`?

A: The `website.tsx` file defines the basic information about the price plans, excluding locale-specific information, whereas the `price-config.tsx` file enhances these plans by adding translated content.

## [Next Steps](https://mksaas.com/docs/config/price\#next-steps)

Now that you understand the pricing configuration, explore these related topics:

[**Website Configuration** \\
\\
Configure core settings for your MkSaaS website](https://mksaas.com/docs/config/website) [**Navbar Configuration** \\
\\
Configure the navigation menu in the header](https://mksaas.com/docs/config/navbar) [**Footer Configuration** \\
\\
Configure the links in the website footer](https://mksaas.com/docs/config/footer) [**Sidebar Configuration** \\
\\
Configure the navigation menu for dashboard](https://mksaas.com/docs/config/sidebar)

### Table of Contents

[Next Steps](https://mksaas.com/docs/config/price#next-steps)

## Sidebar Menu Configuration
# Sidebar Menus

Configuring the navigation menu for dashboard pages

Defines the navigation menu for dashboard/admin pages, each item is [NestedMenuItem](https://mksaas.com/docs/config#nestedmenuitem).

src/config/sidebar-config.tsx

```
export function getSidebarLinks(): NestedMenuItem[] {
  const t = useTranslations('Dashboard');

  return [\
    {\
      title: t('dashboard.title'),\
      icon: <LayoutDashboardIcon className="size-4 shrink-0" />,\
      href: Routes.Dashboard,\
      external: false,\
    },\
    {\
      title: t('admin.title'),\
      icon: <SettingsIcon className="size-4 shrink-0" />,\
      authorizeOnly: ['admin'],\
      items: [\
        {\
          title: t('admin.users.title'),\
          icon: <UsersRoundIcon className="size-4 shrink-0" />,\
          href: Routes.AdminUsers,\
          external: false,\
        },\
        // More admin items...\
      ],\
    },\
    // More sidebar sections...\
  ];
}
```

The sidebar configuration is similar to the navbar but is specifically designed for the dashboard area. It supports:

- Top-level links with icons
- Expandable sections with nested items
- Role-based visibility through the `authorizeOnly` property

The sidebar is ideal for providing navigation within authenticated sections of your application, with different options based on user roles.

You can delete or add more items to the sidebar as needed.

## [Next Steps](https://mksaas.com/docs/config/sidebar\#next-steps)

Now that you understand the sidebar configuration, explore these related topics:

[**Website Configuration** \\
\\
Configure core settings for your MkSaaS website](https://mksaas.com/docs/config/website) [**Navbar Configuration** \\
\\
Configure the navigation menu in the header](https://mksaas.com/docs/config/navbar) [**Footer Configuration** \\
\\
Configure the links in the website footer](https://mksaas.com/docs/config/footer) [**Avatar Configuration** \\
\\
Configure the user avatar dropdown menu](https://mksaas.com/docs/config/avatar)

### Table of Contents

[Next Steps](https://mksaas.com/docs/config/sidebar#next-steps)

## Social Media Configuration
# Social Media

Configuring social media links

Manages social media links displayed on the website, each item is [MenuItem](https://mksaas.com/docs/config#menuitem).

src/config/social-config.tsx

```
export function getSocialLinks(): MenuItem[] {
  const socialLinks: MenuItem[] = [];

  if (websiteConfig.metadata.social?.github) {
    socialLinks.push({
      title: 'GitHub',
      href: websiteConfig.metadata.social.github,
      icon: <GitHubIcon className="size-4 shrink-0" />,
    });
  }

  // Additional social links based on config...

  return socialLinks;
}
```

The function dynamically generates social media links based on the URLs provided in the `website.tsx` configuration. This ensures consistency between your configuration and what's displayed to users.

## [Next Steps](https://mksaas.com/docs/config/social\#next-steps)

Now that you understand the social media configuration, explore these related topics:

[**Website Configuration** \\
\\
Configure core settings for your MkSaaS website](https://mksaas.com/docs/config/website) [**Footer Configuration** \\
\\
Configure the links in the website footer](https://mksaas.com/docs/config/footer) [**Avatar Configuration** \\
\\
Configure the user avatar dropdown menu](https://mksaas.com/docs/config/avatar) [**Price Configuration** \\
\\
Configure your subscription plans and pricing](https://mksaas.com/docs/config/price)

### Table of Contents

[Next Steps](https://mksaas.com/docs/config/social#next-steps)

## Website Configuration
# Website Configuration

Core settings for your MkSaaS website

The main configuration file that contains the core settings for the website.

MkSaaS boilerplate has already set up the default core settings for you, and you can customize the core settings in this file `src/config/website.tsx`.

src/config/website.tsx

```
export const websiteConfig: WebsiteConfig = {
  metadata: {
    // Theme, mode, images, and social settings
  },
  i18n: {
    // Internationalization settings
  },
  blog: {
    // Blog settings
  },
  mail: {
    // Mail settings
  },
  newsletter: {
    // Newsletter settings
  },
  storage: {
    // Storage settings
  },
  payment: {
    // Payment settings
  },
  price: {
    // Price settings
  },
};
```

### [Metadata](https://mksaas.com/docs/config/website\#metadata)

Controls the appearance and branding of your website. The metadata configuration consists of several subsections:

#### [Theme](https://mksaas.com/docs/config/website\#theme)

Controls the color theme of the website:

| Property | Type | Description |
| --- | --- | --- |
| `defaultTheme` | `'default' | 'blue' | 'green' | 'amber' | 'neutral'` | Sets the default color theme for the website |
| `enableSwitch` | `boolean` | When true, allows users to change the color theme |

Example:

src/config/website.tsx

```
metadata: {
  theme: {
    defaultTheme: 'default', // Choose from: default, blue, green, amber, neutral
    enableSwitch: true,      // Allow users to switch themes
  },
  // ...
}
```

#### [Mode](https://mksaas.com/docs/config/website\#mode)

Controls the light/dark mode settings:

| Property | Type | Description |
| --- | --- | --- |
| `defaultMode` | `'light' | 'dark' | 'system'` | Sets the default display mode |
| `enableSwitch` | `boolean` | When true, allows users to toggle between light/dark modes |

Example:

src/config/website.tsx

```
metadata: {
  mode: {
    defaultMode: 'system', // Choose from: light, dark, system
    enableSwitch: true,    // Allow users to switch modes
  },
  // ...
}
```

#### [Images](https://mksaas.com/docs/config/website\#images)

Defines the images used for branding and social sharing:

| Property | Type | Description |
| --- | --- | --- |
| `ogImage` | `string` | URL to the Open Graph image used for social media previews |
| `logoLight` | `string` | URL to your logo image for light mode |
| `logoDark` | `string` | URL to your logo image for dark mode |

Example:

src/config/website.tsx

```
metadata: {
  images: {
    ogImage: '/og.png',      // Open Graph image for social sharing
    logoLight: '/logo.png',  // Logo displayed in light mode
    logoDark: '/logo-dark.png', // Logo displayed in dark mode
  },
  // ...
}
```

#### [Social Media](https://mksaas.com/docs/config/website\#social-media)

Configure links to your social media profiles:

| Property | Type | Description |
| --- | --- | --- |
| `twitter` | `string` | URL to your Twitter/X profile |
| `github` | `string` | URL to your GitHub profile or repository |
| `discord` | `string` | URL to your Discord server |
| `blueSky` | `string` | URL to your BlueSky profile |
| `youtube` | `string` | URL to your YouTube channel |
| `linkedin` | `string` | URL to your LinkedIn profile or page |
| `facebook` | `string` | URL to your Facebook page |
| `instagram` | `string` | URL to your Instagram profile |
| `tiktok` | `string` | URL to your TikTok profile |

Example:

src/config/website.tsx

```
metadata: {
  social: {
    github: 'https://github.com/YourOrganization',
    twitter: 'https://twitter.com/YourHandle',
    discord: 'https://discord.gg/your-invitation-code',
    youtube: 'https://youtube.com/@YourChannel',
    // Add other social platforms as needed
  },
  // ...
}
```

These social media links are used by the `social-config.tsx` file to generate the appropriate icon links across the website.

### [Analytics](https://mksaas.com/docs/config/website\#analytics)

Configure analytics services for your website:

| Property | Type | Description |
| --- | --- | --- |
| `enableVercelAnalytics` | `boolean` | When true, enables Vercel Web Analytics |
| `enableSpeedInsights` | `boolean` | When true, enables Vercel Speed Insights |

Example:

src/config/website.tsx

```
analytics: {
  enableVercelAnalytics: true,  // Enable Vercel Web Analytics
  enableSpeedInsights: true,    // Enable Vercel Speed Insights
}
```

Vercel Analytics and Speed Insights are privacy-friendly analytics tools that don't require cookie banners. They provide insights into your website's performance and user behavior.

To enable these services:

1. Go to your Vercel project dashboard
2. Navigate to the Analytics tab
3. Enable Web Analytics and/or Speed Insights
4. Set the corresponding configuration options to `true`

For more details, see the [Analytics documentation](https://mksaas.com/docs/analytics#vercel-analytics).

### [Auth](https://mksaas.com/docs/config/website\#auth)

Configure authentication options for your website:

| Property | Type | Description |
| --- | --- | --- |
| `enableGoogleLogin` | `boolean` | When true, enables Google as a login provider |
| `enableGithubLogin` | `boolean` | When true, enables GitHub as a login provider |

Example:

src/config/website.tsx

```
auth: {
  enableGoogleLogin: true,  // Allow Google login
  enableGithubLogin: true,  // Allow GitHub login
}
```

MkSaaS supports multiple authentication providers by default. You can selectively disable specific providers using these configuration options:

- Set `enableGoogleLogin` to `false` to remove Google as a login option
- Set `enableGithubLogin` to `false` to remove GitHub as a login option

### [Internationalization (i18n)](https://mksaas.com/docs/config/website\#internationalization-i18n)

Configure language support for your application:

| Property | Type | Description |
| --- | --- | --- |
| `defaultLocale` | `string` | Default language locale (e.g., 'en') |
| `locales` | `Record<string, { flag?: string; name: string }>` | Available languages with flag emoji and display name |

MkSaaS supports multiple languages through its i18n system. Here's how to configure it:

src/config/website.tsx

```
i18n: {
  defaultLocale: 'en',
  locales: {
    en: {
      flag: 'üá∫üá∏',
      name: 'English',
    },
    zh: {
      flag: 'üá®üá≥',
      name: '‰∏≠Êñá',
    },
    // Add more languages as needed
  },
}
```

For each supported language:

- The key is the locale code (e.g., 'en', 'es', 'fr')
- `flag` is an optional emoji to visually represent the language
- `name` is the display name of the language in its native form

When adding a new language, you'll also need to create the corresponding translation files in the `messages` directory to provide translations for all UI strings. The application will use these translations to display content in the user's selected language.

### [Blog](https://mksaas.com/docs/config/website\#blog)

Configure the blog functionality:

| Property | Type | Description |
| --- | --- | --- |
| `paginationSize` | `number` | Number of posts to display per page |
| `relatedPostsSize` | `number` | Number of related posts to show |

Example:

src/config/website.tsx

```
blog: {
  paginationSize: 6,
  relatedPostsSize: 3,
}
```

### [Mail](https://mksaas.com/docs/config/website\#mail)

Configure email services:

| Property | Type | Description |
| --- | --- | --- |
| `provider` | `'resend'` | Email service provider ( **currently only Resend is supported**) |
| `contact` | `string` | Contact email for sending and receiving emails |

Example:

```
mail: {
  provider: 'resend',
  contact: 'contact@example.com',
}
```

### [Newsletter](https://mksaas.com/docs/config/website\#newsletter)

Configure newsletter services:

| Property | Type | Description |
| --- | --- | --- |
| `provider` | `'resend'` | Newsletter service provider ( **currently only Resend is supported**) |
| `autoSubscribeAfterSignUp` | `boolean` | Whether to automatically subscribe users after sign up |

Example:

src/config/website.tsx

```
newsletter: {
  provider: 'resend',
  autoSubscribeAfterSignUp: true,
}
```

### [Storage](https://mksaas.com/docs/config/website\#storage)

Configure file storage:

| Property | Type | Description |
| --- | --- | --- |
| `provider` | `'s3'` | Storage provider ( **currently only S3 is supported**) |

Example:

src/config/website.tsx

```
storage: {
  provider: 's3',
}
```

### [Payment](https://mksaas.com/docs/config/website\#payment)

Configure payment processing services:

| Property | Type | Description |
| --- | --- | --- |
| `provider` | `'stripe'` | Payment processor ( **currently only Stripe is supported**) |

Example:

src/config/website.tsx

```
payment: {
  provider: 'stripe',
}
```

### [Price](https://mksaas.com/docs/config/website\#price)

Configure price plans:

| Property | Type | Description |
| --- | --- | --- |
| `plans` | `Record<string, PricePlan>` | Pricing plans configuration |

Each price plan in the `plans` object can have the following properties:

| Property | Type | Description |
| --- | --- | --- |
| `id` | `string` | Unique identifier for the plan |
| `name` | `string?` | Display name of the plan |
| `description` | `string?` | Description of the plan features |
| `features` | `string[]?` | List of features included in this plan |
| `limits` | `string[]?` | List of limits for this plan |
| `prices` | `Price[]` | List of price options for the plan (monthly, yearly, one-time, etc.) |
| `isFree` | `boolean` | Whether this is a free plan |
| `isLifetime` | `boolean` | Whether this is a lifetime (one-time payment) plan |
| `recommended` | `boolean?` | Whether to highlight this plan as recommended |
| `disabled` | `boolean?` | Whether to disable this plan in UI |

The `prices` array contains objects with the following structure:

| Property | Type | Description |
| --- | --- | --- |
| `type` | `'subscription' | 'one_time'` | Type of payment (subscription or one-time) |
| `priceId` | `string` | Stripe price ID (not product ID) |
| `amount` | `number` | Price amount in currency units (dollars, euros, etc.) |
| `currency` | `string` | Currency code (e.g., USD) |
| `interval` | `'month' | 'year'?` | Billing interval for recurring payments |
| `trialPeriodDays` | `number?` | Free trial period in days |
| `disabled` | `boolean?` | Whether to disable this price in UI |

MkSaaS boilerplate uses three price plans by default: Free plan, Pro subscription plan (monthly/yearly), and Lifetime plan (one-time payment), as shown in the website configuration:

src/config/website.tsx

```
payment: {
  provider: 'stripe',
  plans: {
    free: {
      id: 'free',
      prices: [],
      isFree: true,
      isLifetime: false,
    },
    pro: {
      id: 'pro',
      name: 'Pro',
      description: 'Perfect for individuals',
      features: ['Feature 1', 'Feature 2', 'Feature 3'],
      prices: [\
        {\
          type: 'subscription',\
          priceId: process.env.NEXT_PUBLIC_STRIPE_PRICE_PRO_MONTHLY,\
          amount: 990, // $9.90\
          currency: 'USD',\
          interval: 'month',\
        },\
        {\
          type: 'subscription',\
          priceId: process.env.NEXT_PUBLIC_STRIPE_PRICE_PRO_YEARLY,\
          amount: 9900, // $99.00\
          currency: 'USD',\
          interval: 'year',\
        },\
      ],
      isFree: false,
      isLifetime: false,
      recommended: true,
    },
    lifetime: {
      id: 'lifetime',
      name: 'Lifetime',
      description: 'One-time payment, lifetime access',
      features: ['All Pro features', 'No recurring bills', 'Lifetime updates'],
      prices: [\
        {\
          type: 'one_time',\
          priceId: process.env.NEXT_PUBLIC_STRIPE_PRICE_LIFETIME,\
          amount: 16900, // $169.00\
          currency: 'USD',\
        },\
      ],
      isFree: false,
      isLifetime: true,
    },
  },
}
```

**When to set plans or prices as disabled?**

- Set a **plan** to `disabled: true` when the plan is not available for new customers, but you need to keep it for existing users who have already purchased it.

- Set a **price** to `disabled: true` when that specific pricing option is not available anymore, but existing subscribers on that price should still be able to see it in the billing page.


When displaying plans to users, the [Price Configuration](https://mksaas.com/docs/config/price) enhances these plans with translated content such as name, description, and feature lists.

## [Next Steps](https://mksaas.com/docs/config/website\#next-steps)

Now that you understand the website configuration, explore these related topics:

[**Navbar Configuration** \\
\\
Configure the navigation menu in the header](https://mksaas.com/docs/config/navbar) [**Footer Configuration** \\
\\
Configure the links in the website footer](https://mksaas.com/docs/config/footer) [**Payment Integration** \\
\\
Set up payment processing with Stripe](https://mksaas.com/docs/payment) [**Price Configuration** \\
\\
Configure your subscription plans and pricing](https://mksaas.com/docs/config/price)

### Table of Contents

[Metadata](https://mksaas.com/docs/config/website#metadata) [Theme](https://mksaas.com/docs/config/website#theme) [Mode](https://mksaas.com/docs/config/website#mode) [Images](https://mksaas.com/docs/config/website#images) [Social Media](https://mksaas.com/docs/config/website#social-media) [Analytics](https://mksaas.com/docs/config/website#analytics) [Auth](https://mksaas.com/docs/config/website#auth) [Internationalization (i18n)](https://mksaas.com/docs/config/website#internationalization-i18n) [Blog](https://mksaas.com/docs/config/website#blog) [Mail](https://mksaas.com/docs/config/website#mail) [Newsletter](https://mksaas.com/docs/config/website#newsletter) [Storage](https://mksaas.com/docs/config/website#storage) [Payment](https://mksaas.com/docs/config/website#payment) [Price](https://mksaas.com/docs/config/website#price) [Next Steps](https://mksaas.com/docs/config/website#next-steps)

## Database Configuration Guide
# Database

Learn about database options and how to configure your database for the project

This guide covers the database options available for your project, how to set up and connect to your database, and how to work with Drizzle ORM.

## [Setup](https://mksaas.com/docs/database\#setup)

The project uses PostgreSQL as the database system and Drizzle ORM for database access and management. The setup is designed to be flexible, allowing you to use various PostgreSQL hosting options.

## [Hosted PostgreSQL Services](https://mksaas.com/docs/database\#hosted-postgresql-services)

Hosted PostgreSQL services are the recommended approach for both development and production environments. They provide easy setup, management, and often include free tiers sufficient for getting started.

### [Neon (Recommended)](https://mksaas.com/docs/database\#neon-recommended)

[Neon](https://neon.tech/) is a serverless PostgreSQL service with an excellent developer experience and is the default choice for this project. It's a great option for small projects and is free to get started.

**Setup Steps:**

1. Create an account at [neon.tech](https://neon.tech/)
2. Create a new project
3. Create a database
4. Get your connection string from the dashboard
5. Add the connection string to your `.env` file as `DATABASE_URL`

```
# Example Neon connection string
DATABASE_URL="postgres://user:password@ep-something.us-east-2.aws.neon.tech/database?sslmode=require"
```

You can find more information about how to setup Neon in [this guide](https://orm.drizzle.team/docs/tutorials/drizzle-with-neon).

![Neon](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fdatabase%2Fneon.png&w=3840&q=75)

### [Supabase](https://mksaas.com/docs/database\#supabase)

[Supabase](https://supabase.com/) provides PostgreSQL databases with additional features like authentication and storage. It's a great option for medium to large projects and is free to get started.

**Setup Steps:**

1. Create an account at [supabase.com](https://supabase.com/)
2. Create a new project
3. Click on the "Connect" button
4. Get your connection string
5. Add the connection string to your `.env` file as `DATABASE_URL`

```
# Example Supabase connection string
DATABASE_URL="postgres://postgres:your-password@db.something.supabase.co:6543/postgres"
```

You can find more information about how to setup Supabase in [this guide](https://orm.drizzle.team/docs/tutorials/drizzle-with-supabase), or check out the Connect Guide on Supabase.

![Supabase](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fdatabase%2Fsupabase.png&w=3840&q=75)

### [Other Options](https://mksaas.com/docs/database\#other-options)

You can find more information about other database options in the [Drizzle ORM documentation](https://orm.drizzle.team/docs/connect-vercel-postgres).

- [Vercel Postgres](https://orm.drizzle.team/docs/connect-vercel-postgres)
- [Prisma Postgres](https://www.prisma.io/postgres)
- [AWS RDS](https://aws.amazon.com/rds/) (PostgreSQL)
- [Google Cloud SQL](https://cloud.google.com/sql) (PostgreSQL)
- [Azure Database for PostgreSQL](https://azure.microsoft.com/en-us/services/postgresql/)

## [Self-Hosted Options](https://mksaas.com/docs/database\#self-hosted-options)

### [Docker](https://mksaas.com/docs/database\#docker)

You can run PostgreSQL in a Docker container for local development:

```
docker run --name my-postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres
```

Then use this connection string:

```
DATABASE_URL="postgres://postgres:postgres@localhost:5432/postgres"
```

You can find more information about how to setup PostgreSQL locally in [this guide](https://orm.drizzle.team/docs/guides/postgresql-local-setup).

### [Local Installation](https://mksaas.com/docs/database\#local-installation)

Install PostgreSQL directly on your machine:

1. Download from [postgres.org](https://www.postgresql.org/download/) or using package managers
2. Install and set up a password
3. Create a database

Then use this connection string:

```
DATABASE_URL="postgres://postgres:yourpassword@localhost:5432/mydatabase"
```

If you are setting up the environment, now you can **go back to the Environment Setup guide** and continue. The rest of this guide can be read later.

[**Environment Setup** \\
\\
Set up environment variables](https://mksaas.com/docs/env#database)

* * *

## [Using Drizzle ORM](https://mksaas.com/docs/database\#using-drizzle-orm)

This project uses [Drizzle ORM](https://orm.drizzle.team/), a TypeScript ORM with a focus on type safety and developer experience. Drizzle is compatible with various database systems and providers.

### [Current Configuration](https://mksaas.com/docs/database\#current-configuration)

Currently, the project is configured to use Neon's HTTP driver for better compatibility with Next.js and serverless environments:

src/db/index.ts

```
import { drizzle } from 'drizzle-orm/neon-http';

// Using the browser-compatible Neon HTTP driver
const db = drizzle(process.env.DATABASE_URL!);

export default db;
```

### [Database Schema](https://mksaas.com/docs/database\#database-schema)

The database schema is defined in `src/db/schema.ts` using Drizzle's schema definition syntax:

src/db/schema.ts

```
import { pgTable, text, timestamp } from "drizzle-orm/pg-core";

export const user = pgTable("user", {
  id: text("id").primaryKey(),
  name: text('name').notNull(),
  email: text('email').notNull().unique(),
  // ... other fields
});

// ... other tables
```

You can see the schema in the image below:

![Structure](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fdatabase%2Fstructure.png&w=3840&q=75)

### [Using Other Database Providers](https://mksaas.com/docs/database\#using-other-database-providers)

Drizzle ORM supports multiple database providers. If you want to use a different provider:

1. Install the appropriate Drizzle adapter package
2. Update `src/db/index.ts` to use the correct driver
3. Adjust the schema in `src/db/schema.ts` if necessary

#### [Example: Using MySQL](https://mksaas.com/docs/database\#example-using-mysql)

src/db/index.ts

```
// 1. Install: npm install drizzle-orm mysql2
// 2. Update src/db/index.ts
import { drizzle } from 'drizzle-orm/mysql2';
import mysql from 'mysql2/promise';

const connection = await mysql.createConnection(process.env.DATABASE_URL!);
const db = drizzle(connection);

export default db;
```

#### [Example: Using SQLite](https://mksaas.com/docs/database\#example-using-sqlite)

src/db/index.ts

```
// 1. Install: npm install drizzle-orm better-sqlite3
// 2. Update src/db/index.ts
import { drizzle } from 'drizzle-orm/better-sqlite3';
import Database from 'better-sqlite3';

const sqlite = new Database('sqlite.db');
const db = drizzle(sqlite);

export default db;
```

For more information about Drizzle ORM and its adapters, refer to the [Drizzle ORM documentation](https://orm.drizzle.team/docs/overview).

If you are using a different database provider, you will need to update the `src/lib/auth.ts` file to use the correct driver and schema, and you can find more information about how to do it in the [Better Auth documentation](https://www.better-auth.com/docs/installation#configure-database).

## [Troubleshooting](https://mksaas.com/docs/database\#troubleshooting)

### [Connection Issues](https://mksaas.com/docs/database\#connection-issues)

If you're having trouble connecting to your database:

1. Check that your `DATABASE_URL` is correctly formatted
2. Ensure your IP is allowed in the database's firewall settings
3. Verify that the database user has the correct permissions
4. Check for any network restrictions

### [Schema Migration Issues](https://mksaas.com/docs/database\#schema-migration-issues)

If you're experiencing issues with database migrations:

1. Check your schema definitions for errors
2. Ensure your migration scripts are correctly formatted
3. Try running migrations manually to see detailed errors

For more detailed help, refer to the [Drizzle ORM documentation](https://orm.drizzle.team/docs/overview).

## [References](https://mksaas.com/docs/database\#references)

- [Drizzle ORM](https://orm.drizzle.team/docs/overview)
- [Neon](https://neon.tech/docs)
- [Supabase](https://supabase.com/docs)
- [Supabase \| Connecting with Drizzle](https://supabase.com/docs/guides/database/drizzle)
- [Database connection with Drizzle](https://orm.drizzle.team/docs/connect-overview)
- [Drizzle with Neon Postgres](https://orm.drizzle.team/docs/tutorials/drizzle-with-neon)
- [Drizzle with Supabase Postgres](https://orm.drizzle.team/docs/tutorials/drizzle-with-supabase)
- [Drizzle with Vercel Edge Functions](https://orm.drizzle.team/docs/tutorials/drizzle-with-vercel-edge-functions)
- [Drizzle \| How to setup PostgreSQL locally](https://orm.drizzle.team/docs/guides/postgresql-local-setup)

## [Next Steps](https://mksaas.com/docs/database\#next-steps)

Now that you understand how to set up a database in MkSaaS, you might want to explore these related features:

[**Authentication** \\
\\
Set up authentication with email verification](https://mksaas.com/docs/auth) [**Email Setup** \\
\\
Configure email services for your application](https://mksaas.com/docs/email) [**Newsletter** \\
\\
Configure newsletter subscriptions with email](https://mksaas.com/docs/newsletter) [**Environment Setup** \\
\\
Set up environment variables for email services](https://mksaas.com/docs/env)

### Table of Contents

[Setup](https://mksaas.com/docs/database#setup) [Hosted PostgreSQL Services](https://mksaas.com/docs/database#hosted-postgresql-services) [Neon (Recommended)](https://mksaas.com/docs/database#neon-recommended) [Supabase](https://mksaas.com/docs/database#supabase) [Other Options](https://mksaas.com/docs/database#other-options) [Self-Hosted Options](https://mksaas.com/docs/database#self-hosted-options) [Docker](https://mksaas.com/docs/database#docker) [Local Installation](https://mksaas.com/docs/database#local-installation) [Using Drizzle ORM](https://mksaas.com/docs/database#using-drizzle-orm) [Current Configuration](https://mksaas.com/docs/database#current-configuration) [Database Schema](https://mksaas.com/docs/database#database-schema) [Using Other Database Providers](https://mksaas.com/docs/database#using-other-database-providers) [Example: Using MySQL](https://mksaas.com/docs/database#example-using-mysql) [Example: Using SQLite](https://mksaas.com/docs/database#example-using-sqlite) [Troubleshooting](https://mksaas.com/docs/database#troubleshooting) [Connection Issues](https://mksaas.com/docs/database#connection-issues) [Schema Migration Issues](https://mksaas.com/docs/database#schema-migration-issues) [References](https://mksaas.com/docs/database#references) [Next Steps](https://mksaas.com/docs/database#next-steps)

![Neon](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fdatabase%2Fneon.png&w=3840&q=75)

![Supabase](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fdatabase%2Fsupabase.png&w=3840&q=75)

![Structure](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fdatabase%2Fstructure.png&w=3840&q=75)

## Cloudflare Deployment Guide
# Deploying on Cloudflare

Learn how to deploy your project to the Cloudflare platform

This guide will help you deploy your project to the Cloudflare platform.

üöß Under construction üöß

## [Next Steps](https://mksaas.com/docs/deployment/cloudflare\#next-steps)

While this guide is under construction, explore these related topics:

[**Vercel Deployment** \\
\\
Deploy your application to Vercel](https://mksaas.com/docs/deployment/vercel) [**Storage Setup** \\
\\
Configure file storage for your application](https://mksaas.com/docs/storage) [**Updating the Codebase** \\
\\
Keep your application up to date](https://mksaas.com/docs/updates) [**Database Setup** \\
\\
Set up and configure your database](https://mksaas.com/docs/database)

### Table of Contents

[Next Steps](https://mksaas.com/docs/deployment/cloudflare#next-steps)

## Deploying on Vercel
# Deploying on Vercel

Learn how to deploy your project to the Vercel platform

This guide will help you deploy your project to the Vercel platform. Since the project is built with Next.js, Vercel, as the creator of Next.js, provides the best developer experience and performance optimization.

## [Prerequisites](https://mksaas.com/docs/deployment/vercel\#prerequisites)

Before deploying your project, make sure you have:

1. A Git repository containing your project code (like [GitHub](https://github.com/), [GitLab](https://gitlab.com/), or [Bitbucket](https://bitbucket.org/))
2. A [Vercel](https://vercel.com/) account, sign up [here](https://vercel.com/signup) if you don't have one
3. [Environment variables](https://mksaas.com/docs/env) configured for the production environment

## [Deployment Steps](https://mksaas.com/docs/deployment/vercel\#deployment-steps)

Push Code to Git Repository

Ensure your code is pushed to a code repository on GitHub, GitLab, or Bitbucket.

Connect to Vercel

- Log in to the [Vercel Console](https://vercel.com/dashboard)
- Click the "Add New Project" or "New Project" button
- Import your Git repository

Configure New Project

On the configuration page, you need to set the following options:

- **Framework Preset**: Select Next.js
- **Build Command**: Use the default `npm run build` (or `yarn build` if using Yarn)
- **Output Directory**: Use the default `.next`
- **Install Command**: Use the default `npm install` (or `yarn install` if using Yarn)

If you're unsure about a setting, you can keep the default value. Vercel typically detects the correct configuration automatically.

Configure Environment Variables

On the configuration page, find the "Environment Variables" section

- Add all necessary environment variables, for example:








```
DATABASE_URL="your_database_URL"
BETTER_AUTH_SECRET="your_better_auth_secret_key"
RESEND_API_KEY="your_resend_api_key"
```

- Make sure to add all necessary environment variables for running the project

- Make sure the environment variables are set for the production environment


Deploy the Project

Click the "Deploy" button to start the deployment process. Vercel will automatically build and deploy your project.

## [Update Environment Variables](https://mksaas.com/docs/deployment/vercel\#update-environment-variables)

If you want to add or update environment variables after deploying the project, you can do it in the Project Settings > Environment Variables, and then redeploy the project.

![Vercel Environment Variables](https://mksaas.com/images/docs/vercel-env-variables.png)

## [Automatic Deployments](https://mksaas.com/docs/deployment/vercel\#automatic-deployments)

Vercel provides automatic deployment functionality when you:

- Push code to the main branch
- Create a new Pull Request
- Push to a branch with preview deployments enabled

Each Pull Request gets a unique **preview URL**, allowing you to test changes before merging to production.

## [Custom Domain](https://mksaas.com/docs/deployment/vercel\#custom-domain)

If you want to add a custom domain to your project:

1. Go to your project settings in the Vercel console
2. Navigate to the "Domains" section
3. Add your custom domain
4. Follow the DNS configuration instructions

## [Troubleshooting Common Issues](https://mksaas.com/docs/deployment/vercel\#troubleshooting-common-issues)

### [Build Failures](https://mksaas.com/docs/deployment/vercel\#build-failures)

If the build process fails:

- Check the build logs for detailed error information
- Ensure all dependencies are correctly installed
- Verify that environment variables are properly configured

### [Application Functions Incorrectly](https://mksaas.com/docs/deployment/vercel\#application-functions-incorrectly)

- Confirm all environment variables are set correctly
- Check if the database connection is working properly
- Verify that API keys for third-party services are valid
- Check the logs for any errors or messages that can help you diagnose the issue

## [Next Steps](https://mksaas.com/docs/deployment/vercel\#next-steps)

Now that you understand how to deploy your MkSaaS website to Vercel, explore these related topics:

[**Cloudflare Deployment** \\
\\
Deploy your application to Cloudflare](https://mksaas.com/docs/deployment/cloudflare) [**Database Setup** \\
\\
Set up and configure your database](https://mksaas.com/docs/database) [**Environment Variables** \\
\\
Configure environment variables for production](https://mksaas.com/docs/env) [**Updating the Codebase** \\
\\
Keep your application up to date](https://mksaas.com/docs/updates)

### Table of Contents

[Prerequisites](https://mksaas.com/docs/deployment/vercel#prerequisites) [Deployment Steps](https://mksaas.com/docs/deployment/vercel#deployment-steps) [Update Environment Variables](https://mksaas.com/docs/deployment/vercel#update-environment-variables) [Automatic Deployments](https://mksaas.com/docs/deployment/vercel#automatic-deployments) [Custom Domain](https://mksaas.com/docs/deployment/vercel#custom-domain) [Troubleshooting Common Issues](https://mksaas.com/docs/deployment/vercel#troubleshooting-common-issues) [Build Failures](https://mksaas.com/docs/deployment/vercel#build-failures) [Application Functions Incorrectly](https://mksaas.com/docs/deployment/vercel#application-functions-incorrectly) [Next Steps](https://mksaas.com/docs/deployment/vercel#next-steps)

## Documentation Guide
# Documentation

Learn how to create, manage, and customize your documentation

MkSaaS includes a powerful documentation system built with Fumadocs and MDX. The documentation system supports multi-language content, custom components, and rich content formatting, making it ideal for product documentation, tutorials, and knowledge base articles.

## [Documentation System Structure](https://mksaas.com/docs/docs\#documentation-system-structure)

The documentation system is built using [Fumadocs](https://fumadocs.vercel.app/), a framework for building documentation sites, and integrates with internationalization.

content

docs

src

app/\[locale\]/docs

\[\[...slug\]\]

layout.tsx

loading.tsx

components/docs

index.tsx

lazy.ts

wrapper.tsx

dynamic-codeblock.tsx

lib/docs

source.ts

i18n.ts

## [Configuration](https://mksaas.com/docs/docs\#configuration)

The documentation system can be configured in multiple places:

1. The main layout configuration is in `src/app/[locale]/docs/layout.tsx`
2. The content source configuration is in `src/lib/docs/source.ts`
3. The i18n configuration is in `src/lib/docs/i18n.ts`

## [Creating Documentation Content](https://mksaas.com/docs/docs\#creating-documentation-content)

### [Adding a New Documentation Page](https://mksaas.com/docs/docs\#adding-a-new-documentation-page)

1. Create a new MDX file in the `content/docs` directory:

content/docs/getting-started.mdx

```
---
title: Getting Started
description: Quick start guide for setting up your MkSaaS project
icon: Rocket
---

# Getting Started

This is a guide to help you get started with MkSaaS.

## Installation

First, you need to install the dependencies...
```

2. The `icon` property in the frontmatter supports all [Lucide](https://lucide.dev/) icons and will be displayed next to the document title.

### [Organizing Documentation](https://mksaas.com/docs/docs\#organizing-documentation)

Fumadocs allows you to organize your documentation using a hierarchical structure:

```
content/
  docs/
    getting-started.mdx
    features/
      auth.mdx
      database.mdx
    deployment/
      hosting.mdx
      ci-cd.mdx
```

You can customize the sidebar order and grouping by using meta files:

content/docs/meta.json

```
{
  "title": "Documentation",
  "pages": [\
    "getting-started",\
    {\
      "title": "Features",\
      "pages": ["features/auth", "features/database"]\
    },\
    {\
      "title": "Deployment",\
      "pages": ["deployment/hosting", "deployment/ci-cd"]\
    }\
  ]
}
```

## [Multi-language Support](https://mksaas.com/docs/docs\#multi-language-support)

MkSaaS documentation system fully supports internationalization. You can create content in multiple languages using the following file naming convention:

1. **Default locale (e.g., English)**: `filename.mdx`
2. **Other locales (e.g., Chinese)**: `filename.zh.mdx`

### [Multi-language Documentation Example](https://mksaas.com/docs/docs\#multi-language-documentation-example)

For an English documentation page:

content/docs/getting-started.mdx

```
---
title: Getting Started
description: Quick start guide for setting up your MkSaaS project
icon: Rocket
---

Content in English...
```

For the same page in Chinese:

content/docs/getting-started.zh.mdx

```
---
title: ÂÖ•Èó®ÊåáÂçó
description: MkSaaSÈ°πÁõÆÁöÑÂø´ÈÄüËÆæÁΩÆÊåáÂçó
icon: Rocket
---

Content in Chinese...
```

The system will automatically match the documentation with the appropriate language based on the user's locale.

## [Documentation Components](https://mksaas.com/docs/docs\#documentation-components)

MkSaaS includes a variety of documentation components powered by Fumadocs:

### Headings

### Callouts

### Tabs

### Steps

### File Tree

## [Customizing the Documentation](https://mksaas.com/docs/docs\#customizing-the-documentation)

### [Modifying the Layout](https://mksaas.com/docs/docs\#modifying-the-layout)

You can customize the documentation layout by editing `src/app/[locale]/docs/layout.tsx`. This file controls the navigation, sidebar, and overall structure of the documentation pages.

### [Creating Custom Components](https://mksaas.com/docs/docs\#creating-custom-components)

To create custom components for your documentation:

1. Add your component to the `src/components/shared/custom-mdx-content.tsx` file
2. Map it to the appropriate MDX element in the components object

Example of customizing the `img` tag to use a enhanced `ImageZoom` component:

src/components/shared/custom-mdx-content.tsx

```
// ... existing components and imports ...

// Add to the baseComponents object in CustomMDXContent:
{
  // ... other components ...

  // Custom img component that uses ImageZoom
  img: (props: ComponentProps<'img'>) => {
    if (!props.src) {
      return null;
    }

    return (
      <ImageZoom
        src={props.src}
        alt={props.alt || 'image'}
        width={1400}
        height={787}
        style={{
          width: '100%',
          height: 'auto',
          objectFit: 'contain',
        }}
        priority
      />
    );
  },
}
```

This customization enhances all images in your MDX content with zoom functionality, responsive sizing, and improved loading performance. You can use standard Markdown syntax in your MDX files and the custom component will automatically be applied:

content/docs/my-page.mdx

```
---
title: My Page with Enhanced Images
description: A page with custom image component
icon: Image
---

# Enhanced Images Example

![Example image description](/images/example.jpg)

The image above will automatically use the ImageZoom component with all the configured enhancements.
```

## [Advanced Configuration](https://mksaas.com/docs/docs\#advanced-configuration)

For more advanced customization of the documentation system, you can refer to the Fumadocs documentation:

[**Fumadocs UI** \\
\\
Learn about docs layout customization](https://fumadocs.vercel.app/docs/ui) [**Fumadocs Components** \\
\\
Additional components to improve your docs](https://fumadocs.vercel.app/docs/components) [**Internationalization** \\
\\
Advanced i18n features for your documentation](https://fumadocs.vercel.app/docs/ui/internationalization) [**Markdown** \\
\\
Learn about Markdown features and syntax](https://fumadocs.vercel.app/docs/ui/markdown)

## [Best Practices](https://mksaas.com/docs/docs\#best-practices)

1. **Consistent Structure**: Maintain a consistent structure across documentation pages
2. **Clear Headings**: Use descriptive headings that follow a logical hierarchy
3. **Code Examples**: Include practical code examples where appropriate
4. **Visuals**: Use diagrams, screenshots, or interactive components to explain complex concepts
5. **Progressive Disclosure**: Start with basic concepts and gradually introduce more complex topics
6. **Cross-Linking**: Link related documentation pages to help users navigate your content
7. **Versioning**: Consider documentation versioning for different software releases
8. **Accessibility**: Ensure your documentation is accessible to all users
9. **Search Optimization**: Use clear titles and descriptions to make content discoverable

## [Next Steps](https://mksaas.com/docs/docs\#next-steps)

Now that you understand how to work with the documentation system in MkSaaS, you might want to explore these related features:

[**Blog** \\
\\
Learn how to create blog content](https://mksaas.com/docs/blog) [**i18n** \\
\\
Explore advanced i18n features](https://mksaas.com/docs/i18n) [**Configuration** \\
\\
Configure your website settings](https://mksaas.com/docs/config) [**Theming** \\
\\
Customize the look and feel of website](https://mksaas.com/docs/theming)

### Table of Contents

[Documentation System Structure](https://mksaas.com/docs/docs#documentation-system-structure) [Configuration](https://mksaas.com/docs/docs#configuration) [Creating Documentation Content](https://mksaas.com/docs/docs#creating-documentation-content) [Adding a New Documentation Page](https://mksaas.com/docs/docs#adding-a-new-documentation-page) [Organizing Documentation](https://mksaas.com/docs/docs#organizing-documentation) [Multi-language Support](https://mksaas.com/docs/docs#multi-language-support) [Multi-language Documentation Example](https://mksaas.com/docs/docs#multi-language-documentation-example) [Documentation Components](https://mksaas.com/docs/docs#documentation-components) [Customizing the Documentation](https://mksaas.com/docs/docs#customizing-the-documentation) [Modifying the Layout](https://mksaas.com/docs/docs#modifying-the-layout) [Creating Custom Components](https://mksaas.com/docs/docs#creating-custom-components) [Advanced Configuration](https://mksaas.com/docs/docs#advanced-configuration) [Best Practices](https://mksaas.com/docs/docs#best-practices) [Next Steps](https://mksaas.com/docs/docs#next-steps)

## Email Setup Guide
# Email

Learn how to set up and use email functionality with Resend and React Email templates

MkSaaS uses [Resend](https://resend.com/) for email delivery and [React Email](https://react.email/) for creating beautiful, responsive email templates. This combination provides a modern, developer-friendly way to handle email communications in your application.

## [Setup](https://mksaas.com/docs/email\#setup)

1. Create a Resend account at [resend.com](https://resend.com/)
2. Get your API key with the permissions to send emails from the dashboard
3. Add the following environment variables:

.env

```
RESEND_API_KEY=re_...
```

4. Update the `website.tsx` file to use Resend as the email provider, and set the default sender and recipient email addresse:

src/config/website.tsx

```
export const websiteConfig = {
  // ...other config
  mail: {
    provider: 'resend', // Email provider to use
    contact: 'contact@example.com', // Default sender and recipient email address
  },
  // ...other config
}
```

If you are setting up the environment, now you can **go back to the Environment Setup guide** and continue. The rest of this guide can be read later.

[**Environment Setup** \\
\\
Set up environment variables](https://mksaas.com/docs/env#email)

* * *

## [Email System Structure](https://mksaas.com/docs/email\#email-system-structure)

The email system in MkSaaS is designed with the following components:

src

mail

components

provider

templates

index.ts

types.ts

README.md

This modular structure makes it easy to extend the email system with new providers, templates, and components.

## [Core Features](https://mksaas.com/docs/email\#core-features)

- Transactional email sending with Resend integration
- Beautiful, responsive email templates built with React Email
- Pre-built templates for verification, password reset, and contact forms
- Internationalization support with multi-language emails
- Reusable email components (layout, buttons, etc.)
- Modular architecture for easy provider switching
- Developer tools for email preview and testing

## [Usage](https://mksaas.com/docs/email\#usage)

MkSaaS provides a simple email sending utility that supports both template-based emails and raw content:

```
import { sendEmail } from '@/mail';

// Send using a template
await sendEmail({
  to: 'user@example.com',
  template: 'verifyEmail',
  context: {
    name: 'John Doe',
    url: 'https://example.com/verify?token=abc123',
  },
  locale: 'en', // Optional, defaults to config default locale
});

// Send a raw email
await sendEmail({
  to: 'user@example.com',
  subject: 'Welcome to our platform',
  html: '<h1>Hello!</h1><p>Welcome to our platform.</p>',
  text: 'Hello! Welcome to our platform.', // Optional
});
```

## [Email Templates](https://mksaas.com/docs/email\#email-templates)

MkSaaS includes several pre-built email templates for different use cases:

### verify-email.tsx

### forgot-password.tsx

### subscribe-newsletter.tsx

### contact-message.tsx

## [Email Components](https://mksaas.com/docs/email\#email-components)

MkSaaS includes reusable email components in the `src/mail/components` directory to help build consistent email templates:

### email-layout.tsx

### email-button.tsx

## [Preview Emails](https://mksaas.com/docs/email\#preview-emails)

MkSaaS provides a preview email feature that allows you to preview emails before sending them:

```
pnpm run email
```

This will start a local server that will allow you to preview the emails in your browser.

![preview email](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Femail-preview.png&w=3840&q=75)

## [Customization](https://mksaas.com/docs/email\#customization)

### [Creating Custom Templates](https://mksaas.com/docs/email\#creating-custom-templates)

1. Create a React component in the `src/mail/templates` directory:

src/mail/templates/my-custom-email.tsx

```
import { BaseEmailProps } from '@/mail/types';
import { EmailLayout } from '../components/email-layout';
import { EmailButton } from '../components/email-button';

interface MyCustomEmailProps extends BaseEmailProps {
  username: string;
  actionUrl: string;
}

export function MyCustomEmail({
  username,
  actionUrl,
  messages,
  locale
}: MyCustomEmailProps) {
  return (
    <EmailLayout>
      <p>Hello {username}!</p>
      <p>Thanks for joining our platform. Click the button below to get started.</p>
      <EmailButton href={actionUrl}>Get Started</EmailButton>
    </EmailLayout>
  );
}
```

2. Update the `EmailTemplates` interface in `types.ts` to include your new template:

src/mail/types.ts

```
export interface EmailTemplates {
  // ... existing templates
  myCustomEmail: React.ComponentType<MyCustomEmailProps>;
}
```

3. Add corresponding subject translations in your i18n messages if needed

4. Preview your template locally:


pnpmnpmyarnbun

```
pnpm run email
```

5. Use the template in your code:

```
await sendEmail({
  to: 'user@example.com',
  template: 'myCustomEmail',
  context: {
    username: 'John',
    actionUrl: 'https://example.com/start',
  },
});
```

### [Creating a New Email Provider](https://mksaas.com/docs/email\#creating-a-new-email-provider)

MkSaaS makes it easy to extend the email system with new providers:

1. Create a new file in the `src/mail/provider` directory
2. Implement the `MailProvider` interface from `types.ts`
3. Update the provider selection logic in `index.ts`

Example implementation for a new provider:

src/mail/provider/my-provider.ts

```
import { MailProvider, SendEmailResult, SendRawEmailParams, SendTemplateParams } from '@/mail/types';

export class MyProvider implements MailProvider {
  constructor() {
    // Initialize your provider
  }

  public async sendTemplate(params: SendTemplateParams): Promise<SendEmailResult> {
    // Implementation for sending template emails
  }

  public async sendRawEmail(params: SendRawEmailParams): Promise<SendEmailResult> {
    // Implementation for sending raw emails
  }

  public getProviderName(): string {
    return 'my-provider';
  }
}
```

Then update the provider selection in `index.ts`:

src/mail/index.ts

```
import { MyProvider } from './provider/my-provider';

export const initializeMailProvider = (): MailProvider => {
  if (!mailProvider) {
    if (websiteConfig.mail.provider === 'resend') {
      mailProvider = new ResendMailProvider();
    } else if (websiteConfig.mail.provider === 'custom') {
      mailProvider = new CustomMailProvider();
    } else {
      throw new Error(
        `Unsupported mail provider: ${websiteConfig.mail.provider}`
      );
    }
  }

  return mailProvider;
};
```

## [Best Practices](https://mksaas.com/docs/email\#best-practices)

1. **Validate Email Addresses**: Always validate email addresses before sending emails
2. **Handle Errors Gracefully**: Provide user-friendly error messages when email delivery fails

## [Next Steps](https://mksaas.com/docs/email\#next-steps)

Now that you understand how to work with emails in MkSaaS, you might want to explore these related features:

[**Database Setup** \\
\\
Configure the database for storing email-related data](https://mksaas.com/docs/database) [**Authentication** \\
\\
Set up authentication with email verification](https://mksaas.com/docs/auth) [**Newsletter** \\
\\
Configure newsletter subscriptions with email](https://mksaas.com/docs/newsletter) [**Environment Setup** \\
\\
Set up environment variables for email services](https://mksaas.com/docs/env)

### Table of Contents

[Setup](https://mksaas.com/docs/email#setup) [Email System Structure](https://mksaas.com/docs/email#email-system-structure) [Core Features](https://mksaas.com/docs/email#core-features) [Usage](https://mksaas.com/docs/email#usage) [Email Templates](https://mksaas.com/docs/email#email-templates) [Email Components](https://mksaas.com/docs/email#email-components) [Preview Emails](https://mksaas.com/docs/email#preview-emails) [Customization](https://mksaas.com/docs/email#customization) [Creating Custom Templates](https://mksaas.com/docs/email#creating-custom-templates) [Creating a New Email Provider](https://mksaas.com/docs/email#creating-a-new-email-provider) [Best Practices](https://mksaas.com/docs/email#best-practices) [Next Steps](https://mksaas.com/docs/email#next-steps)

![preview email](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Femail-preview.png&w=3840&q=75)

## Environment Variable Setup
# Environment Setup

Configure environment variables for your MkSaaS application

MkSaaS requires several environment variables to function properly, and this guide explains how to set them up.

Create a `.env` file in the root directory of your project, and **never commit it to version control**.

You can copy the example file as a starting point:

```
cp .env.example .env
```

## [Environment Variables](https://mksaas.com/docs/env\#environment-variables)

### [Core Configuration](https://mksaas.com/docs/env\#core-configuration)

| Variable | Description |
| --- | --- |
| NEXT\_PUBLIC\_BASE\_URL | The public URL of your site, e.g. <br>`http://localhost:3000` for development, <br>`https://yourdomain.com` for production |
| PORT | The port number to run the server on in development mode, e.g. `3005`, default is `3000`. No need to set in production mode. |

### [Database](https://mksaas.com/docs/env\#database)

Learn how to set up a database in the [Database Setup](https://mksaas.com/docs/database#setup) guide.

| Variable | Description |
| --- | --- |
| DATABASE\_URL | Database connection URL |

### [Authentication](https://mksaas.com/docs/env\#authentication)

Learn how to set up authentication in the [Authentication Setup](https://mksaas.com/docs/auth#setup) guide.

| Variable | Description |
| --- | --- |
| BETTER\_AUTH\_SECRET | A random string used to hash tokens and sign cookies |
| GOOGLE\_CLIENT\_ID | Google OAuth client ID (optional) |
| GOOGLE\_CLIENT\_SECRET | Google OAuth client secret (optional) |
| GITHUB\_CLIENT\_ID | GitHub OAuth client ID (optional) |
| GITHUB\_CLIENT\_SECRET | GitHub OAuth client secret (optional) |

### [Email](https://mksaas.com/docs/env\#email)

Learn how to set up email in the [Email Setup](https://mksaas.com/docs/email#setup) guide.

| Variable | Description |
| --- | --- |
| RESEND\_API\_KEY | API key for Resend email service |

### [Newsletter](https://mksaas.com/docs/env\#newsletter)

Learn how to set up newsletter in the [Newsletter Setup](https://mksaas.com/docs/newsletter#setup) guide.

| Variable | Description |
| --- | --- |
| RESEND\_API\_KEY | API key for Resend email service |
| RESEND\_AUDIENCE\_ID | Audience ID for Resend broadcast service |

### [Storage](https://mksaas.com/docs/env\#storage)

Learn how to set up storage in the [Storage Setup](https://mksaas.com/docs/storage#setup) guide.

| Variable | Description |
| --- | --- |
| STORAGE\_REGION | Region for the storage bucket |
| STORAGE\_BUCKET\_NAME | Name of the storage bucket |
| STORAGE\_ACCESS\_KEY\_ID | Access key ID for the storage bucket |
| STORAGE\_SECRET\_ACCESS\_KEY | Secret access key for the storage bucket |
| STORAGE\_ENDPOINT | Endpoint for the storage bucket |
| STORAGE\_FORCE\_PATH\_STYLE | Force path style for the storage bucket |
| STORAGE\_PUBLIC\_URL | Public URL for the storage bucket |

### [Payment](https://mksaas.com/docs/env\#payment)

Learn how to set up payments in the [Payment Setup](https://mksaas.com/docs/payment#setup) guide.

| Variable | Description |
| --- | --- |
| STRIPE\_SECRET\_KEY | Stripe secret key |
| STRIPE\_WEBHOOK\_SECRET | Stripe webhook signing secret |
| NEXT\_PUBLIC\_STRIPE\_PRICE\_PRO\_MONTHLY | Stripe price ID for your pro monthly subscription |
| NEXT\_PUBLIC\_STRIPE\_PRICE\_PRO\_YEARLY | Stripe price ID for your pro yearly subscription |
| NEXT\_PUBLIC\_STRIPE\_PRICE\_LIFETIME | Stripe price ID for your lifetime subscription |

### [Analytics](https://mksaas.com/docs/env\#analytics)

Learn how to set up analytics in the [Analytics Setup](https://mksaas.com/docs/analytics#setup) guide.

| Variable | Description |
| --- | --- |
| GOOGLE\_ANALYTICS\_ID | [Google Analytics](https://analytics.google.com/) ID for analytics features |
| UMAMI\_WEBSITE\_ID | [Umami](https://umami.is/) Analytics website ID for analytics features |
| UMAMI\_SCRIPT | [Umami](https://umami.is/) Analytics script URL for analytics features |
| OPENPANEL\_CLIENT\_ID | [OpenPanel](https://openpanel.dev/) Analytics client ID for analytics features |
| PLAUSIBLE\_DOMAIN | [Plausible](https://plausible.io/) Analytics domain for analytics features |
| PLAUSIBLE\_SCRIPT | [Plausible](https://plausible.io/) Analytics script URL for analytics features |
| Seline\_TOKEN | [Seline](https://seline.io/) Analytics token for analytics features |
| DATAFAST\_ANALYTICS\_ID | [DataFast](https://datafa.st/) Analytics ID for analytics features |
| DATAFAST\_ANALYTICS\_DOMAIN | [DataFast](https://datafa.st/) Analytics domain for analytics features |

### [AI Features](https://mksaas.com/docs/env\#ai-features)

Learn how to set up AI features in the [AI Setup](https://mksaas.com/docs/ai#setup) guide.

| Variable | Description |
| --- | --- |
| OPENAI\_API\_KEY | OpenAI API key for AI features |
| GOOGLE\_API\_KEY | Google API key for AI features |
| DEEPSEEK\_API\_KEY | DeepSeek API key for AI features |

## [Verifying Environment Variables](https://mksaas.com/docs/env\#verifying-environment-variables)

To verify that your environment variables are correctly set up, run:

pnpmnpmyarnbun

```
pnpm run dev
```

If everything is configured correctly, your application should start and run normally without any environment-related errors.

## [Next Steps](https://mksaas.com/docs/env\#next-steps)

Now that your environment is set up, explore these related topics:

[**Configuration** \\
\\
Learn how to configure your MkSaaS website](https://mksaas.com/docs/config) [**Getting Started** \\
\\
Learn how to jumpstart your cpm calculator website](https://mksaas.com/docs/start) [**Database Setup** \\
\\
Learn how to set up a database for the website](https://mksaas.com/docs/database) [**IDE Setup** \\
\\
Learn how to set up your VSCode/Cursor IDE](https://mksaas.com/docs/ide)

### Table of Contents

[Environment Variables](https://mksaas.com/docs/env#environment-variables) [Core Configuration](https://mksaas.com/docs/env#core-configuration) [Database](https://mksaas.com/docs/env#database) [Authentication](https://mksaas.com/docs/env#authentication) [Email](https://mksaas.com/docs/env#email) [Newsletter](https://mksaas.com/docs/env#newsletter) [Storage](https://mksaas.com/docs/env#storage) [Payment](https://mksaas.com/docs/env#payment) [Analytics](https://mksaas.com/docs/env#analytics) [AI Features](https://mksaas.com/docs/env#ai-features) [Verifying Environment Variables](https://mksaas.com/docs/env#verifying-environment-variables) [Next Steps](https://mksaas.com/docs/env#next-steps)

## MkSaaS Font Customization
# Fonts

Learn how to customize the fonts in your MkSaaS website

This guide covers the font system in your MkSaaS website, how to use the built-in fonts, and how to add and customize your own fonts.

## [Core Features](https://mksaas.com/docs/fonts\#core-features)

The MkSaaS template comes with a carefully selected set of fonts that provide excellent readability and visual appeal. The font system includes:

- Multiple font families for different purposes (sans-serif, serif, monospace)
- Google Fonts integration for easy access to thousands of fonts
- Support for local font files
- CSS variable-based configuration for simple customization

## [Default Fonts](https://mksaas.com/docs/fonts\#default-fonts)

The template includes several pre-configured fonts that you can use out of the box.

### [Built-in Font Families](https://mksaas.com/docs/fonts\#built-in-font-families)

The following font families are available by default:

- **Noto Sans**: The main sans-serif font used for most text
- **Noto Serif**: A serif font that can be used for headings or body text
- **Noto Sans Mono**: A monospace font used for code blocks and technical content
- **Bricolage Grotesque**: A modern sans-serif font for decorative elements or headings

These fonts are loaded from Google Fonts and are configured in the `src/assets/fonts/index.ts` file:

src/assets/fonts/index.ts

```
import {
  Bricolage_Grotesque,
  Noto_Sans,
  Noto_Sans_Mono,
  Noto_Serif,
} from 'next/font/google';

// Noto Sans with selected weights
export const fontNotoSans = Noto_Sans({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-noto-sans',
  weight: ['500', '600', '700'],
});

// Noto Serif
export const fontNotoSerif = Noto_Serif({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-noto-serif',
  weight: ['400'],
});

// Noto Sans Mono
export const fontNotoSansMono = Noto_Sans_Mono({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-noto-sans-mono',
  weight: ['400'],
});

// Bricolage Grotesque with multiple weights
export const fontBricolageGrotesque = Bricolage_Grotesque({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-bricolage-grotesque',
  weight: ['400', '500', '600', '700'],
});
```

### [Font Configuration](https://mksaas.com/docs/fonts\#font-configuration)

The fonts are applied to the application in the root layout component:

src/app/\[locale\]/layout.tsx

```
import {
  fontBricolageGrotesque,
  fontNotoSans,
  fontNotoSansMono,
  fontNotoSerif,
} from '@/assets/fonts';
import { cn } from '@/lib/utils';

// Inside the layout component
<body
  suppressHydrationWarning
  className={cn(
    'size-full antialiased',
    fontNotoSans.className,
    fontNotoSerif.variable,
    fontNotoSansMono.variable,
    fontBricolageGrotesque.variable
  )}
>
  {/* Layout content */}
</body>
```

Notice that `fontNotoSans.className` is applied directly, making it the default font for the entire website, while the other fonts are applied as CSS variables that can be used throughout the application.

### [CSS Variables](https://mksaas.com/docs/fonts\#css-variables)

The font variables are defined in the global CSS file and can be used in your Tailwind CSS classes:

src/styles/globals.css

```
@theme inline {
  /* font */
  --font-sans: var(--font-noto-sans);
  --font-mono: var(--font-noto-sans-mono);
  --font-serif: var(--font-noto-serif);
  --font-bricolage: var(--font-bricolage-grotesque);

  /* other variables */
}
```

## [Adding Custom Fonts](https://mksaas.com/docs/fonts\#adding-custom-fonts)

You can add custom fonts to your website in two ways: using Google Fonts or local font files.

### [Adding Google Fonts](https://mksaas.com/docs/fonts\#adding-google-fonts)

To add a new Google Font:

1. Import the font from `next/font/google`
2. Configure the font with appropriate options
3. Export the font variable

For example, to add the Roboto font:

src/assets/fonts/index.ts

```
import { Roboto } from 'next/font/google';

export const fontRoboto = Roboto({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto',
  weight: ['400', '500', '700'],
});
```

You can explore the [Google Fonts](https://fonts.google.com/) website to find the perfect font for your website.

### [Adding Local Fonts](https://mksaas.com/docs/fonts\#adding-local-fonts)

To use a local font file:

1. Download the font files (preferably in WOFF2 format for best performance)
2. Place the font files in the `src/assets/fonts` directory
3. Import `localFont` from `next/font/local`
4. Configure the font with appropriate options

For example:

src/assets/fonts/index.ts

```
import localFont from 'next/font/local';

// Local font example
export const fontCustom = localFont({
  src: './CustomFont.woff2',
  variable: '--font-custom',
});
```

You can download font files from [Google Webfonts Helper](https://gwfh.mranftl.com/fonts).

### [Using the New Font](https://mksaas.com/docs/fonts\#using-the-new-font)

After adding a new font, you need to:

1. Update the layout component to include the new font variable:

src/app/\[locale\]/layout.tsx

```
import { fontCustom } from '@/assets/fonts';

// Inside the layout component
<body
  className={cn(
    'size-full antialiased',
    fontNotoSans.className,  // Default font
    fontNotoSerif.variable,
    fontNotoSansMono.variable,
    fontBricolageGrotesque.variable,
    fontCustom.variable      // New font variable
  )}
>
  {/* Layout content */}
</body>
```

2. Optionally, add a CSS variable in `globals.css`:

src/styles/globals.css

```
@theme inline {
  /* font */
  --font-sans: var(--font-noto-sans);
  --font-mono: var(--font-noto-sans-mono);
  --font-serif: var(--font-noto-serif);
  --font-bricolage: var(--font-bricolage-grotesque);
  --font-custom: var(--font-custom);  /* New font variable */

  /* other variables */
}
```

## [Changing the Default Font](https://mksaas.com/docs/fonts\#changing-the-default-font)

To change the default font for your entire website:

1. Choose which font you want to set as the default
2. Update the layout component to use that font's `className` property instead of `fontNotoSans.className`:

src/app/\[locale\]/layout.tsx

```
<body
  className={cn(
    'size-full antialiased',
    fontCustom.className,    // This is now the default font
    fontNotoSans.variable,   // Noto Sans is now available as a variable
    fontNotoSerif.variable,
    fontNotoSansMono.variable,
    fontBricolageGrotesque.variable
  )}
>
  {/* Layout content */}
</body>
```

This screenshot shows the default font is now the custom font.

![Custom Font](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fcustom-font.png&w=3840&q=75)

## [Font Usage Examples](https://mksaas.com/docs/fonts\#font-usage-examples)

Here are some examples of how to use the different fonts in your components:

```
// Using the default font (no need to specify)
<p>This text uses the default font.</p>

// Using a specific font family with Tailwind CSS
<h1 className="font-serif">This heading uses the serif font</h1>

// Using monospace font for code
<code className="font-mono">console.log('Hello, world!');</code>

// Using the decorative font for a special heading
<h2 className="font-bricolage">Special Section</h2>

// Using a custom font (if added)
<p className="font-custom">This text uses a custom font.</p>
```

## [Font Subsetting and Performance](https://mksaas.com/docs/fonts\#font-subsetting-and-performance)

Next.js automatically subsets Google Fonts to include only the characters needed for the languages you specify, which improves performance.

The `subsets` parameter specifies which character sets to include:

```
export const fontNotoSans = Noto_Sans({
  subsets: ['latin'],  // Only include Latin characters
  // ...other options
});
```

For multilingual websites, you can include additional subsets:

```
export const fontNotoSans = Noto_Sans({
  subsets: ['latin', 'cyrillic', 'greek'],  // Support multiple alphabets
  // ...other options
});
```

## [Advanced Font Customization](https://mksaas.com/docs/fonts\#advanced-font-customization)

### [Font Display Strategy](https://mksaas.com/docs/fonts\#font-display-strategy)

The `display` property controls how the font is loaded and displayed:

```
export const fontNotoSans = Noto_Sans({
  display: 'swap',  // Use fallback font until custom font loads
  // ...other options
});
```

Options include:

- `'swap'`: Show a fallback font until the custom font loads (prevents invisible text)
- `'block'`: Briefly show invisible text, then fallback, then custom font
- `'fallback'`: Similar to swap but with a shorter timeout
- `'optional'`: Let the browser decide whether to use the custom font based on connection

### [Adjusting Font Weights](https://mksaas.com/docs/fonts\#adjusting-font-weights)

You can specify which font weights to include to optimize performance:

```
export const fontNotoSans = Noto_Sans({
  weight: ['400', '500', '700'],  // Only include regular, medium, and bold
  // ...other options
});
```

This is important for performance as each additional weight increases the amount of font data that needs to be downloaded.

## [Best Practices](https://mksaas.com/docs/fonts\#best-practices)

- **Limit Font Families**: Use no more than 2-3 font families on your website for a cohesive look
- **Limit Font Weights**: Include only the weights you actually need (typically regular, medium, and bold)
- **Use WOFF2 Format**: For local fonts, use WOFF2 format for the best compression and performance
- **Test Performance**: Check your website's performance after adding custom fonts
- **Consider Fallbacks**: Specify appropriate fallback fonts using Tailwind's font family utilities
- **Accessibility**: Ensure your chosen fonts are readable for all users, especially for body text

## [Next Steps](https://mksaas.com/docs/fonts\#next-steps)

Now that you understand how to work with fonts in MkSaaS, explore these related topics:

[**Themes** \\
\\
Configure theme and appearance settings](https://mksaas.com/docs/themes) [**Images** \\
\\
Work with images in your MkSaaS website](https://mksaas.com/docs/images) [**Environment Setup** \\
\\
Configure environment variables](https://mksaas.com/docs/env) [**Website Configuration** \\
\\
Configure core settings for the website](https://mksaas.com/docs/config/website)

### Table of Contents

[Core Features](https://mksaas.com/docs/fonts#core-features) [Default Fonts](https://mksaas.com/docs/fonts#default-fonts) [Built-in Font Families](https://mksaas.com/docs/fonts#built-in-font-families) [Font Configuration](https://mksaas.com/docs/fonts#font-configuration) [CSS Variables](https://mksaas.com/docs/fonts#css-variables) [Adding Custom Fonts](https://mksaas.com/docs/fonts#adding-custom-fonts) [Adding Google Fonts](https://mksaas.com/docs/fonts#adding-google-fonts) [Adding Local Fonts](https://mksaas.com/docs/fonts#adding-local-fonts) [Using the New Font](https://mksaas.com/docs/fonts#using-the-new-font) [Changing the Default Font](https://mksaas.com/docs/fonts#changing-the-default-font) [Font Usage Examples](https://mksaas.com/docs/fonts#font-usage-examples) [Font Subsetting and Performance](https://mksaas.com/docs/fonts#font-subsetting-and-performance) [Advanced Font Customization](https://mksaas.com/docs/fonts#advanced-font-customization) [Font Display Strategy](https://mksaas.com/docs/fonts#font-display-strategy) [Adjusting Font Weights](https://mksaas.com/docs/fonts#adjusting-font-weights) [Best Practices](https://mksaas.com/docs/fonts#best-practices) [Next Steps](https://mksaas.com/docs/fonts#next-steps)

![Custom Font](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fcustom-font.png&w=3840&q=75)

## Internationalization Setup
# i18n

Learn how to set up and use internationalization with Next.js and next-intl

MkSaaS uses [next-intl](https://next-intl.dev/) for internationalization, allowing you to create multi-language applications with ease. With the built-in i18n support, you can create localized UI components, email templates, and more to provide a better experience for users worldwide.

## [Setup](https://mksaas.com/docs/i18n\#setup)

### [Configuration](https://mksaas.com/docs/i18n\#configuration)

Internationalization settings are managed in the `website.tsx` configuration file:

src/config/website.tsx

```
export const websiteConfig = {
  // ...other config
  i18n: {
    defaultLocale: 'en',
    locales: {
      en: {
        flag: 'üá∫üá∏',
        name: 'English',
      },
      zh: {
        flag: 'üá®üá≥',
        name: '‰∏≠Êñá',
      },
    },
  },
  // ...other config
};
```

If you are setting up the environment, now you can **go back to the Environment Setup guide** and continue. The rest of this guide can be read later.

[**Environment Setup** \\
\\
Set up environment variables](https://mksaas.com/docs/env#internationalization)

* * *

## [Internationalization System Structure](https://mksaas.com/docs/i18n\#internationalization-system-structure)

The internationalization system in MkSaaS is designed with the following components:

src

i18n

messages.ts

navigation.ts

request.ts

routing.ts

messages

en.json

zh.json

This structure makes it easy to manage translations and integrate them into your application.

## [Core Features](https://mksaas.com/docs/i18n\#core-features)

- Multi-language support with next-intl integration
- Internationalized routing with prefixed locales
- Localized UI components for consistent user experience
- Localized email templates for communication
- URL generation with proper locale handling
- Automatic language detection based on user preferences
- Full support for Right-to-Left (RTL) languages
- Custom locale switcher component

## [Translation Files](https://mksaas.com/docs/i18n\#translation-files)

MkSaaS uses JSON files for translations, located in the `messages` directory. Each language has its own file, following the naming convention `[locale].json`.

The structure of these files is hierarchical, allowing you to organize translations by feature or component:

messages/en.json

```
{
  "Metadata": {
    "name": "MkSaaS",
    "title": "MkSaaS - The Best cpm calculator Boilerplate",
    "description": "MkSaaS is the best cpm calculator boilerplate. Make cpm calculator in days, simply and effortlessly"
  },
  "Common": {
    "login": "Log in",
    "logout": "Log out",
    "signUp": "Sign up",
    "language": "Switch language"
  },
  "Mail": {
    "verifyEmail": {
      "title": "Hi, {name}.",
      "body": "Please click the link below to verify your email address.",
      "confirmEmail": "Confirm email",
      "subject": "Verify your email"
    }
  }
}
```

## [Usage](https://mksaas.com/docs/i18n\#usage)

### [Using Translations in React Components](https://mksaas.com/docs/i18n\#using-translations-in-react-components)

MkSaaS provides an easy way to use translations in your React components with the `useTranslations` hook:

```
import { useTranslations } from 'next-intl';

export function MyComponent() {
  const t = useTranslations();

  return (
    <div>
      <h1>{t('Common.login')}</h1>
      <p>{t('Common.signUp')}</p>
    </div>
  );
}
```

For translations with parameters:

```
<p>{t('Mail.verifyEmail.title', { name: 'John' })}</p>
```

### [Using Translations in Server Components](https://mksaas.com/docs/i18n\#using-translations-in-server-components)

For server components, use the `getTranslations` function:

```
import { getTranslations } from 'next-intl/server';

export async function MyServerComponent() {
  const t = await getTranslations();

  return (
    <div>
      <h1>{t('Common.login')}</h1>
    </div>
  );
}
```

### [Localized Links and Navigation](https://mksaas.com/docs/i18n\#localized-links-and-navigation)

To create links that respect the current locale, use the `LocaleLink` component:

```
import { LocaleLink } from '@/i18n/navigation';

<LocaleLink href="/about">About Us</LocaleLink>
```

For programmatic navigation:

```
import { useLocaleRouter } from '@/i18n/navigation';

const router = useLocaleRouter();
router.push('/dashboard');
```

### [Localized Email Templates](https://mksaas.com/docs/i18n\#localized-email-templates)

MkSaaS includes support for sending localized emails using the same translation system:

src/mail/templates/verify-email.tsx

```
import type { BaseEmailProps } from '@/mail/types';
import { createTranslator } from 'use-intl/core';

interface VerifyEmailProps extends BaseEmailProps {
  url: string;
  name: string;
}

export function VerifyEmail({
  url,
  name,
  locale,
  messages,
}: VerifyEmailProps) {
  const t = createTranslator({
    locale,
    messages,
    namespace: 'Mail.verifyEmail',
  });

  return (
    <EmailLayout locale={locale} messages={messages}>
      <Text>{t('title', { name })}</Text>
      <Text>{t('body')}</Text>
      <EmailButton href={url}>{t('confirmEmail')}</EmailButton>
    </EmailLayout>
  );
}
```

To send a localized email:

```
await sendEmail({
  to: 'user@example.com',
  template: 'verifyEmail',
  context: {
    name: 'John Doe',
    url: 'https://example.com/verify?token=abc123',
  },
  locale: 'zh', // Specify the locale for this email
});
```

### [Locale Components](https://mksaas.com/docs/i18n\#locale-components)

MkSaaS provides two different locale switching components to give you flexibility in how you offer language selection to your users:

- LocaleSelector ( `src/components/layout/locale-selector.tsx`)
- LocaleSwitcher ( `src/components/layout/locale-switcher.tsx`)

Both components provide a dropdown selection interface using the `Select` component from the UI library. You can use either component depending on your needs.

## [Customization](https://mksaas.com/docs/i18n\#customization)

### [Adding a New Language](https://mksaas.com/docs/i18n\#adding-a-new-language)

1. **Create a new translation file**:

Create a new JSON file in the `messages` directory with the name of your locale (e.g., `fr.json`).

You can copy the structure from `en.json` and translate all values:






messages/fr.json









```
{
     "Metadata": {
       "name": "MkSaaS",
       "title": "MkSaaS - Le meilleur mod√®le SaaS AI",
       "description": "MkSaaS est le meilleur mod√®le SaaS AI. Cr√©ez un SaaS AI en quelques jours, simplement et sans effort"
     },
     // ... rest of translations
}
```

2. **Update the website configuration**:

Add the new locale to your `website.tsx` configuration:






src/config/website.tsx









```
i18n: {
     defaultLocale: 'en',
     locales: {
       en: {
         flag: 'üá∫üá∏',
         name: 'English',
       },
       zh: {
         flag: 'üá®üá≥',
         name: '‰∏≠Êñá',
       },
       fr: {
         flag: 'üá´üá∑',
         name: 'Fran√ßais',
       },
     },
},
```

3. **Handle incomplete translations**:

The system automatically merges translations with the default language, so any missing translations will fall back to the default language (usually English).


### [Supporting Only One Language](https://mksaas.com/docs/i18n\#supporting-only-one-language)

If you only want to support one language in your application:

1. Keep only the language you want to support in the config file:






src/config/website.tsx









```
i18n: {
     defaultLocale: 'en',
     locales: {
       en: {
         flag: 'üá∫üá∏',
         name: 'English',
       },
       // Remove or comment out other languages
     },
},
```

2. Keep only the corresponding language file in the `messages` directory (e.g., `en.json`).

3. Both `LocaleSelector` and `LocaleSwitcher` components will automatically detect that only one language is configured and will not render in the UI. This ensures your UI remains clean without unnecessary language selection controls when they aren't needed.


### [Special Language Considerations](https://mksaas.com/docs/i18n\#special-language-considerations)

MkSaaS uses Fumadocs for documentation search functionality with proper internationalization support. For languages with special requirements (like Chinese, Arabic, etc.), you may need to configure additional settings:

src/app/api/search/route.ts

```
const searchAPI = createI18nSearchAPI('advanced', {
  // ...
  localeMap: {
    // Chinese configuration with Mandarin tokenizer
    zh: {
      components: {
        tokenizer: createTokenizer(),
      },
      search: {
        threshold: 0,
        tolerance: 0,
      },
    },
    // Use default tokenizers for other languages
    en: 'english',
    // Add more language-specific configurations as needed
  },
  // ...
});
```

For languages like Chinese, the search system uses the Mandarin tokenizer to properly index and search content. This requires special configuration as shown above, with adjusted threshold and tolerance settings for optimal search results.

The search configuration follows the recommendations from the [Fumadocs Special Languages](https://fumadocs.vercel.app/docs/headless/search/orama#special-languages) and [Fumadocs Internationalization](https://fumadocs.vercel.app/docs/headless/search/orama#internationalization) documentation.

## [Development Tools](https://mksaas.com/docs/i18n\#development-tools)

### [i18n-ally VSCode Extension](https://mksaas.com/docs/i18n\#i18n-ally-vscode-extension)

For a smoother development experience when working with internationalization, we highly recommend installing the [i18n-ally](https://marketplace.visualstudio.com/items?itemName=Lokalise.i18n-ally) extension for your IDE (Visual Studio Code, Cursor, etc.).

[**i18n-ally** \\
\\
Learn more about i18n-ally setup](https://mksaas.com/docs/ide#i18n-ally)

This powerful extension provides several benefits for multilingual application development:

- **Inline Translation Preview**: See translations directly in your code
- **Missing Translation Detection**: Highlights keys that are missing translations in certain languages
- **Quick Translation Creation**: Add new translations quickly with keyboard shortcuts
- **Translation Management**: Sort, rename, and refactor translation keys with ease
- **Multiple Framework Support**: Works with many i18n frameworks including next-intl
- **Auto-completion**: Suggests translation keys as you type
- **Hover Information**: View translations for all languages when hovering over a key

The extension integrates seamlessly with MkSaaS's internationalization structure and can significantly improve your workflow when managing translations across multiple languages.

## [Best Practices](https://mksaas.com/docs/i18n\#best-practices)

1. **Use namespace-based keys**: Organize translations using namespaces to make them more maintainable.
2. **Use parameters for dynamic content**: Use parameters instead of string concatenation for dynamic content.
3. **Keep translations concise**: Avoid lengthy translations that may break your UI layout.
4. **Consider context**: Provide context in your keys to help translators understand how the text is used.
5. **Test all languages**: Always test your application in all supported languages to ensure a good experience.

## [Next Steps](https://mksaas.com/docs/i18n\#next-steps)

Now that you understand how to work with internationalization in MkSaaS, you might want to explore these related features:

[**Email** \\
\\
Configure email templates with internationalization](https://mksaas.com/docs/email) [**Environment Setup** \\
\\
Set up environment variables for your application](https://mksaas.com/docs/env) [**Theming** \\
\\
Customize the theme of your application](https://mksaas.com/docs/theming) [**Layouts** \\
\\
Create custom layouts for your pages](https://mksaas.com/docs/layouts)

### Table of Contents

[Setup](https://mksaas.com/docs/i18n#setup) [Configuration](https://mksaas.com/docs/i18n#configuration) [Internationalization System Structure](https://mksaas.com/docs/i18n#internationalization-system-structure) [Core Features](https://mksaas.com/docs/i18n#core-features) [Translation Files](https://mksaas.com/docs/i18n#translation-files) [Usage](https://mksaas.com/docs/i18n#usage) [Using Translations in React Components](https://mksaas.com/docs/i18n#using-translations-in-react-components) [Using Translations in Server Components](https://mksaas.com/docs/i18n#using-translations-in-server-components) [Localized Links and Navigation](https://mksaas.com/docs/i18n#localized-links-and-navigation) [Localized Email Templates](https://mksaas.com/docs/i18n#localized-email-templates) [Locale Components](https://mksaas.com/docs/i18n#locale-components) [Customization](https://mksaas.com/docs/i18n#customization) [Adding a New Language](https://mksaas.com/docs/i18n#adding-a-new-language) [Supporting Only One Language](https://mksaas.com/docs/i18n#supporting-only-one-language) [Special Language Considerations](https://mksaas.com/docs/i18n#special-language-considerations) [Development Tools](https://mksaas.com/docs/i18n#development-tools) [i18n-ally VSCode Extension](https://mksaas.com/docs/i18n#i18n-ally-vscode-extension) [Best Practices](https://mksaas.com/docs/i18n#best-practices) [Next Steps](https://mksaas.com/docs/i18n#next-steps)

## IDE Setup Guide
# IDE Setup

Learn how to set up VSCode, Cursor, or other IDEs for optimal development with MkSaaS

MkSaaS comes with pre-configured settings for popular code editors like VSCode and Cursor to provide an optimal development experience. This guide will help you set up your editor for maximum productivity.

## [Recommended IDE - Cursor](https://mksaas.com/docs/ide\#recommended-ide---cursor)

[Cursor](https://cursor.com/) is a code editor built on top of VSCode that provides AI-assisted development features. It's especially useful for working with MkSaaS.

If you're using Cursor, you can take advantage of its AI capabilities to:

1. Get context-aware code completions
2. Generate code based on natural language prompts
3. Refactor code intelligently
4. Get documentation and explanations for complex parts of the codebase

### [User rules](https://mksaas.com/docs/ide\#user-rules)

MkSaaS includes several predefined Cursor rules in the `.cursor/rules` directory that provide coding best practices and guidelines for different technologies used in the project. These rules help maintain code quality and consistency:

typescript-best-practices.mdc

nextjs-best-practices.mdc

react-best-practices.mdc

tailwindcss-best-practices.mdc

radix-ui-best-practices.mdc

react-hook-form-best-practices.mdc

zustand-best-practices.mdc

drizzle-orm-best-practices.mdc

date-fns-best-practices.mdc

zod-best-practices.mdc

stripe-best-practices.mdc

ai-sdk-best-practices.mdc

These rules are automatically loaded in Cursor and can be applied to your code by selecting them from the Cursor rules panel. They provide context-aware guidance to improve your development workflow.

### [Documentation](https://mksaas.com/docs/ide\#documentation)

To enhance your development experience, it's recommended to add the official documentation for key technologies to your Cursor documentation panel. This allows you to quickly reference documentation without leaving your editor.

Consider adding documentation from:

- [Next.js Documentation](https://nextjs.org/docs) \- For core framework features
- [Drizzle ORM Documentation](https://orm.drizzle.team/docs) \- For database operations
- [Tailwind CSS Documentation](https://tailwindcss.com/docs) \- For styling
- [Radix UI Documentation](https://www.radix-ui.com/primitives/docs) \- For UI components
- [Shadcn/ui Documentation](https://ui.shadcn.com/docs) \- For pre-built components
- [Magic UI Documentation](https://magicui.design/docs) \- For Magic UI components
- [Better Auth Documentation](https://better-auth.com/docs) \- For authentication
- [Resend Documentation](https://resend.com/docs) \- For email and newsletter functionality
- [Stripe Documentation](https://stripe.com/docs) \- For payment processing
- [Vercel AI SDK Documentation](https://sdk.vercel.ai/docs) \- For AI features
- [Zustand Documentation](https://zustand.docs.pmnd.rs/) \- For state management
- [Next-Intl Documentation](https://next-intl.dev/docs/) \- For internationalization
- [Fumadocs Documentation](https://fumadocs.dev/docs/ui) \- For documentation
- [Next-Safe-Action Documentation](https://next-safe-action.dev/docs/getting-started) \- For safe actions
- [Content Collections Documentation](https://www.content-collections.dev/docs) \- For blog

To add documentation in Cursor:

1. Open Cursor Settings
2. Go to the Features tab
3. Go to the Docs panel
4. Click the "+ Add new doc" button
5. Add the documentation URL and name

Having these docs readily available in your IDE will significantly speed up development by reducing context switching.

![Cursor Docs](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fcursor-docs.png&w=3840&q=75)

## [Recommended Extensions](https://mksaas.com/docs/ide\#recommended-extensions)

The project includes a `.vscode/extensions.json` file that will prompt you to install recommended extensions when you open the project in VSCode or Cursor. MkSaaS works best with the following extensions:

### [Biome](https://mksaas.com/docs/ide\#biome)

Biome is a powerful formatter, linter, and more for JavaScript and TypeScript projects. It's a high-performance replacement for tools like ESLint and Prettier, providing both formatting and linting capabilities in a single, fast package.

[Download Biome extension](https://marketplace.visualstudio.com/items?itemName=biomejs.biome)

### [Tailwind CSS IntelliSense](https://mksaas.com/docs/ide\#tailwind-css-intellisense)

Tailwind CSS IntelliSense provides autocomplete suggestions for Tailwind CSS classes, linting, and hover previews, making it much easier to work with utility-first CSS.

[Download Tailwind CSS IntelliSense](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss)

### [i18n Ally](https://mksaas.com/docs/ide\#i18n-ally)

i18n Ally is a powerful internationalization extension for VSCode that helps you manage translations, provides autocomplete for keys, and shows inline translations in your code.

[Download i18n Ally extension](https://marketplace.visualstudio.com/items?itemName=Lokalise.i18n-ally)

### [GitLens](https://mksaas.com/docs/ide\#gitlens)

GitLens supercharges Git capabilities in VSCode/Cursor. It helps you visualize code authorship, seamlessly navigate through Git repositories, explore commit history, and compare changes right within your editor.

[Download GitLens extension](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)

### [MDX](https://mksaas.com/docs/ide\#mdx)

The MDX extension provides syntax highlighting, intelligent language features, and rich editing support for MDX files. It's essential for working with documentation and content in the MkSaaS project.

[Download MDX extension](https://marketplace.visualstudio.com/items?itemName=unifiedjs.vscode-mdx)

## [Recommended Editor Configuration](https://mksaas.com/docs/ide\#recommended-editor-configuration)

The repository includes pre-configured settings in `.vscode/settings.json` that set up:

### Biome Settings

### i18n Settings

### Search Settings

## [Recommended Workflow](https://mksaas.com/docs/ide\#recommended-workflow)

For the best development experience with MkSaaS:

### [Use the integrated terminal](https://mksaas.com/docs/ide\#use-the-integrated-terminal)

Use the integrated terminal in VSCode/Cursor to run development commands without switching contexts.

### [Use the Source Control panel](https://mksaas.com/docs/ide\#use-the-source-control-panel)

The Git integration in VSCode/Cursor makes it easy to stage, commit, and push changes.

### [Take advantage of IntelliSense](https://mksaas.com/docs/ide\#take-advantage-of-intellisense)

The built-in IntelliSense for TypeScript and React helps you write correct code faster.

### [Use i18n Ally for translations](https://mksaas.com/docs/ide\#use-i18n-ally-for-translations)

Leverage i18n Ally to manage translations directly within your editor, ensuring your application is properly internationalized.

## [Next Steps](https://mksaas.com/docs/ide\#next-steps)

Now that your editor is configured, explore these related topics:

[**Project Structure** \\
\\
Learn how to navigate the project structure](https://mksaas.com/docs/structure) [**Linting & Formatting** \\
\\
Learn how to use linting and formatting the code](https://mksaas.com/docs/lint) [**Environment Setup** \\
\\
Configure your environment variables](https://mksaas.com/docs/env) [**Updating the Codebase** \\
\\
Learn how to update your MkSaaS codebase](https://mksaas.com/docs/updates)

### Table of Contents

[Recommended IDE - Cursor](https://mksaas.com/docs/ide#recommended-ide---cursor) [User rules](https://mksaas.com/docs/ide#user-rules) [Documentation](https://mksaas.com/docs/ide#documentation) [Recommended Extensions](https://mksaas.com/docs/ide#recommended-extensions) [Biome](https://mksaas.com/docs/ide#biome) [Tailwind CSS IntelliSense](https://mksaas.com/docs/ide#tailwind-css-intellisense) [i18n Ally](https://mksaas.com/docs/ide#i18n-ally) [GitLens](https://mksaas.com/docs/ide#gitlens) [MDX](https://mksaas.com/docs/ide#mdx) [Recommended Editor Configuration](https://mksaas.com/docs/ide#recommended-editor-configuration) [Recommended Workflow](https://mksaas.com/docs/ide#recommended-workflow) [Use the integrated terminal](https://mksaas.com/docs/ide#use-the-integrated-terminal) [Use the Source Control panel](https://mksaas.com/docs/ide#use-the-source-control-panel) [Take advantage of IntelliSense](https://mksaas.com/docs/ide#take-advantage-of-intellisense) [Use i18n Ally for translations](https://mksaas.com/docs/ide#use-i18n-ally-for-translations) [Next Steps](https://mksaas.com/docs/ide#next-steps)

![Cursor Docs](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fcursor-docs.png&w=3840&q=75)

## Customize MkSaaS Images
# Images

Learn how to customize the images in your MkSaaS website

This guide covers the image system in your MkSaaS website, focusing on how to configure and customize logos, favicons, and other image assets.

## [Core Features](https://mksaas.com/docs/images\#core-features)

The MkSaaS template includes a flexible image system that allows you to:

- Configure logos for both light and dark modes
- Set up social media preview images (Open Graph)
- Customize favicons and browser icons
- Organize and access image assets efficiently

## [Image Configuration](https://mksaas.com/docs/images\#image-configuration)

Images are primarily configured in the `website.tsx` configuration file.

### [Configuration Settings](https://mksaas.com/docs/images\#configuration-settings)

src/config/website.tsx

```
export const websiteConfig: WebsiteConfig = {
  metadata: {
    // ...other settings
    images: {
      ogImage: '/og.png',            // Social media preview image
      logoLight: '/logo.png',        // Logo for light mode
      logoDark: '/logo-dark.png',    // Logo for dark mode
    },
    // ...other configuration
  },
  // ...rest of config
};
```

**Configuration Options:**

| Property | Description |
| --- | --- |
| `ogImage` | The Open Graph image used for social media previews when sharing the website |
| `logoLight` | The logo displayed in light mode |
| `logoDark` | The logo displayed in dark mode |

## [Image Directory Structure](https://mksaas.com/docs/images\#image-directory-structure)

Image assets are primarily stored in the `public` directory, which is directly accessible from the browser.

### [Main Image Assets](https://mksaas.com/docs/images\#main-image-assets)

The following image assets are typically stored in the root of the public directory:

- **Main Logos**: `logo.png` (light mode) and `logo-dark.png` (dark mode)
- **Open Graph Image**: `og.png` for social media previews
- **Favicon Assets**: Various sizes of favicons and browser icons

### [Additional Image Directories](https://mksaas.com/docs/images\#additional-image-directories)

For better organization, you can create subdirectories within the public folder:

- `/public/images/` \- For general website images
- `/public/blocks/` \- For section-specific images
- `/public/svg/` \- For SVG assets

## [Customizing Logos](https://mksaas.com/docs/images\#customizing-logos)

### [Logo Requirements](https://mksaas.com/docs/images\#logo-requirements)

For the best display across the website, logos should:

- Be in PNG format with transparency
- Have a consistent height (the width can vary)
- Be prepared in both light and dark versions for different themes

### [Creating Custom Logos](https://mksaas.com/docs/images\#creating-custom-logos)

To create a professional logo for your website:

1. **Use a Logo Creation Tool**: We recommend [Ray.so Icon Maker](https://ray.so/icon) for creating simple, clean logos
2. Export your logo in PNG format with transparency
3. Create two versions: one for light mode and one for dark mode
4. Place both files in your `/public` directory

### [Updating Logo Configuration](https://mksaas.com/docs/images\#updating-logo-configuration)

After creating your custom logos:

1. Save your light mode logo as `/public/logo.png`
2. Save your dark mode logo as `/public/logo-dark.png`
3. Optionally update the paths in `website.tsx` if you used different filenames or locations:

src/config/website.tsx

```
images: {
  // ...other image settings
  logoLight: '/path/to/your-logo.png',
  logoDark: '/path/to/your-dark-logo.png',
},
```

## [Customizing Favicons](https://mksaas.com/docs/images\#customizing-favicons)

Favicons are the small icons displayed in browser tabs, bookmarks, and when adding your site to a mobile home screen.

### [Favicon Files](https://mksaas.com/docs/images\#favicon-files)

A complete favicon set includes several files:

- `favicon.ico` \- Traditional favicon (16x16, 32x32, 48x48px)
- `favicon-16x16.png` \- 16x16 pixel PNG favicon
- `favicon-32x32.png` \- 32x32 pixel PNG favicon
- `apple-touch-icon.png` \- 180x180 pixel icon for iOS
- `android-chrome-192x192.png` \- Icon for Android (192x192 pixels)
- `android-chrome-512x512.png` \- Larger icon for Android (512x512 pixels)

### [Creating Custom Favicons](https://mksaas.com/docs/images\#creating-custom-favicons)

To create a complete set of favicon files:

1. Design a simple, recognizable icon (ideally square)
2. Use [Favicon.io Converter](https://favicon.io/favicon-converter/) to generate a complete set of favicons
3. Upload your image to the converter
4. Download the generated zip file containing all favicon formats
5. Extract and place all files in the root of your `/public` directory

### [Favicon HTML](https://mksaas.com/docs/images\#favicon-html)

The favicon files are automatically linked in your HTML via the following tags in MkSaaS boilerplate, so you don't need to add them manually.

```
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
<link rel="manifest" href="/site.webmanifest">
```

These links are typically included in the `<head>` section of your application's HTML.

## [Creating an Open Graph Image](https://mksaas.com/docs/images\#creating-an-open-graph-image)

The Open Graph image ( `og.png`) is displayed when your website is shared on social media platforms.

### [Open Graph Image Guidelines](https://mksaas.com/docs/images\#open-graph-image-guidelines)

For optimal display across platforms:

- Use dimensions of 1200√ó630 pixels (ratio of 1.91:1)
- Keep important content in the central area
- Include your logo, website name, and possibly a tagline
- Use colors consistent with your brand

### [Updating Open Graph Image](https://mksaas.com/docs/images\#updating-open-graph-image)

1. Create your Open Graph image using a design tool
2. Save it as `og.png`
3. Place it in the root of your `/public` directory
4. Update the configuration in `website.tsx` if needed:

src/config/website.tsx

```
images: {
  ogImage: '/your-custom-og.png',
  // ...other image settings
},
```

## [Best Practices](https://mksaas.com/docs/images\#best-practices)

- **Image Optimization**: Always compress images before adding them to your project
- **Responsive Images**: Use the Next.js Image component for automatic responsive handling
- **SVG for Icons**: Use SVG format for icons and simple graphics
- **Consistent Styling**: Maintain consistent dimensions and styling for logos across the site
- **Alt Text**: Always include descriptive alt text for accessibility
- **File Size**: Keep image file sizes as small as possible for better performance
- **Format Selection**: Use WebP or AVIF formats when possible for better compression
- **Image Dimensions**: Store images at their maximum required dimensions, letting Next.js handle resizing

## [Troubleshooting](https://mksaas.com/docs/images\#troubleshooting)

### [Images Not Displaying](https://mksaas.com/docs/images\#images-not-displaying)

If your images aren't displaying correctly:

1. Verify the file paths in your `website.tsx` configuration
2. Check that image files exist in the correct location (case-sensitive)
3. Clear your browser cache and reload the page
4. Verify the image dimensions and format are supported

### [Favicon Not Showing](https://mksaas.com/docs/images\#favicon-not-showing)

If your favicon isn't displaying:

1. Check that all favicon files are in the root of your public directory
2. Verify that the HTML links are correctly set up
3. Force refresh your browser (Ctrl+F5 or Cmd+Shift+R)
4. Check browser developer tools for any 404 errors

## [Next Steps](https://mksaas.com/docs/images\#next-steps)

Now that you understand how to work with images in MkSaaS, explore these related topics:

[**Themes** \\
\\
Configure theme and appearance settings](https://mksaas.com/docs/themes) [**Fonts** \\
\\
Work with fonts in your MkSaaS website](https://mksaas.com/docs/fonts) [**Environment Setup** \\
\\
Configure environment variables](https://mksaas.com/docs/env) [**Website Configuration** \\
\\
Configure core settings for your website](https://mksaas.com/docs/config/website)

### Table of Contents

[Core Features](https://mksaas.com/docs/images#core-features) [Image Configuration](https://mksaas.com/docs/images#image-configuration) [Configuration Settings](https://mksaas.com/docs/images#configuration-settings) [Image Directory Structure](https://mksaas.com/docs/images#image-directory-structure) [Main Image Assets](https://mksaas.com/docs/images#main-image-assets) [Additional Image Directories](https://mksaas.com/docs/images#additional-image-directories) [Customizing Logos](https://mksaas.com/docs/images#customizing-logos) [Logo Requirements](https://mksaas.com/docs/images#logo-requirements) [Creating Custom Logos](https://mksaas.com/docs/images#creating-custom-logos) [Updating Logo Configuration](https://mksaas.com/docs/images#updating-logo-configuration) [Customizing Favicons](https://mksaas.com/docs/images#customizing-favicons) [Favicon Files](https://mksaas.com/docs/images#favicon-files) [Creating Custom Favicons](https://mksaas.com/docs/images#creating-custom-favicons) [Favicon HTML](https://mksaas.com/docs/images#favicon-html) [Creating an Open Graph Image](https://mksaas.com/docs/images#creating-an-open-graph-image) [Open Graph Image Guidelines](https://mksaas.com/docs/images#open-graph-image-guidelines) [Updating Open Graph Image](https://mksaas.com/docs/images#updating-open-graph-image) [Best Practices](https://mksaas.com/docs/images#best-practices) [Troubleshooting](https://mksaas.com/docs/images#troubleshooting) [Images Not Displaying](https://mksaas.com/docs/images#images-not-displaying) [Favicon Not Showing](https://mksaas.com/docs/images#favicon-not-showing) [Next Steps](https://mksaas.com/docs/images#next-steps)

## Landing Page Guide
# Landing Page

Learn how to create beautiful, responsive landing pages using the built-in marketing blocks

This guide covers how to create and customize landing pages in your MkSaaS website using the built-in marketing blocks from Tailark.

## [Core Features](https://mksaas.com/docs/landingpage\#core-features)

MkSaaS comes with a comprehensive set of pre-built marketing blocks that allow you to quickly create beautiful, responsive landing pages. These blocks include:

- Hero sections
- Feature displays
- Pricing tables
- Testimonials
- Call-to-action sections
- And many more

All of these components are based on the [Tailark](https://tailark.com/) open-source project, which provides high-quality UI blocks built with shadcn/UI and TailwindCSS.

## [Available Block Categories](https://mksaas.com/docs/landingpage\#available-block-categories)

The MkSaaS template includes all marketing blocks from Tailark, organized into the following categories:

| Category | Description |
| --- | --- |
| [Hero Sections](https://mksaas.com/blocks/hero-section) | Engaging, attention-grabbing page headers |
| [Logo Cloud](https://mksaas.com/blocks/logo-cloud) | Display partner or client logos |
| [Features](https://mksaas.com/blocks/features) | Highlight your product's key capabilities |
| [Integrations](https://mksaas.com/blocks/integrations) | Showcase third-party integrations |
| [Content](https://mksaas.com/blocks/content) | General content display sections |
| [Stats](https://mksaas.com/blocks/stats) | Display important metrics and statistics |
| [Team](https://mksaas.com/blocks/team) | Present your team members |
| [Testimonials](https://mksaas.com/blocks/testimonials) | Display customer reviews and testimonials |
| [Call-to-action](https://mksaas.com/blocks/call-to-action) | Encourage user actions |
| [Footer](https://mksaas.com/blocks/footer) | Page footers with links and information |
| [Pricing](https://mksaas.com/blocks/pricing) | Showcase your pricing plans |
| [Comparator](https://mksaas.com/blocks/comparator) | Compare different product features or plans |
| [FAQs](https://mksaas.com/blocks/faqs) | Answer common questions |
| [Login](https://mksaas.com/blocks/login) | Login related components |
| [Sign-up](https://mksaas.com/blocks/sign-up) | Sign-up related components |
| [Forgot Password](https://mksaas.com/blocks/forgot-password) | Password recovery interfaces |
| [Contact](https://mksaas.com/blocks/contact) | Contact forms and information |

Each category contains multiple block variants, giving you plenty of options to choose from.

## [How to Use Marketing Blocks](https://mksaas.com/docs/landingpage\#how-to-use-marketing-blocks)

The blocks are located in the `src/app/[locale]/preview` directory, organized by category. Each category folder contains multiple block variants that you can use in your landing pages.

### [Browsing Available Blocks](https://mksaas.com/docs/landingpage\#browsing-available-blocks)

To see all available blocks, you can explore the `preview` directory:

src/app/\[locale\]/preview

hero-section

logo-cloud

features

integrations

content

stats

team

testimonials

call-to-action

footer

pricing

comparator

faqs

login

sign-up

forgot-password

contact

layout.tsx

Each category folder contains numbered variants (e.g., `one`, `two`, `three`, etc.), and each variant has a `page.tsx` file that implements the block.

### [Adding a Block to Landing Page](https://mksaas.com/docs/landingpage\#adding-a-block-to-landing-page)

To use a block in your landing page:

1. Browse the `preview` directory to find the block you want to use
2. Open the corresponding `page.tsx` file to view the implementation
3. Copy the component code from the file
4. Paste it into your landing page component
5. Customize the content and styling as needed

We do not recommend directly using components from the `preview` directory in your code. These components are regularly synchronized with the official Tailark components and may introduce conflicts during updates. Instead, copy the components to your own directory or use the pre-built components in the `blocks` directory as described in the next section.

For example, to use the first hero section variant:

```
// Your landing page component
import { HeroSectionOne } from '@/components/landing/hero-section-one';

export default function LandingPage() {
  return (
    <main>
      <HeroSectionOne />
      {/* Add more blocks here */}
    </main>
  );
}
```

### [Using the Blocks Directory](https://mksaas.com/docs/landingpage\#using-the-blocks-directory)

For better organization and internationalization support, MkSaaS provides a dedicated `src/components/blocks` directory where you should place your customized components after copying them from the preview directory.

src/components/blocks

hero

features

testimonials

pricing

stats

logo-cloud

calltoaction

faqs

integration

This directory structure mirrors the categories in the preview directory and already includes some pre-built, internationalized block components. When adding new blocks from the preview directory, we recommend the following workflow:

1. Find and select the desired block from the preview directory
2. Copy the component code from the `page.tsx` file
3. Create a new file in the corresponding category folder in `src/components/blocks`
4. Adapt the component to support internationalization (see the [Internationalization section](https://mksaas.com/docs/landingpage#internationalization))

For example, if you've selected a hero section component from the preview directory, you should place your customized version in:

```
src/components/blocks/hero/your-hero-component.tsx
```

Using this organized approach provides several benefits:

- Keeps all your landing page components in one dedicated location
- Makes it easier to maintain and update components
- Ensures proper separation from the original preview components
- Allows you to adapt components for internationalization in a structured way
- Facilitates reuse across different parts of your application

While you can use components directly from the `blocks` directory, the most recommended approach is to copy them to your own directory (e.g., `components/home` or `components/landing`) and customize them there. This approach:

- Prevents conflicts when the template is updated
- Gives you full control over the components
- Allows you to make extensive customizations without affecting the original components
- Makes it easier to maintain your specific modifications

### [Creating a Complete Landing Page](https://mksaas.com/docs/landingpage\#creating-a-complete-landing-page)

A typical landing page combines multiple blocks to create a cohesive user experience. Here's an example of how you might structure a landing page using components from the blocks directory:

```
import HeroSection from '@/components/blocks/hero/hero';
import Features from '@/components/blocks/features/features';
import Testimonials from '@/components/blocks/testimonials/testimonials';
import Pricing from '@/components/blocks/pricing/pricing';
import CallToAction from '@/components/blocks/calltoaction/cta';
import Footer from '@/components/blocks/footer/footer';

export default function LandingPage() {
  return (
    <main>
      <HeroSection />
      <Features />
      <Testimonials />
      <Pricing />
      <CallToAction />
    </main>
  );
}
```

This approach allows you to mix and match different blocks to create a unique landing page that suits your needs.

## [Internationalization](https://mksaas.com/docs/landingpage\#internationalization)

The blocks from Tailark do not support internationalization out of the box. To make your landing page multilingual, you'll need to extract the text content into language-specific resource files.

### [Extracting Text for Translation](https://mksaas.com/docs/landingpage\#extracting-text-for-translation)

When you've finalized your block selection and customization, follow these steps to make your landing page multilingual:

1. Identify all text content in the blocks you're using
2. Extract this text into language-specific resource files (e.g., using next-intl)
3. Replace the hardcoded text with translation function calls

Here's an example of how to internationalize a hero section:

```
// Before internationalization
<TextEffect as="h1" className="...">
  Your Custom Headline Here
</TextEffect>

// After internationalization
import { useTranslations } from 'next-intl';

function InternationalizedHeroSection() {
  const t = useTranslations('LandingPage.Hero');

  return (
    <TextEffect as="h1" className="...">
      {t('headline')}
    </TextEffect>
  );
}
```

### [Translation Resource Files](https://mksaas.com/docs/landingpage\#translation-resource-files)

Create translation files for each supported language:

```
// messages/en.json
{
  "LandingPage": {
    "Hero": {
      "headline": "Your Custom Headline Here",
      "subheading": "Your custom subheading text goes here.",
      "ctaPrimary": "Get Started",
      "ctaSecondary": "Learn More"
    }
  }
}

// messages/es.json
{
  "LandingPage": {
    "Hero": {
      "headline": "Su T√≠tulo Personalizado Aqu√≠",
      "subheading": "Su texto de subt√≠tulo personalizado va aqu√≠.",
      "ctaPrimary": "Comenzar",
      "ctaSecondary": "Aprende M√°s"
    }
  }
}
```

### [Pre-built Internationalized Components](https://mksaas.com/docs/landingpage\#pre-built-internationalized-components)

The `src/components/blocks` directory already includes several pre-internationalized components that you can use as a reference or starting point. These components:

1. Import `useTranslations` from next-intl
2. Use translation keys for all text content
3. Use `LocaleLink` instead of regular Next.js `Link` for proper localization of URLs
4. Maintain the same visual design and functionality as their preview counterparts

For example, here's a simplified version of an internationalized hero component:

```
import { useTranslations } from 'next-intl';
import { LocaleLink } from '@/i18n/navigation';
import { TextEffect } from '@/components/tailark/motion/text-effect';
import { Button } from '@/components/ui/button';

export default function HeroSection() {
  const t = useTranslations('HomePage.hero');

  return (
    <section>
      <h1>
        <TextEffect preset="fade-in-blur">
          {t('title')}
        </TextEffect>
      </h1>
      <p>{t('description')}</p>
      <Button asChild>
        <LocaleLink href="/get-started">
          {t('cta')}
        </LocaleLink>
      </Button>
    </section>
  );
}
```

By following this approach, you can create a fully multilingual landing page that adapts to the user's preferred language.

## [Keeping Components Updated](https://mksaas.com/docs/landingpage\#keeping-components-updated)

The marketing blocks in MkSaaS are regularly synchronized with the [Tailark GitHub repository](https://github.com/tailark/blocks). This ensures that you always have access to the latest improvements and additions.

There are three approaches to managing your landing page components, each with different update implications:

1. **Using Preview Components (Not Recommended)**
   - Components in the `preview` directory are automatically synchronized with Tailark
   - Direct usage may cause conflicts during updates
   - Avoid using these components in production
2. **Using Blocks Directory Components**
   - Components in `src/components/blocks` are more stable
   - May still be affected by template updates
   - Good for minimal customization needs
3. **Using Your Own Directory (Recommended)**
   - Copy components to your own directory (e.g., `components/home`)
   - Immune to template updates
   - Complete control over component updates
   - Best for extensive customization needs

When new versions of MkSaaS are released, you can manually review the changes in the `preview` and `blocks` directories to decide if you want to incorporate any improvements into your custom components.

## [Best Practices](https://mksaas.com/docs/landingpage\#best-practices)

When creating your landing page, consider these best practices:

01. **Start with a plan**: Before implementing, sketch out the structure of your landing page
02. **Focus on user flow**: Arrange blocks to guide users through a logical journey
03. **Maintain consistency**: Use consistent colors, fonts, and styling throughout
04. **Optimize for performance**: Compress images and minimize unnecessary animations
05. **Mobile first**: Ensure your landing page looks great on all devices
06. **Test loading times**: Verify that your page loads quickly, especially the above-the-fold content
07. **Clear call-to-action**: Make your primary CTA prominent and compelling
08. **Simplify navigation**: Keep navigation minimal to focus attention on your content
09. **A/B test**: If possible, test different versions to see what resonates with your audience
10. **Track metrics**: Set up analytics to measure the effectiveness of your landing page

## [Next Steps](https://mksaas.com/docs/landingpage\#next-steps)

Now that you understand how to create and customize landing pages in MkSaaS, explore these related topics:

[**Themes** \\
\\
Configure theme and appearance settings](https://mksaas.com/docs/themes) [**Fonts** \\
\\
Customize typography for your landing page](https://mksaas.com/docs/fonts) [**Images** \\
\\
Work with images in your MkSaaS website](https://mksaas.com/docs/images) [**Website Configuration** \\
\\
Configure core settings for the website](https://mksaas.com/docs/config/website)

### Table of Contents

[Core Features](https://mksaas.com/docs/landingpage#core-features) [Available Block Categories](https://mksaas.com/docs/landingpage#available-block-categories) [How to Use Marketing Blocks](https://mksaas.com/docs/landingpage#how-to-use-marketing-blocks) [Browsing Available Blocks](https://mksaas.com/docs/landingpage#browsing-available-blocks) [Adding a Block to Landing Page](https://mksaas.com/docs/landingpage#adding-a-block-to-landing-page) [Using the Blocks Directory](https://mksaas.com/docs/landingpage#using-the-blocks-directory) [Creating a Complete Landing Page](https://mksaas.com/docs/landingpage#creating-a-complete-landing-page) [Internationalization](https://mksaas.com/docs/landingpage#internationalization) [Extracting Text for Translation](https://mksaas.com/docs/landingpage#extracting-text-for-translation) [Translation Resource Files](https://mksaas.com/docs/landingpage#translation-resource-files) [Pre-built Internationalized Components](https://mksaas.com/docs/landingpage#pre-built-internationalized-components) [Keeping Components Updated](https://mksaas.com/docs/landingpage#keeping-components-updated) [Best Practices](https://mksaas.com/docs/landingpage#best-practices) [Next Steps](https://mksaas.com/docs/landingpage#next-steps)

## Biome Code Quality Guide
# Formatting & Linting

Guide to using Biome for code quality in MkSaaS

MkSaaS uses [Biome](https://biomejs.dev/) for code formatting and linting to ensure consistent code quality across the project.

Biome is configured in the project root with `biome.json`. This configuration enforces consistent code style and catches common errors.

## [Key Features](https://mksaas.com/docs/lint\#key-features)

- **Zero-config**: Works out of the box with sensible defaults
- **Fast**: Written in Rust for maximum performance
- **All-in-one**: Combines linting, formatting, and more in a single tool

## [Running Linting & Formatting](https://mksaas.com/docs/lint\#running-linting--formatting)

### [Check Code Quality](https://mksaas.com/docs/lint\#check-code-quality)

To check your code without making changes:

pnpmnpmyarnbun

```
pnpm run lint
```

This command will report any linting errors or warnings in your codebase.

### [Fix Code Issues](https://mksaas.com/docs/lint\#fix-code-issues)

To automatically fix linting issues:

pnpmnpmyarnbun

```
pnpm run lint:fix
```

This will attempt to fix any automatically fixable issues in your code.

### [Format Code](https://mksaas.com/docs/lint\#format-code)

To automatically format your code:

pnpmnpmyarnbun

```
pnpm run format
```

This will format all supported files according to the project's style rules.

## [Editor Integration](https://mksaas.com/docs/lint\#editor-integration)

Biome works best when integrated with your editor:

- **VSCode/Cursor**: Install the [Biome extension](https://marketplace.visualstudio.com/items?itemName=biomejs.biome) for real-time linting and formatting
- **Other Editors**: Check the [Biome documentation](https://biomejs.dev/guides/getting-started) for integration options

## [Customizing Rules](https://mksaas.com/docs/lint\#customizing-rules)

The project's Biome configuration is defined in `biome.json`. Here's a simplified view of our configuration:

biome.json

```
{
  "$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
  "formatter": {
    "enabled": true,
    "indentStyle": "space",
    "indentWidth": 2,
    "lineWidth": 80
  },
  "organizeImports": {
    "enabled": true
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      // Various rule customizations...
    }
  },
  "javascript": {
    "formatter": {
      "quoteStyle": "single",
      "trailingCommas": "es5",
      "semicolons": "always"
    }
  }
}
```

MkSaaS has customized certain rules to better fit our development workflow. The full configuration can be viewed in the `biome.json` file at the project root.

For more information on how to customize the rules configuration, please refer to the [Biome Lint Rules Documentation](https://biomejs.dev/linter/rules/).

## [TypeScript Integration](https://mksaas.com/docs/lint\#typescript-integration)

Biome works alongside TypeScript to provide comprehensive code quality checks:

- TypeScript handles type checking
- Biome handles style and common errors
- Together they provide a robust development experience

## [IDE Integration](https://mksaas.com/docs/lint\#ide-integration)

MkSaaS comes with pre-configured VSCode/Cursor settings for Biome:

.vscode/settings.json

```
{
  "editor.defaultFormatter": "biomejs.biome",
  "[javascript]": {
    "editor.defaultFormatter": "biomejs.biome"
  },
  "[typescript]": {
    "editor.defaultFormatter": "biomejs.biome"
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "biomejs.biome"
  },
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "quickfix.biome": "explicit",
    "source.organizeImports.biome": "explicit"
  }
}
```

These settings ensure that:

- Biome is used as the default formatter for JavaScript and TypeScript files
- Files are automatically formatted when saved
- Import statements are organized on save
- Quick fixes from Biome are applied when explicitly requested

## [Next Steps](https://mksaas.com/docs/lint\#next-steps)

Now that you understand how code quality is maintained in MkSaaS, explore these related topics:

[**Project Structure** \\
\\
Understand the organization of your codebase](https://mksaas.com/docs/structure) [**IDE Setup** \\
\\
Configure your development environment for code quality](https://mksaas.com/docs/ide) [**Updating the Codebase** \\
\\
Keep your codebase up to date with the latest changes](https://mksaas.com/docs/updates) [**Environment Setup** \\
\\
Configure environment variables for your application](https://mksaas.com/docs/env)

### Table of Contents

[Key Features](https://mksaas.com/docs/lint#key-features) [Running Linting & Formatting](https://mksaas.com/docs/lint#running-linting--formatting) [Check Code Quality](https://mksaas.com/docs/lint#check-code-quality) [Fix Code Issues](https://mksaas.com/docs/lint#fix-code-issues) [Format Code](https://mksaas.com/docs/lint#format-code) [Editor Integration](https://mksaas.com/docs/lint#editor-integration) [Customizing Rules](https://mksaas.com/docs/lint#customizing-rules) [TypeScript Integration](https://mksaas.com/docs/lint#typescript-integration) [IDE Integration](https://mksaas.com/docs/lint#ide-integration) [Next Steps](https://mksaas.com/docs/lint#next-steps)

## MkSaaS Metadata Customization
# Metadata

Learn how to customize metadata for your MkSaaS website

This guide covers the metadata system in your MkSaaS website, how to customize SEO-related information, and how to configure social sharing metadata for optimal visibility.

## [Core Features](https://mksaas.com/docs/metadata\#core-features)

The MkSaaS template comes with a robust metadata system that provides:

- SEO-optimized page titles and descriptions
- Social media sharing metadata (Open Graph and Twitter)
- Favicon and app icons
- Custom image support for social sharing
- Internationalization support for metadata

## [Understanding the Metadata System](https://mksaas.com/docs/metadata\#understanding-the-metadata-system)

The metadata system in MkSaaS is built on Next.js metadata API and is configured through several key files:

### [1\. Centralized Configuration](https://mksaas.com/docs/metadata\#1-centralized-configuration)

The main website configuration is defined in `src/config/website.tsx`:

src/config/website.tsx

```
export const websiteConfig: WebsiteConfig = {
  metadata: {
    theme: {
      defaultTheme: 'default',
      enableSwitch: true,
    },
    mode: {
      defaultMode: 'dark',
      enableSwitch: true,
    },
    images: {
      ogImage: '/og.png',
      logoLight: '/logo.png',
      logoDark: '/logo-dark.png',
    },
    social: {
      github: 'https://github.com/MkSaaSHQ',
      twitter: 'https://x.com/mksaascom',
      discord: 'https://discord.gg/yVwpEtTT',
      youtube: 'https://www.youtube.com/@MkSaaS',
    },
  },
  // Other configuration sections...
};
```

This configuration defines:

- Default theme and dark mode settings
- Logo and Open Graph image paths
- Social media links

### [2\. Translation Files](https://mksaas.com/docs/metadata\#2-translation-files)

The basic website metadata such as name, title, and description are defined in the translation files:

messages/en.json

```
{
  "Metadata": {
    "name": "MkSaaS",
    "title": "MkSaaS - The Best cpm calculator Boilerplate",
    "description": "MkSaaS is the best cpm calculator boilerplate. Make cpm calculator in days, simply and effortlessly"
  },
  // Other translations...
}
```

### [3\. Metadata Construction](https://mksaas.com/docs/metadata\#3-metadata-construction)

The `constructMetadata` function in `src/lib/metadata.ts` handles creating the metadata object for each page:

src/lib/metadata.ts

```
export function constructMetadata({
  title,
  description,
  canonicalUrl,
  image,
  noIndex = false,
}: {
  title?: string;
  description?: string;
  canonicalUrl?: string;
  image?: string;
  noIndex?: boolean;
} = {}): Metadata {
  title = title || defaultMessages.Metadata.name;
  description = description || defaultMessages.Metadata.description;
  image = image || websiteConfig.metadata.images?.ogImage;
  const ogImageUrl = new URL(`${getBaseUrl()}${image}`);
  return {
    title,
    description,
    alternates: canonicalUrl
      ? {
          canonical: canonicalUrl,
        }
      : undefined,
    openGraph: {
      type: 'website',
      locale: 'en_US',
      url: canonicalUrl,
      title,
      description,
      siteName: title,
      images: [ogImageUrl.toString()],
    },
    twitter: {
      card: 'summary_large_image',
      title,
      description,
      images: [ogImageUrl.toString()],
      site: getBaseUrl(),
    },
    icons: {
      icon: '/favicon.ico',
      shortcut: '/favicon-32x32.png',
      apple: '/apple-touch-icon.png',
    },
    metadataBase: new URL(getBaseUrl()),
    manifest: `${getBaseUrl()}/manifest.webmanifest`,
    ...(noIndex && {
      robots: {
        index: false,
        follow: false,
      },
    }),
  };
}
```

This function handles:

- Setting default values from translations
- Configuring Open Graph and Twitter card metadata
- Setting up favicon and icon information
- Managing canonical URLs and robots directives

## [Customizing Website Metadata](https://mksaas.com/docs/metadata\#customizing-website-metadata)

### [Basic Website Information](https://mksaas.com/docs/metadata\#basic-website-information)

To change the basic website information like name, title, and description:

1. Edit the `messages/en.json` file (and other language files if you're using them):

messages/en.json

```
{
  "Metadata": {
    "name": "Your Website Name",
    "title": "Your Website Title - Tagline",
    "description": "A detailed description of your website for SEO purposes"
  }
}
```

For multilingual sites, update each language file with appropriate translations:

messages/zh.json

```
{
  "Metadata": {
    "name": "ÊÇ®ÁöÑÁΩëÁ´ôÂêçÁß∞",
    "title": "ÊÇ®ÁöÑÁΩëÁ´ôÊ†áÈ¢ò - Ê†áËØ≠",
    "description": "ÊÇ®ÁΩëÁ´ôÁöÑËØ¶ÁªÜÊèèËø∞ÔºåÁî®‰∫é SEO ÁõÆÁöÑ"
  }
}
```

### [Customizing Social Images](https://mksaas.com/docs/metadata\#customizing-social-images)

To change the Open Graph image and logos:

1. Place your image files in the `public` directory
2. Update the paths in `src/config/website.tsx`:

src/config/website.tsx

```
metadata: {
  // Other settings...
  images: {
    ogImage: '/your-og-image.png',  // Used for social sharing
    logoLight: '/your-logo-light.png',  // Logo for light mode
    logoDark: '/your-logo-dark.png',  // Logo for dark mode
  },
}
```

Recommended dimensions:

- **OG Image**: 1200√ó630 pixels for optimal display on social platforms
- **Logo**: At least 512√ó512 pixels for high-resolution displays

### [Social Media Links](https://mksaas.com/docs/metadata\#social-media-links)

Update your social media links in the website configuration:

src/config/website.tsx

```
metadata: {
  // Other settings...
  social: {
    github: 'https://github.com/YourUsername',
    twitter: 'https://x.com/YourHandle',
    discord: 'https://discord.gg/YourInvite',
    youtube: 'https://www.youtube.com/@YourChannel',
    // Add other social platforms as needed
  },
}
```

### [Favicons and App Icons](https://mksaas.com/docs/metadata\#favicons-and-app-icons)

To replace the default favicons and app icons:

1. Generate a complete set of icons using a tool like [Real Favicon Generator](https://realfavicongenerator.net/)
2. Place the generated files in the `public` directory
3. Update the paths in the `constructMetadata` function if necessary:

src/lib/metadata.ts

```
icons: {
  icon: '/favicon.ico',
  shortcut: '/favicon-32x32.png',
  apple: '/apple-touch-icon.png',
},
```

### [Canonical URLs](https://mksaas.com/docs/metadata\#canonical-urls)

For pages with multiple URLs or to prevent duplicate content issues, set canonical URLs:

```
export const metadata = constructMetadata({
  title: 'Example Page',
  description: 'Description',
  canonicalUrl: 'https://yourdomain.com/preferred-path',
});
```

### [No-Index Pages](https://mksaas.com/docs/metadata\#no-index-pages)

For pages you don't want indexed by search engines:

```
export const metadata = constructMetadata({
  title: 'Private Page',
  description: 'This page is not for search engines',
  noIndex: true,
});
```

For a complete PWA experience, also update the `manifest.webmanifest` file in the public directory.

## [Page-Specific Metadata](https://mksaas.com/docs/metadata\#page-specific-metadata)

### [Adding Metadata to MDX Pages](https://mksaas.com/docs/metadata\#adding-metadata-to-mdx-pages)

In your MDX content pages, you can define metadata in the frontmatter:

content/blog/example-post.mdx

```
---
title: Example Blog Post
description: This is an example blog post with custom metadata
image: /images/blog/example-post.png
---

Content goes here...
```

The metadata system will automatically use these values when rendering the page.

### [Programmatic Metadata](https://mksaas.com/docs/metadata\#programmatic-metadata)

For React pages, you can use the `constructMetadata` function:

src/app/\[locale\]/example/page.tsx

```
import { constructMetadata } from '@/lib/metadata';

export const metadata = constructMetadata({
  title: 'Example Page',
  description: 'This is an example page with custom metadata',
  image: '/images/example-page.png',
});
```

### [Custom Open Graph Data](https://mksaas.com/docs/metadata\#custom-open-graph-data)

For pages that need specific Open Graph data:

```
import { Metadata } from 'next';
import { constructMetadata } from '@/lib/metadata';

export const metadata: Metadata = {
  ...constructMetadata({
    title: 'Custom Page',
    description: 'Description',
  }),
  openGraph: {
    type: 'article',
    publishedTime: '2023-01-01T00:00:00.000Z',
    authors: ['Author Name'],
    // Other article-specific fields
  },
};
```

### [Test Social Sharing](https://mksaas.com/docs/metadata\#test-social-sharing)

Use tools like [AITDK Chrome Extension](https://aitdk.com/extension) to test your social sharing metadata.

![AITDK](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fmetadata.png&w=3840&q=75)

## [Best Practices](https://mksaas.com/docs/metadata\#best-practices)

- **Keep Titles Concise**: Aim for titles under 60 characters for optimal display in search results
- **Descriptive Meta Descriptions**: Write compelling descriptions of 150-160 characters
- **Unique Content**: Ensure each page has unique title and description
- **Use High-Quality Images**: Create professional, relevant images for OG and Twitter cards
- **Include Keywords**: Incorporate relevant keywords naturally in titles and descriptions
- **Update Consistently**: Keep metadata current with your content changes
- **Mobile Optimization**: Ensure your metadata looks good on mobile devices
- **Language-Specific Content**: Use appropriate language tags for international content

## [Next Steps](https://mksaas.com/docs/metadata\#next-steps)

Now that you understand how to customize metadata in MkSaaS, explore these related topics:

[**Themes** \\
\\
Configure theme and appearance settings](https://mksaas.com/docs/themes) [**Images** \\
\\
Work with images in your MkSaaS website](https://mksaas.com/docs/images) [**Internationalization** \\
\\
Configure multi-language support](https://mksaas.com/docs/i18n) [**Website Configuration** \\
\\
Configure core settings for the website](https://mksaas.com/docs/config/website)

### Table of Contents

[Core Features](https://mksaas.com/docs/metadata#core-features) [Understanding the Metadata System](https://mksaas.com/docs/metadata#understanding-the-metadata-system) [1\. Centralized Configuration](https://mksaas.com/docs/metadata#1-centralized-configuration) [2\. Translation Files](https://mksaas.com/docs/metadata#2-translation-files) [3\. Metadata Construction](https://mksaas.com/docs/metadata#3-metadata-construction) [Customizing Website Metadata](https://mksaas.com/docs/metadata#customizing-website-metadata) [Basic Website Information](https://mksaas.com/docs/metadata#basic-website-information) [Customizing Social Images](https://mksaas.com/docs/metadata#customizing-social-images) [Social Media Links](https://mksaas.com/docs/metadata#social-media-links) [Favicons and App Icons](https://mksaas.com/docs/metadata#favicons-and-app-icons) [Canonical URLs](https://mksaas.com/docs/metadata#canonical-urls) [No-Index Pages](https://mksaas.com/docs/metadata#no-index-pages) [Page-Specific Metadata](https://mksaas.com/docs/metadata#page-specific-metadata) [Adding Metadata to MDX Pages](https://mksaas.com/docs/metadata#adding-metadata-to-mdx-pages) [Programmatic Metadata](https://mksaas.com/docs/metadata#programmatic-metadata) [Custom Open Graph Data](https://mksaas.com/docs/metadata#custom-open-graph-data) [Test Social Sharing](https://mksaas.com/docs/metadata#test-social-sharing) [Best Practices](https://mksaas.com/docs/metadata#best-practices) [Next Steps](https://mksaas.com/docs/metadata#next-steps)

![AITDK](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fmetadata.png&w=3840&q=75)

## Newsletter Management Guide
# Newsletter

Learn how to set up and use Resend for newsletter management

MkSaaS uses [Resend](https://resend.com/) for newsletter management. This integration provides a simple yet powerful way to manage newsletter subscriptions for your users.

## [Setup](https://mksaas.com/docs/newsletter\#setup)

1. Create a Resend account at [resend.com](https://resend.com/)
2. Create an audience in Resend for your newsletter subscribers
3. Get your API key and audience ID from the Resend dashboard
4. Add the following environment variables:

.env

```
RESEND_API_KEY=re_...
RESEND_AUDIENCE_ID=your_audience_id
```

5. Update the website config to use Resend for newsletters:

src/config/website.tsx

```
export const websiteConfig = {
  // ...other config
  newsletter: {
    provider: 'resend', // Newsletter provider to use
    autoSubscribeAfterSignUp: false, // Whether to automatically subscribe users after sign up
  },
  // ...other config
}
```

If you are setting up the environment, now you can **go back to the Environment Setup guide** and continue. The rest of this guide can be read later.

[**Environment Setup** \\
\\
Set up environment variables](https://mksaas.com/docs/env#newsletter)

* * *

## [Newsletter System Structure](https://mksaas.com/docs/newsletter\#newsletter-system-structure)

The newsletter system in MkSaaS is designed with the following components:

src

newsletter

provider

index.ts

types.ts

README.md

This modular structure makes it easy to extend the newsletter system with new providers if needed.

## [Core Features](https://mksaas.com/docs/newsletter\#core-features)

- Newsletter subscription and unsubscription management
- Resend audience integration for subscriber lists
- Subscription status checking
- Optional automatic subscription for new users
- Modular architecture for easy provider switching
- Simple API with strongly typed interfaces

## [Usage](https://mksaas.com/docs/newsletter\#usage)

### [Basic Usage](https://mksaas.com/docs/newsletter\#basic-usage)

MkSaaS provides simple utility functions for newsletter management:

```
import { subscribe, unsubscribe, isSubscribed } from '@/newsletter';

// Subscribe a user to the newsletter
const success = await subscribe('user@example.com');

// Unsubscribe a user from the newsletter
const success = await unsubscribe('user@example.com');

// Check if a user is subscribed
const subscribed = await isSubscribed('user@example.com');
```

### [Using with Email Templates](https://mksaas.com/docs/newsletter\#using-with-email-templates)

You can combine the newsletter functionality with the email system to send confirmation emails:

```
import { subscribe } from '@/newsletter';
import { sendEmail } from '@/mail';

export async function subscribeWithConfirmation(email: string) {
  // Subscribe the user
  const success = await subscribe(email);

  if (success) {
    // Send a confirmation email
    await sendEmail({
      to: email,
      template: 'subscribeNewsletter',
      context: {
        name: email.split('@')[0], // Simple name extraction
        unsubscribeUrl: `https://example.com/unsubscribe?email=${encodeURIComponent(email)}`,
      },
    });
  }

  return success;
}
```

## [Customization](https://mksaas.com/docs/newsletter\#customization)

### [Creating a Custom Provider](https://mksaas.com/docs/newsletter\#creating-a-custom-provider)

If you need to use a different newsletter service, you can create a custom provider:

1. Create a new file in the `src/newsletter/provider` directory
2. Implement the `NewsletterProvider` interface

src/newsletter/provider/custom-provider.ts

```
import type {
  CheckSubscribeStatusParams,
  NewsletterProvider,
  SubscribeNewsletterParams,
  UnsubscribeNewsletterParams,
} from '@/newsletter/types';

export class CustomNewsletterProvider implements NewsletterProvider {
  constructor() {
    // Initialize your provider
  }

  public getProviderName(): string {
    return 'CustomProvider';
  }

  async subscribe({ email }: SubscribeNewsletterParams): Promise<boolean> {
    // Implementation for subscribing a user
    return true;
  }

  async unsubscribe({ email }: UnsubscribeNewsletterParams): Promise<boolean> {
    // Implementation for unsubscribing a user
    return true;
  }

  async checkSubscribeStatus({ email }: CheckSubscribeStatusParams): Promise<boolean> {
    // Implementation for checking subscription status
    return true;
  }
}
```

3. Update the provider selection logic in `index.ts`:

src/newsletter/index.ts

```
import { CustomNewsletterProvider } from './provider/custom-provider';

export const initializeNewsletterProvider = (): NewsletterProvider => {
  if (!newsletterProvider) {
    if (websiteConfig.newsletter.provider === 'resend') {
      newsletterProvider = new ResendNewsletterProvider();
    } else if (websiteConfig.newsletter.provider === 'custom') {
      newsletterProvider = new CustomNewsletterProvider();
    } else {
      throw new Error(
        `Unsupported newsletter provider: ${websiteConfig.newsletter.provider}`
      );
    }
  }

  return newsletterProvider;
};
```

## [Best Practices](https://mksaas.com/docs/newsletter\#best-practices)

1. **Validate Email Addresses**: Always validate email addresses before subscribing users
2. **Handle Errors Gracefully**: Provide user-friendly error messages when subscription fails
3. **Confirmation Emails**: Send confirmation emails when users subscribe
4. **Unsubscribe Link**: Always include an unsubscribe link in your newsletter emails
5. **Rate Limiting**: Implement rate limiting on your subscription endpoints to prevent abuse
6. **Privacy Policy**: Make sure your website has a privacy policy explaining how you use subscriber data

## [Next Steps](https://mksaas.com/docs/newsletter\#next-steps)

Now that you understand how to work with newsletters in MkSaaS, explore these related integrations:

[**Email** \\
\\
Configure email services for sending newsletters](https://mksaas.com/docs/email) [**Authentication** \\
\\
Set up user authentication with newsletter integration](https://mksaas.com/docs/auth) [**Analytics** \\
\\
Track newsletter subscription metrics](https://mksaas.com/docs/analytics) [**Storage** \\
\\
Store newsletter data in your database](https://mksaas.com/docs/storage)

### Table of Contents

[Setup](https://mksaas.com/docs/newsletter#setup) [Newsletter System Structure](https://mksaas.com/docs/newsletter#newsletter-system-structure) [Core Features](https://mksaas.com/docs/newsletter#core-features) [Usage](https://mksaas.com/docs/newsletter#usage) [Basic Usage](https://mksaas.com/docs/newsletter#basic-usage) [Using with Email Templates](https://mksaas.com/docs/newsletter#using-with-email-templates) [Customization](https://mksaas.com/docs/newsletter#customization) [Creating a Custom Provider](https://mksaas.com/docs/newsletter#creating-a-custom-provider) [Best Practices](https://mksaas.com/docs/newsletter#best-practices) [Next Steps](https://mksaas.com/docs/newsletter#next-steps)

## Custom Pages Guide
# Custom Pages

Learn how to customize and create new pages in your MkSaaS website

This guide covers the page system in your MkSaaS website, how to customize existing pages, and how to create new pages for your specific needs.

## [Core Features](https://mksaas.com/docs/pages\#core-features)

The MkSaaS template includes a versatile content management system that allows you to:

- Customize legal pages (Cookie Policy, Privacy Policy, Terms of Service)
- Maintain changelog entries for version releases
- Create marketing and informational pages (About, Contact, Waitlist)
- Add completely custom pages for your specific needs

## [Page Structure](https://mksaas.com/docs/pages\#page-structure)

Pages in MkSaaS are organized into different categories:

### [Legal Pages](https://mksaas.com/docs/pages\#legal-pages)

Legal pages are stored in the `content/pages` directory and rendered in the `src/app/[locale]/(marketing)/(legal)` routes:

- **Cookie Policy**: Information about how your website uses cookies
- **Privacy Policy**: Details about how you handle user data
- **Terms of Service**: Rules and regulations for using your service

### [Changelog Entries](https://mksaas.com/docs/pages\#changelog-entries)

Release notes are stored in the `content/release` directory and displayed on the Changelog page:

- **Version Releases**: Each release has its own MDX file with version details and changes

### [Marketing Pages](https://mksaas.com/docs/pages\#marketing-pages)

Marketing pages are rendered in the `src/app/[locale]/(marketing)/(pages)` routes:

- **About**: Information about your company or project
- **Contact**: Contact forms and information
- **Waitlist**: Registration for early access or notifications
- **Changelog**: Page displaying all release notes

## [Customizing Existing Pages](https://mksaas.com/docs/pages\#customizing-existing-pages)

### [Legal Pages](https://mksaas.com/docs/pages\#legal-pages-1)

Legal pages are written in MDX format and located in the `content/pages` directory. Each file includes frontmatter metadata and the content body.

**Example: Privacy Policy (privacy-policy.mdx)**

content/pages/privacy-policy.mdx

```
---
title: Privacy Policy
description: Our commitment to protecting your privacy and personal data
date: 2025-03-10T00:00:00.000Z
published: true
---

## Introduction

Welcome to our Privacy Policy. This document explains how we collect, use, and protect your personal information when you use our services.

... more content ...
```

To customize a legal page:

1. Open the corresponding MDX file in the `content/pages` directory
2. Update the frontmatter metadata (title, description, date)
3. Modify the content in Markdown format
4. Save the file

The page will automatically update with your changes.

### [Changelog Entries](https://mksaas.com/docs/pages\#changelog-entries-1)

Changelog entries are stored as MDX files in the `content/release` directory.

**Example: Release v1.0.0 (v1-0-0.mdx)**

content/release/v1-0-0.mdx

```
---
title: "Initial Release"
description: "Our first official release with core features and functionality"
date: "2024-03-01T00:00:00Z"
version: "v1.0.0"
published: true
---

### Core Features

We're excited to announce the initial release of our platform with the following core features:

- **User Authentication**: Secure login and registration with email verification
- **Dashboard**: Intuitive dashboard for managing your projects and resources

... more content ...
```

To add a new release:

1. Create a new MDX file in the `content/release` directory (e.g., `v1-1-0.mdx`)
2. Add the appropriate frontmatter metadata (title, description, date, version, published)
3. Write the release notes using Markdown
4. Save the file

The new release will automatically appear on your Changelog page, sorted by date (newest first).

## [Creating New Pages](https://mksaas.com/docs/pages\#creating-new-pages)

You can create completely custom pages for your specific needs. There are two approaches:

### [1\. MDX-Based Pages](https://mksaas.com/docs/pages\#1-mdx-based-pages)

For content-heavy pages that don't require complex interactivity:

1. Create a new MDX file in the `content/pages` directory (e.g., `faq.mdx`)
2. Add the appropriate frontmatter metadata
3. Write your content in Markdown format
4. Create a new page component in `src/app/[locale]/(marketing)/(pages)/faq/page.tsx`

Here's a template for the page component:

```
import { CustomPage } from '@/components/page/custom-page';
import { constructMetadata } from '@/lib/metadata';
import { getPage } from '@/lib/page/get-page';
import { getUrlWithLocale } from '@/lib/urls/urls';
import type { NextPageProps } from '@/types/next-page-props';
import type { Metadata } from 'next';
import type { Locale } from 'next-intl';
import { getTranslations } from 'next-intl/server';
import { notFound } from 'next/navigation';

export async function generateMetadata({
  params,
}: {
  params: Promise<{ locale: Locale }>;
}): Promise<Metadata | undefined> {
  const { locale } = await params;
  const page = await getPage('faq', locale);

  if (!page) {
    return {};
  }

  const t = await getTranslations({ locale, namespace: 'Metadata' });

  return constructMetadata({
    title: page.title + ' | ' + t('title'),
    description: page.description,
    canonicalUrl: getUrlWithLocale('/faq', locale),
  });
}

export default async function FAQPage(props: NextPageProps) {
  const params = await props.params;
  if (!params) {
    notFound();
  }

  const locale = params.locale as string;
  const page = await getPage('faq', locale);

  if (!page) {
    notFound();
  }

  return (
    <CustomPage
      title={page.title}
      description={page.description}
      date={page.date}
      content={page.body}
    />
  );
}
```

### [2\. Component-Based Pages](https://mksaas.com/docs/pages\#2-component-based-pages)

For pages that require more complex interactivity:

1. Create a new directory in `src/app/[locale]/(marketing)/(pages)` (e.g., `pricing`)
2. Add a `page.tsx` file that exports your custom page component

Example of a custom page component:

```
import { Button } from '@/components/ui/button';
import { constructMetadata } from '@/lib/metadata';
import { getUrlWithLocale } from '@/lib/urls/urls';
import type { NextPageProps } from '@/types/next-page-props';
import type { Metadata } from 'next';
import type { Locale } from 'next-intl';
import { getTranslations } from 'next-intl/server';

export async function generateMetadata({
  params,
}: {
  params: Promise<{ locale: Locale }>;
}): Promise<Metadata | undefined> {
  const { locale } = await params;
  const t = await getTranslations({ locale, namespace: 'Metadata' });
  const pt = await getTranslations({ locale, namespace: 'PricingPage' });

  return constructMetadata({
    title: pt('title') + ' | ' + t('title'),
    description: pt('description'),
    canonicalUrl: getUrlWithLocale('/pricing', locale),
  });
}

export default async function PricingPage(props: NextPageProps) {
  const params = await props.params;
  const locale = params?.locale as Locale;
  const t = await getTranslations('PricingPage');

  return (
    <div className="max-w-4xl mx-auto space-y-8">
      <div className="space-y-4">
        <h1 className="text-center text-3xl font-bold tracking-tight">
          {t('title')}
        </h1>
        <p className="text-center text-lg text-muted-foreground">
          {t('subtitle')}
        </p>
      </div>

      {/* Your custom pricing components */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        {/* Pricing cards go here */}
      </div>

      <div className="text-center mt-12">
        <Button size="lg">{t('cta')}</Button>
      </div>
    </div>
  );
}
```

## [Custom Layouts](https://mksaas.com/docs/pages\#custom-layouts)

You can customize the layout for different page types by modifying the following files:

- `src/app/[locale]/(marketing)/(legal)/layout.tsx` \- For legal pages
- `src/app/[locale]/(marketing)/(pages)/layout.tsx` \- For marketing pages

These layout files control the container, spacing, and overall structure of the pages.

## [Page Routes](https://mksaas.com/docs/pages\#page-routes)

The page routes are defined in the `src/routes.ts` file. The routing system includes several important route categories that control access and navigation in your application:

### [Protected Routes](https://mksaas.com/docs/pages\#protected-routes)

Protected routes require user authentication to access. If a user tries to access these routes without being logged in, they will be automatically redirected to the login page. The login page will include a `callbackUrl` parameter to redirect the user back to their intended destination after successful authentication.

src/routes.ts

```
export const protectedRoutes = [\
  Routes.Dashboard,\
  Routes.SettingsProfile,\
  Routes.SettingsBilling,\
  Routes.SettingsSecurity,\
  Routes.SettingsNotifications,\
];
```

### [Routes Not Allowed for Logged-in Users](https://mksaas.com/docs/pages\#routes-not-allowed-for-logged-in-users)

These routes are specifically blocked for users who are already logged in. When an authenticated user tries to access these routes, they will be automatically redirected to the default login redirect page (typically the dashboard).

src/routes.ts

```
export const routesNotAllowedByLoggedInUsers = [\
  Routes.Login,\
  Routes.Register\
];
```

### [Default Login Redirect](https://mksaas.com/docs/pages\#default-login-redirect)

This route defines where users are redirected after successful login if no specific `callbackUrl` is provided. By default, it redirects to the dashboard, but this can be configured in your website configuration:

src/routes.ts

```
export const DEFAULT_LOGIN_REDIRECT = websiteConfig.routes.defaultLoginRedirect ?? Routes.Dashboard;
```

## [SEO Optimization](https://mksaas.com/docs/pages\#seo-optimization)

MkSaaS includes built-in SEO features for pages:

1. Each page generates appropriate metadata using the `generateMetadata` function
2. Canonical URLs are automatically created
3. Page titles and descriptions are used for SEO metadata

## [Best Practices](https://mksaas.com/docs/pages\#best-practices)

- **Keep Content Updated**: Regularly review and update your legal pages and documentation
- **Use Clear Structure**: Organize content with proper headings and sections
- **Include Metadata**: Always provide accurate title, description, and date in frontmatter
- **Optimize Images**: If including images in MDX content, optimize them for web
- **Test Translations**: If supporting multiple languages, test all translations
- **Mobile Responsiveness**: Ensure all pages are fully responsive on mobile devices

## [Next Steps](https://mksaas.com/docs/pages\#next-steps)

Now that you understand how to work with pages in MkSaaS, explore these related topics:

[**Themes** \\
\\
Configure theme and appearance settings](https://mksaas.com/docs/themes) [**Fonts** \\
\\
Customize typography in your MkSaaS website](https://mksaas.com/docs/fonts) [**Images** \\
\\
Work with images in your MkSaaS website](https://mksaas.com/docs/images) [**Website Configuration** \\
\\
Configure core settings for the website](https://mksaas.com/docs/config/website)

### Table of Contents

[Core Features](https://mksaas.com/docs/pages#core-features) [Page Structure](https://mksaas.com/docs/pages#page-structure) [Legal Pages](https://mksaas.com/docs/pages#legal-pages) [Changelog Entries](https://mksaas.com/docs/pages#changelog-entries) [Marketing Pages](https://mksaas.com/docs/pages#marketing-pages) [Customizing Existing Pages](https://mksaas.com/docs/pages#customizing-existing-pages) [Legal Pages](https://mksaas.com/docs/pages#legal-pages-1) [Changelog Entries](https://mksaas.com/docs/pages#changelog-entries-1) [Creating New Pages](https://mksaas.com/docs/pages#creating-new-pages) [1\. MDX-Based Pages](https://mksaas.com/docs/pages#1-mdx-based-pages) [2\. Component-Based Pages](https://mksaas.com/docs/pages#2-component-based-pages) [Custom Layouts](https://mksaas.com/docs/pages#custom-layouts) [Page Routes](https://mksaas.com/docs/pages#page-routes) [Protected Routes](https://mksaas.com/docs/pages#protected-routes) [Routes Not Allowed for Logged-in Users](https://mksaas.com/docs/pages#routes-not-allowed-for-logged-in-users) [Default Login Redirect](https://mksaas.com/docs/pages#default-login-redirect) [SEO Optimization](https://mksaas.com/docs/pages#seo-optimization) [Best Practices](https://mksaas.com/docs/pages#best-practices) [Next Steps](https://mksaas.com/docs/pages#next-steps)

## Stripe Payment Integration
# Payment

Learn how to set up and use Stripe for handling payments and subscriptions in your application

MkSaaS uses [Stripe](https://stripe.com/) for payment processing and subscription management. This integration handles both one-time payments and recurring subscriptions with a flexible, developer-friendly approach.

## [Setup](https://mksaas.com/docs/payment\#setup)

MkSaaS boilerplate uses three price plans by default: Free plan, Pro subscription plan (monthly/yearly), and Lifetime plan (one-time payment), follow these steps to set up Stripe integration:

1. Create a Stripe account at [stripe.com](https://stripe.com/)

2. Get your API keys from the Stripe dashboard:
   - Go to the Stripe Dashboard > Developers > API keys
   - Copy your Secret key (starts with `sk_test_` for test mode or `sk_live_` for live mode)
   - Save it to your `.env` file as `STRIPE_SECRET_KEY`
3. Set up webhook and get your Webhook Secret:
   - Go to the Stripe Dashboard > Developers > Webhooks
   - Click "Add endpoint"
   - Enter your webhook URL: `https://your-domain.com/api/webhooks/stripe`
   - Select the events to listen for:
     - `checkout.session.completed`
     - `customer.subscription.created`
     - `customer.subscription.updated`
     - `customer.subscription.deleted`
   - Click "Reveal" to view your Webhook Signing Secret (starts with `whsec_`)
   - Save it to your `.env` file as `STRIPE_WEBHOOK_SECRET`
4. Create products and pricing plans in Stripe:
   - Go to the Stripe Dashboard > Products
   - **Create Pro subscription product**:
     - Click "Add product"
     - Name: "Pro Plan"
     - Description: "Advanced features with subscription pricing"
     - **Add monthly price**:
       - Click "Add price"
       - Price: $9.90 (currency select USD)
       - Recurring: Monthly
       - Save and copy the Price ID (starts with `price_`), this will be used for `NEXT_PUBLIC_STRIPE_PRICE_PRO_MONTHLY`
     - **Add yearly price**:
       - Click "Add price"
       - Price: $99.00 (currency select USD)
       - Recurring: Yearly
       - Save and copy the Price ID (starts with `price_`), this will be used for `NEXT_PUBLIC_STRIPE_PRICE_PRO_YEARLY`
   - **Create Lifetime product**:
     - Click "Add product"
     - Name: "Lifetime Plan"
     - Description: "One-time payment for lifetime access"
     - Add a price:
       - Price: $199.00 (currency select USD)
       - Type: One-off
       - Save and copy the Price ID (starts with `price_`), this will be used for `NEXT_PUBLIC_STRIPE_PRICE_LIFETIME`
5. Add the following environment variables:


.env

```
STRIPE_SECRET_KEY=sk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...
NEXT_PUBLIC_STRIPE_PRICE_PRO_MONTHLY=price_...
NEXT_PUBLIC_STRIPE_PRICE_PRO_YEARLY=price_...
NEXT_PUBLIC_STRIPE_PRICE_LIFETIME=price_...
```

6. Update the `website.tsx` file to use Stripe as the payment provider in the payment configuration, and [configure your pricing plans in the price configuration](https://mksaas.com/docs/config/price):

src/config/website.tsx

```
import { PaymentTypes, PlanIntervals } from '@/payment/types';

export const websiteConfig = {
  // ...other config
  payment: {
    provider: 'stripe', // Payment provider to use
  },
  price: {
    plans: {
      free: {
        id: "free",
        prices: [],
        isFree: true,
        isLifetime: false,
      },
      pro: {
        id: "pro",
        prices: [\
          {\
            type: PaymentTypes.SUBSCRIPTION,\
            priceId: process.env.NEXT_PUBLIC_STRIPE_PRICE_PRO_MONTHLY!,\
            amount: 990,\
            currency: "USD",\
            interval: PlanIntervals.MONTH,\
          },\
          {\
            type: PaymentTypes.SUBSCRIPTION,\
            priceId: process.env.NEXT_PUBLIC_STRIPE_PRICE_PRO_YEARLY!,\
            amount: 9900,\
            currency: "USD",\
            interval: PlanIntervals.YEAR,\
          },\
        ],
        isFree: false,
        isLifetime: false,
        recommended: true,
      },
      lifetime: {
        id: "lifetime",
        prices: [\
          {\
            type: PaymentTypes.ONE_TIME,\
            priceId: process.env.NEXT_PUBLIC_STRIPE_PRICE_LIFETIME!,\
            amount: 19900,\
            currency: "USD",\
          },\
        ],
        isFree: false,
        isLifetime: true,
      }
    }
  }
  // ...other config
}
```

If you are setting up the environment, now you can **go back to the Environment Setup guide** and continue. The rest of this guide can be read later.

[**Environment Setup** \\
\\
Set up environment variables](https://mksaas.com/docs/env#payment)

* * *

## [Payment System Structure](https://mksaas.com/docs/payment\#payment-system-structure)

The payment system in MkSaaS is designed with the following components:

src

payment

provider

index.ts

types.ts

README.md

actions

app

components

This modular structure makes it easy to extend the payment system with new providers, pricing plans, and UI components.

## [Core Features](https://mksaas.com/docs/payment\#core-features)

- One-time payments for lifetime access
- Recurring subscription payments (monthly and yearly)
- Customer portal integration for subscription management
- Webhook handling for payment events
- Subscription status tracking and verification
- Pre-built pricing components (tables, cards, buttons)
- Server actions for secure payment operations
- React hooks for payment state management
- Multiple pricing plans support (Free, Pro, Lifetime)
- Metadata support for tracking payment sources

## [Usage](https://mksaas.com/docs/payment\#usage)

MkSaaS provides simple payment utilities for handling checkout sessions and customer portals:

```
import { createCheckout, createCustomerPortal } from '@/payment';

// Create a checkout session
const checkoutResult = await createCheckout({
  planId: 'pro',
  priceId: process.env.NEXT_PUBLIC_STRIPE_PRICE_PRO_MONTHLY!,
  customerEmail: 'user@example.com',
  successUrl: 'https://example.com/payment/success',
  cancelUrl: 'https://example.com/payment/cancel',
  metadata: { userId: 'user_123' },
});

// Redirect to checkout URL
window.location.href = checkoutResult.url;

// Create a customer portal session
const portalResult = await createCustomerPortal({
  customerId: 'cus_123',
  returnUrl: 'https://example.com/account/billing',
});

// Redirect to portal URL
window.location.href = portalResult.url;
```

## [Webhooks](https://mksaas.com/docs/payment\#webhooks)

Stripe webhooks are essential for handling asynchronous events like successful payments and subscription changes.

### [Development](https://mksaas.com/docs/payment\#development)

For local development, you can use the Stripe CLI to forward events to your local server:

pnpmnpmyarnbun

```
pnpm install -g stripe/stripe-cli
```

Login to Stripe:

```
stripe login
```

Forward events to your local server:

```
stripe listen --forward-to localhost:3000/api/webhooks/stripe
```

The webhook secret is printed in the terminal. Copy it and add it to your `.env` file:

```
STRIPE_WEBHOOK_SECRET=whsec_...
```

You can trigger test events using the Stripe CLI, or test events on the website:

```
stripe trigger checkout.session.completed
stripe trigger customer.subscription.created
stripe trigger customer.subscription.updated
stripe trigger customer.subscription.deleted
```

### [Production](https://mksaas.com/docs/payment\#production)

1. Go to the Stripe Dashboard > Developers > Webhooks
2. Click "Add endpoint"
3. Enter your webhook URL: `https://your-domain.com/api/webhooks/stripe`
4. Select the events to listen for:
   - `checkout.session.completed`
   - `customer.subscription.created`
   - `customer.subscription.updated`
   - `customer.subscription.deleted`
5. After creating, click "Reveal" to view your Webhook Signing Secret
6. Copy the webhook secret (starts with `whsec_`) and add it to your environment variables

## [UI Components](https://mksaas.com/docs/payment\#ui-components)

MkSaaS includes pre-built React components for handling payments:

### CreateCheckoutButton

### CustomerPortalButton

### PricingTable

### PricingCard

## [Server Actions](https://mksaas.com/docs/payment\#server-actions)

MkSaaS provides server actions for payment operations:

### createCheckoutAction

### createPortalAction

### getActiveSubscriptionAction

### getLifetimeStatusAction

## [React Hooks](https://mksaas.com/docs/payment\#react-hooks)

MkSaaS provides hooks for payment operations:

### usePayment

### usePaymentStore

## [Webhook Events](https://mksaas.com/docs/payment\#webhook-events)

The payment system handles these webhook events in `handleWebhookEvent` method:

src/payment/provider/stripe.ts

```
public async handleWebhookEvent(payload: string, signature: string): Promise<void> {
  // Implementation to handle various Stripe webhook events:
  // - checkout.session.completed
  // - customer.subscription.created
  // - customer.subscription.updated
  // - customer.subscription.deleted
}
```

## [Customization](https://mksaas.com/docs/payment\#customization)

### [Creating a New Payment Provider](https://mksaas.com/docs/payment\#creating-a-new-payment-provider)

MkSaaS makes it easy to extend the payment system with new providers:

1. Create a new file in the `src/payment/provider` directory
2. Implement the `PaymentProvider` interface from `types.ts`
3. Update the provider selection logic in `index.ts`

Example implementation for a new provider:

src/payment/provider/my-provider.ts

```
import {
  PaymentProvider,
  CreateCheckoutParams,
  CheckoutResult,
  CreatePortalParams,
  PortalResult,
  Subscription,
  getSubscriptionsParams
} from '@/payment/types';

export class MyProvider implements PaymentProvider {
  constructor() {
    // Initialize your provider
  }

  public async createCheckout(params: CreateCheckoutParams): Promise<CheckoutResult> {
    // Implementation for creating a checkout session
  }

  public async createCustomerPortal(params: CreatePortalParams): Promise<PortalResult> {
    // Implementation for creating a customer portal
  }

  public async getSubscriptions(params: getSubscriptionsParams): Promise<Subscription[]> {
    // Implementation for getting subscriptions
  }

  public async handleWebhookEvent(payload: string, signature: string): Promise<void> {
    // Implementation for handling webhook events
  }
}
```

Then update the provider selection in `index.ts`:

src/payment/index.ts

```
import { MyProvider } from './provider/my-provider';

export const initializePaymentProvider = (): PaymentProvider => {
  if (!paymentProvider) {
    if (websiteConfig.payment.provider === 'stripe') {
      paymentProvider = new StripeProvider();
    } else if (websiteConfig.payment.provider === 'my-provider') {
      paymentProvider = new MyProvider();
    } else {
      throw new Error(
        `Unsupported payment provider: ${websiteConfig.payment.provider}`
      );
    }
  }

  return paymentProvider;
};
```

## [Testing Cards](https://mksaas.com/docs/payment\#testing-cards)

For testing Stripe integration, use Stripe's test mode and test credit cards:

- 4242 4242 4242 4242 - Successful payment
- 4000 0000 0000 3220 - 3D Secure authentication required
- 4000 0000 0000 9995 - Insufficient funds failure

## [Invoices](https://mksaas.com/docs/payment\#invoices)

MkSaaS has already configured the invoice creation for one-time payments.

src/payment/provider/stripe.ts

```
// Automatically create an invoice for the one-time payment
checkoutParams.invoice_creation = {
  enabled: true,
};
```

If you want to automatically send paid invoices, you can enable it in your **Customer emails settings**, under **Email customers about**, select **Successful payments**.

![Invoice](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fpayment%2Finvoice.png&w=3840&q=75)

After that, you can access the invoices in the Stripe Dashboard > Invoices.

You can find more information about [Automatically send paid invoices](https://docs.stripe.com/payments/checkout/receipts?payment-ui=stripe-hosted#paid-invoices-hosted) in the Stripe documentation.

## [Best Practices](https://mksaas.com/docs/payment\#best-practices)

1. **Secure API Keys**: Never expose your Stripe secret key in client-side code
2. **Validate Webhook Signatures**: Always validate the signature of webhook events
3. **Handle Errors Gracefully**: Provide user-friendly error messages when payments fail
4. **Use Idempotency Keys**: Prevent duplicate charges with idempotency keys
5. **Test Webhooks Thoroughly**: Ensure all webhook events are properly handled

## [Next Steps](https://mksaas.com/docs/payment\#next-steps)

Now that you understand how to work with payments in MkSaaS, explore these related integrations:

[**Price Configuration** \\
\\
Configure subscription plans and pricing options](https://mksaas.com/docs/config/price) [**Authentication** \\
\\
Set up user authentication for paid features](https://mksaas.com/docs/auth) [**Analytics** \\
\\
Track payment conversions and revenue](https://mksaas.com/docs/analytics) [**Email Setup** \\
\\
Set up email services for sending notifications](https://mksaas.com/docs/email)

### Table of Contents

[Setup](https://mksaas.com/docs/payment#setup) [Payment System Structure](https://mksaas.com/docs/payment#payment-system-structure) [Core Features](https://mksaas.com/docs/payment#core-features) [Usage](https://mksaas.com/docs/payment#usage) [Webhooks](https://mksaas.com/docs/payment#webhooks) [Development](https://mksaas.com/docs/payment#development) [Production](https://mksaas.com/docs/payment#production) [UI Components](https://mksaas.com/docs/payment#ui-components) [Server Actions](https://mksaas.com/docs/payment#server-actions) [React Hooks](https://mksaas.com/docs/payment#react-hooks) [Webhook Events](https://mksaas.com/docs/payment#webhook-events) [Customization](https://mksaas.com/docs/payment#customization) [Creating a New Payment Provider](https://mksaas.com/docs/payment#creating-a-new-payment-provider) [Testing Cards](https://mksaas.com/docs/payment#testing-cards) [Invoices](https://mksaas.com/docs/payment#invoices) [Best Practices](https://mksaas.com/docs/payment#best-practices) [Next Steps](https://mksaas.com/docs/payment#next-steps)

![Invoice](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fpayment%2Finvoice.png&w=3840&q=75)

## MkSaaS Setup Guide
# Getting Started

Learn how to set up and run your directory website in minutes

This guide will walk you through setting up MkSaaS. We will go through the process of cloning the project, installing dependencies, setting up your database and running the local development server.

## [Prerequisites](https://mksaas.com/docs/start\#prerequisites)

Before you begin, make sure you have the following installed:

### [Node.js](https://mksaas.com/docs/start\#nodejs)

Node.js is a runtime environment that allows you to run JavaScript code.

If you don't have Node.js installed, download it from the [Node.js official website](https://nodejs.org/).

```
# Check if Node.js is installed
node -v
```

### [Git](https://mksaas.com/docs/start\#git)

Git is a version control system that is used to track changes in any set of files.

If Git is not installed, download it from the [Git official website](https://git-scm.com/).

```
# Check if Git is installed
git --version
```

### [Package manager](https://mksaas.com/docs/start\#package-manager)

Package manager is a tool that is used to manage dependencies in your project.

We recommend using [**pnpm**](https://pnpm.io/), but you can use [**npm**](https://www.npmjs.com/), [**yarn**](https://yarnpkg.com/) or [**bun**](https://bun.sh/) as well.

```
# Install pnpm if you haven't already
npm install -g pnpm

# Check pnpm version
pnpm --version
```

## [Quick Installation](https://mksaas.com/docs/start\#quick-installation)

### [Set up your project](https://mksaas.com/docs/start\#set-up-your-project)

There are many ways to download the source code of MkSaaS. We'll cover some of the most common ones below. **Choose the one that best suits your needs.**

Fork Repository (Recommended)Clone RepositoryDownload ZIP

We recommend forking the GitHub repository to get started.

When you visit the [GitHub repository](https://github.com/MkSaaSHQ/mksaas-template), you will see a "Fork" button in the top right corner. Clicking on it will create a copy of the MkSaaS repository in your GitHub account, please keep this repository **private**.

Once you have forked the repository, you can clone your fork to your local machine:

```
git clone https://github.com/your-username/mksaas-template.git your-project-name

cd your-project-name
```

Benefits of forking the repository

- **Full History:** You maintain the full commit history of the project.
- **Easy Updates:** You can easily pull updates from the original repository using pull requests.
- **Contribution Ready:** If you want to contribute, your fork is already set up for that.

If you want to be able to pull updates from the MkSaaS template repository, you can add the upstream remote, this will allow for an [easier update process](https://mksaas.com/docs/updates) from the MkSaaS repository.

```
git remote add upstream https://github.com/MkSaaSHQ/mksaas-template.git
```

### [Install dependencies](https://mksaas.com/docs/start\#install-dependencies)

Install the dependencies by running the following command:

pnpmnpmyarnbun

```
pnpm install
```

### [Create a database](https://mksaas.com/docs/start\#create-a-database)

MkSaaS requires a Postgres database to work. Before creating your project, make sure to have created a new database and have the connection string ready.

We've covered some options for hosting your Postgres database in the [Database Setup](https://mksaas.com/docs/database) guide, for example, using Neon or Supabase.

The Postgres connection string will look something like this:

```
postgresql://user:password@host:port/database
```

### [Set up environment variables](https://mksaas.com/docs/start\#set-up-environment-variables)

MkSaaS uses environment variables to configure the project. You can set them in the `.env` file, so first copy the `.env.example` file to `.env` to have a starting point.

```
cp .env.example .env
```

Then, open the `.env` file and set the variables to your desired values. You can find more information about the environment variables in the [Environment Setup](https://mksaas.com/docs/env) guide.

### [Initialize the database](https://mksaas.com/docs/start\#initialize-the-database)

MkSaaS uses Drizzle ORM to interact with the database. You can initialize the database by running the following command:

pnpmnpmyarnbun

```
pnpm run db:generate # Generate the Drizzle client
pnpm run db:migrate # Migrate the database
pnpm run db:push # Push the database schema to the database
```

This will generate the Drizzle client, migrate the database and push the database schema to the database.

You can find more information about the database in the [Database Integration](https://mksaas.com/docs/database#using-drizzle-orm) guide.

### [Start the development server](https://mksaas.com/docs/start\#start-the-development-server)

Now that you have the database set up, you can start the development server by running the following command:

pnpmnpmyarnbun

```
pnpm run dev
```

This will start the development server on `http://localhost:3000`.

## [Next Steps](https://mksaas.com/docs/start\#next-steps)

Now that you have MkSaaS running, here are some next steps:

[**Environment Setup** \\
\\
Configure your environment variables](https://mksaas.com/docs/env) [**IDE Setup** \\
\\
Learn how to set up your VSCode/Cursor IDE](https://mksaas.com/docs/ide) [**Project Structure** \\
\\
Learn how to navigate the project structure](https://mksaas.com/docs/structure) [**Configuration** \\
\\
Learn how to configure your MkSaaS website](https://mksaas.com/docs/config)

### Table of Contents

[Prerequisites](https://mksaas.com/docs/start#prerequisites) [Node.js](https://mksaas.com/docs/start#nodejs) [Git](https://mksaas.com/docs/start#git) [Package manager](https://mksaas.com/docs/start#package-manager) [Quick Installation](https://mksaas.com/docs/start#quick-installation) [Set up your project](https://mksaas.com/docs/start#set-up-your-project) [Install dependencies](https://mksaas.com/docs/start#install-dependencies) [Create a database](https://mksaas.com/docs/start#create-a-database) [Set up environment variables](https://mksaas.com/docs/start#set-up-environment-variables) [Initialize the database](https://mksaas.com/docs/start#initialize-the-database) [Start the development server](https://mksaas.com/docs/start#start-the-development-server) [Next Steps](https://mksaas.com/docs/start#next-steps)

## Cloud Storage Setup
# Storage

Learn how to set up and use cloud storage for file uploads and media handling

MkSaaS uses [Amazon S3](https://aws.amazon.com/s3/) and compatible services like [Cloudflare R2](https://www.cloudflare.com/products/r2/) for file storage and media handling, providing a reliable and scalable solution for storing images and other media files.

## [Setup](https://mksaas.com/docs/storage\#setup)

To set up storage in MkSaaS, follow these steps to configure the necessary environment variables:

### [Cloudflare R2 (Recommended)](https://mksaas.com/docs/storage\#cloudflare-r2-recommended)

1. Create a Cloudflare account at [cloudflare.com](https://cloudflare.com/)
2. Create a new R2 bucket:
   - Pick a globally unique bucket name (e.g., `your-project-name`)
   - Select a region close to your target audience
   - Set other options according to your needs
3. Allow public access to the bucket:
   - Settings/Public Development URL, click `Enable`
   - Set custom domains for public access to the bucket
   - Save the public access URL as `STORAGE_PUBLIC_URL`
4. Create a new API Token:
   - R2/API/Manage API Tokens, click `Create User API Token`
   - Set permissions to `Object Read & Write` to the bucket
   - Create the API Token, get the `Access Key ID` and `Secret Access Key`
5. Set the following environment variables:

.env

```
STORAGE_REGION=your-region-or-auto
STORAGE_BUCKET_NAME=your-bucket-name
STORAGE_ACCESS_KEY_ID=your-access-key
STORAGE_SECRET_ACCESS_KEY=your-secret-key
STORAGE_ENDPOINT=https://xxx.r2.cloudflarestorage.com
STORAGE_PUBLIC_URL=https://pub-xxx.r2.dev
STORAGE_FORCE_PATH_STYLE=false
```

6. Update the website config to use R2 as the storage provider:

src/config/website.tsx

```
export const websiteConfig = {
  // ...other config
  storage: {
    provider: 's3',
  },
  // ...other config
}
```

Set storage provider to `s3` because Cloudflare R2 is S3-compatible.

### [Amazon S3](https://mksaas.com/docs/storage\#amazon-s3)

1. Create an AWS account at [aws.amazon.com](https://aws.amazon.com/)

2. Create a new S3 bucket:
   - Pick a globally unique bucket name (e.g., `your-project-name`)
   - Select a region close to your target audience
   - **Disable "Block all public access"** if you want files to be publicly accessible
   - Set other options according to your needs
3. Add a bucket policy to allow public access. Go to the **Permissions** tab and add:


```
{
  "Version": "2012-10-17",
  "Statement": [\
    {\
      "Sid": "PublicReadGetObject",\
      "Effect": "Allow",\
      "Principal": "*",\
      "Action": "s3:GetObject",\
      "Resource": "arn:aws:s3:::your-bucket-name/*"\
    }\
  ]
}
```

4. Create an IAM user with S3 access:
   - Navigate to the IAM service
   - Create a new policy with S3 permissions: `GetObject`, `PutObject`, `DeleteObject`, `ListBucket`
   - Create a new IAM user with "Programmatic access"
   - Attach the policy you created
   - Save the Access Key ID and Secret Access Key
5. Add the following environment variables:


.env

```
STORAGE_REGION=your-region
STORAGE_BUCKET_NAME=your-bucket-name
STORAGE_ACCESS_KEY_ID=your-access-key
STORAGE_SECRET_ACCESS_KEY=your-secret-key
```

6. Update the website config to use S3 as the storage provider:

src/config/website.tsx

```
export const websiteConfig = {
  // ...other config
  storage: {
    provider: 's3',
  },
  // ...other config
}
```

### [S3-Compatible Alternatives](https://mksaas.com/docs/storage\#s3-compatible-alternatives)

MkSaaS is compatible with any S3-compatible storage service, including:

- **[DigitalOcean Spaces](https://www.digitalocean.com/products/spaces/)** \- Simple pricing and integrated with DO infrastructure
- **[Backblaze B2](https://www.backblaze.com/b2/cloud-storage.html)** \- Very cost-effective option
- **[Google Cloud Storage](https://cloud.google.com/storage)** \- High performance with Google infrastructure

When using these alternatives, make sure to set the correct endpoint in your environment variables.

If you are setting up the environment, now you can **go back to the Environment Setup guide** and continue. The rest of this guide can be read later.

[**Environment Setup** \\
\\
Set up environment variables](https://mksaas.com/docs/env#storage)

* * *

## [Storage System Structure](https://mksaas.com/docs/storage\#storage-system-structure)

The storage system in MkSaaS is designed with the following components:

src

storage

provider

config

index.ts

types.ts

README.md

This modular structure makes it easy to extend the storage system with new providers and functionality.

## [Core Features](https://mksaas.com/docs/storage\#core-features)

- Direct file upload and management for server-side operations
- Browser-side file uploading with size-based optimization
- Pre-signed URLs for secure, direct-to-storage uploads
- Support for Amazon S3 and compatible storage services
- Folder organization for better file management
- Automatic path generation and file naming
- Configurable storage regions and bucket settings
- Support for public and private file storage

## [Usage](https://mksaas.com/docs/storage\#usage)

### [Basic File Operations](https://mksaas.com/docs/storage\#basic-file-operations)

MkSaaS provides simple utilities for common file operations:

```
import { uploadFile, deleteFile, getPresignedUploadUrl } from '@/storage';

// Upload a file to storage
const { url, key } = await uploadFile(
  fileBuffer,
  'original-filename.jpg',
  'image/jpeg',
  'uploads/images'
);

// Delete a file from storage
await deleteFile(key);

// Generate a pre-signed URL for direct upload
const { url, key } = await getPresignedUploadUrl(
  'filename.jpg',
  'image/jpeg',
  'uploads/images'
);
```

### [Browser-Side Uploads](https://mksaas.com/docs/storage\#browser-side-uploads)

For uploading files directly from the browser, use the `uploadFileFromBrowser` function:

```
'use client';

import { uploadFileFromBrowser } from '@/storage';

// In your React component
async function handleFileUpload(event) {
  const file = event.target.files[0];

  try {
    // This will automatically use the most appropriate upload method
    // based on the file size
    const { url, key } = await uploadFileFromBrowser(file, 'uploads/images');
    console.log('File uploaded:', url);
  } catch (error) {
    console.error('Upload failed:', error);
  }
}
```

This function automatically chooses the best upload method:

- **Small files** (<10MB): Direct upload through your API endpoint
- **Large files** (>=10MB): Pre-signed URL for direct upload to S3

### [Using with Form Components](https://mksaas.com/docs/storage\#using-with-form-components)

Here's an example of using the storage system with a form component:

ImageUploader.tsx

```
'use client';

import { useState } from 'react';
import { uploadFileFromBrowser } from '@/storage';
import { Button } from '@/components/ui/button';

export function ImageUploader() {
  const [isUploading, setIsUploading] = useState(false);
  const [imageUrl, setImageUrl] = useState<string | null>(null);

  async function handleFileChange(event: React.ChangeEvent<HTMLInputElement>) {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      setIsUploading(true);
      const { url } = await uploadFileFromBrowser(file, 'profile-images');
      setImageUrl(url);
    } catch (error) {
      console.error('Upload failed:', error);
    } finally {
      setIsUploading(false);
    }
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center gap-4">
        <Button
          variant="outline"
          onClick={() => document.getElementById('file-upload')?.click()}
          disabled={isUploading}
        >
          {isUploading ? 'Uploading...' : 'Upload Image'}
        </Button>
        <input
          id="file-upload"
          type="file"
          accept="image/*"
          className="hidden"
          onChange={handleFileChange}
        />
      </div>

      {imageUrl && (
        <div className="w-32 h-32 relative">
          <img
            src={imageUrl}
            alt="Uploaded image"
            className="object-cover w-full h-full rounded-md"
          />
        </div>
      )}
    </div>
  );
}
```

## [Customization](https://mksaas.com/docs/storage\#customization)

### [Creating a Custom Provider](https://mksaas.com/docs/storage\#creating-a-custom-provider)

MkSaaS makes it easy to extend the storage system with new providers:

1. Create a new file in the `src/storage/provider` directory

2. Implement the `StorageProvider` interface


src/storage/provider/custom-provider.ts

```
import {
  PresignedUploadUrlParams,
  StorageProvider,
  UploadFileParams,
  UploadFileResult
} from '@/storage/types';

export class CustomStorageProvider implements StorageProvider {
  constructor() {
    // Initialize your provider
  }

  public getProviderName(): string {
    return 'CustomProvider';
  }

  async uploadFile(params: UploadFileParams): Promise<UploadFileResult> {
    // Implementation for uploading a file
    return { url: 'https://example.com/file.jpg', key: 'file.jpg' };
  }

  async deleteFile(key: string): Promise<void> {
    // Implementation for deleting a file
  }

  async getPresignedUploadUrl(
    params: PresignedUploadUrlParams
  ): Promise<UploadFileResult> {
    // Implementation for generating a pre-signed URL
    return { url: 'https://example.com/upload', key: 'file.jpg' };
  }
}
```

3. Update the provider selection in `index.ts`:

src/storage/index.ts

```
import { CustomStorageProvider } from './provider/custom-provider';

export const initializeStorageProvider = (): StorageProvider => {
  if (!storageProvider) {
    if (websiteConfig.storage.provider === 's3') {
      storageProvider = new S3Provider();
    } else if (websiteConfig.storage.provider === 'custom') {
      storageProvider = new CustomStorageProvider();
    } else {
      throw new Error(
        `Unsupported storage provider: ${websiteConfig.storage.provider}`
      );
    }
  }
  return storageProvider;
};
```

## [Best Practices](https://mksaas.com/docs/storage\#best-practices)

1. **File Organization**: Use folders to organize files by type or purpose (e.g., `uploads/images`, `documents/contracts`)
2. **File Size Limits**: Set reasonable file size limits to prevent abuse
3. **File Type Validation**: Validate file types on both client and server sides for security
4. **Signed URLs**: Use pre-signed URLs for private files that require authentication
5. **CDN Integration**: Consider using a CDN in front of your storage for faster delivery
6. **Backup Strategy**: Implement a backup strategy for important files
7. **Access Control**: Use restrictive IAM policies for your storage user
8. **Error Handling**: Properly handle and log storage errors

## [Next Steps](https://mksaas.com/docs/storage\#next-steps)

Now that you understand how to work with file storage in MkSaaS, explore these related topics:

[**Payment** \\
\\
Accept payments in your application](https://mksaas.com/docs/payment) [**Authentication** \\
\\
Control file access with user authentication](https://mksaas.com/docs/auth) [**Database** \\
\\
Store file metadata in your database](https://mksaas.com/docs/database) [**Environment Setup** \\
\\
Configure environment variables for storage](https://mksaas.com/docs/env)

### Table of Contents

[Setup](https://mksaas.com/docs/storage#setup) [Cloudflare R2 (Recommended)](https://mksaas.com/docs/storage#cloudflare-r2-recommended) [Amazon S3](https://mksaas.com/docs/storage#amazon-s3) [S3-Compatible Alternatives](https://mksaas.com/docs/storage#s3-compatible-alternatives) [Storage System Structure](https://mksaas.com/docs/storage#storage-system-structure) [Core Features](https://mksaas.com/docs/storage#core-features) [Usage](https://mksaas.com/docs/storage#usage) [Basic File Operations](https://mksaas.com/docs/storage#basic-file-operations) [Browser-Side Uploads](https://mksaas.com/docs/storage#browser-side-uploads) [Using with Form Components](https://mksaas.com/docs/storage#using-with-form-components) [Customization](https://mksaas.com/docs/storage#customization) [Creating a Custom Provider](https://mksaas.com/docs/storage#creating-a-custom-provider) [Best Practices](https://mksaas.com/docs/storage#best-practices) [Next Steps](https://mksaas.com/docs/storage#next-steps)

## MkSaaS Project Structure
# Project Structure

Overview of the MkSaaS boilerplate file and folder organization

MkSaaS follows a modular architecture based on Next.js App Router with a focus on scalability and maintainability. This guide explains the key directories and files in the boilerplate to help you navigate the codebase more effectively.

## [Root Directory Structure](https://mksaas.com/docs/structure\#root-directory-structure)

src

actions

analytics

app

assets

components

config

db

hooks

i18n

lib

mail

newsletter

payment

storage

stores

styles

types

middleware.ts

routes.ts

content

drizzle

public

messages

content-collections.ts

drizzle.config.ts

next.config.ts

## [Key Files](https://mksaas.com/docs/structure\#key-files)

- **`src/middleware.ts`**: Contains route protection logic and redirects
- **`src/routes.ts`**: Defines application routes for consistent navigation
- **`content-collections.ts`**: Configures MDX content collections for blog and docs
- **`drizzle.config.ts`**: Drizzle ORM configuration for the database
- **`next.config.ts`**: Next.js configuration including redirects and rewrites
- **`.env.example`**: Template for environment variables

## [Key directories](https://mksaas.com/docs/structure\#key-directories)

### [`/src/app` Directory](https://mksaas.com/docs/structure\#srcapp-directory)

The app directory follows Next.js App Router convention:

\[locale\]

(marketing)

(auth)

(dashboard)

(docs)

(blog)

api

layout.tsx

not-found.tsx

robots.ts

sitemap.ts

manifest.ts

### [`/src/actions` Directory](https://mksaas.com/docs/structure\#srcactions-directory)

Server actions organized by feature, powered by next-safe-action for type-safe server actions:

check-newsletter-status.ts

create-checkout-session.ts

create-customer-portal-session.ts

get-active-subscription.ts

get-lifetime-status.ts

send-message.ts

subscribe-newsletter.ts

unsubscribe-newsletter.ts

### [`/src/lib` Directory](https://mksaas.com/docs/structure\#srclib-directory)

Core application logic and utilities:

auth.ts

auth-client.ts

metadata.ts

constants.ts

formatter.ts

utils.ts

urls

docs

blog

### [`/src/components` Directory](https://mksaas.com/docs/structure\#srccomponents-directory)

Components are organized by feature and purpose for better maintainability:

### Feature-based Organization

### Shared Components

## [Code Organization Best Practices](https://mksaas.com/docs/structure\#code-organization-best-practices)

When working with MkSaaS, follow these best practices for code organization:

### [Group by feature, not by type](https://mksaas.com/docs/structure\#group-by-feature-not-by-type)

Keep related files together, regardless of their type.

### [Keep components focused and small](https://mksaas.com/docs/structure\#keep-components-focused-and-small)

Each component should have a single responsibility.

### [Use barrel exports](https://mksaas.com/docs/structure\#use-barrel-exports)

Create `index.ts` files to re-export components from a directory, making imports cleaner.

```
// components/ui/index.ts
export * from './Button';
export * from './Card';
export * from './Input';

// Usage
import { Button, Card, Input } from '@/components/ui';
```

### [Clearly separate client and server components](https://mksaas.com/docs/structure\#clearly-separate-client-and-server-components)

Use the `'use client'` directive at the top of client components, and keep server components as the default.

## [Next Steps](https://mksaas.com/docs/structure\#next-steps)

Now that you understand the project structure, explore these related topics:

[**IDE Setup** \\
\\
Configure your development environment](https://mksaas.com/docs/ide) [**Environment Setup** \\
\\
Set up necessary environment variables](https://mksaas.com/docs/env) [**Getting Started** \\
\\
Start building with MkSaaS](https://mksaas.com/docs/start) [**Updating the Codebase** \\
\\
Keep your MkSaaS project up to date](https://mksaas.com/docs/updates)

### Table of Contents

[Root Directory Structure](https://mksaas.com/docs/structure#root-directory-structure) [Key Files](https://mksaas.com/docs/structure#key-files) [Key directories](https://mksaas.com/docs/structure#key-directories) [/src/app Directory](https://mksaas.com/docs/structure#srcapp-directory) [/src/actions Directory](https://mksaas.com/docs/structure#srcactions-directory) [/src/lib Directory](https://mksaas.com/docs/structure#srclib-directory) [/src/components Directory](https://mksaas.com/docs/structure#srccomponents-directory) [Code Organization Best Practices](https://mksaas.com/docs/structure#code-organization-best-practices) [Group by feature, not by type](https://mksaas.com/docs/structure#group-by-feature-not-by-type) [Keep components focused and small](https://mksaas.com/docs/structure#keep-components-focused-and-small) [Use barrel exports](https://mksaas.com/docs/structure#use-barrel-exports) [Clearly separate client and server components](https://mksaas.com/docs/structure#clearly-separate-client-and-server-components) [Next Steps](https://mksaas.com/docs/structure#next-steps)

## MkSaaS Theme Customization
# Themes

Learn how to customize the themes in your MkSaaS website

This guide covers the theme system in your MkSaaS website, how to switch between built-in themes, and how to create and customize your own themes.

## [Core Features](https://mksaas.com/docs/themes\#core-features)

The MkSaaS template comes with a built-in theme system that allows users to customize the appearance of the website. The theme system includes:

- Light and dark mode support
- Multiple color themes (default, neutral, blue, green, amber)
- Theme switching functionality for users
- Theme persistence with cookies

## [Built-in Themes](https://mksaas.com/docs/themes\#built-in-themes)

The template includes several pre-configured themes that you can use out of the box.

### [Available Themes](https://mksaas.com/docs/themes\#available-themes)

The following themes are available by default:

- **Default**: The main theme with a balanced color palette
- **Neutral**: A grayscale theme with neutral colors
- **Blue**: A theme with blue as the primary color
- **Green**: A theme with green as the primary color
- **Amber**: A theme with amber as the primary color

Each theme changes the primary color and related colors while maintaining the overall design system.

### [Theme Configuration](https://mksaas.com/docs/themes\#theme-configuration)

The theme system is configured in the `website.tsx` configuration file.

src/config/website.tsx

```
export const websiteConfig: WebsiteConfig = {
  metadata: {
    theme: {
      defaultTheme: 'default', // Choose from: default, blue, green, amber, neutral
      enableSwitch: true,      // Enable/disable theme switching
    },
    // ...other configuration
  },
  // ...rest of config
};
```

**Configuration Options:**

| Property | Type | Description |
| --- | --- | --- |
| `defaultTheme` | `'default' | 'blue' | 'green' | 'amber' | 'neutral'` | Sets the default color theme for the website |
| `enableSwitch` | `boolean` | When true, allows users to change the color theme |

## [How Theme Switching Works](https://mksaas.com/docs/themes\#how-theme-switching-works)

The theme switching functionality is implemented through several key components:

### [1\. Theme Provider](https://mksaas.com/docs/themes\#1-theme-provider)

The `ActiveThemeProvider` component in `src/components/layout/active-theme-provider.tsx` manages the current theme state and persists it using cookies:

src/components/layout/active-theme-provider.tsx

```
// Key functionality of the ActiveThemeProvider
export function ActiveThemeProvider({
  children,
  initialTheme,
}: {
  children: ReactNode;
  initialTheme?: string;
}) {
  const [activeTheme, setActiveTheme] = useState<string>(
    () => initialTheme || DEFAULT_THEME
  );

  useEffect(() => {
    // Save theme to cookie
    setThemeCookie(activeTheme);

    // Apply theme class to body
    Array.from(document.body.classList)
      .filter((className) => className.startsWith('theme-'))
      .forEach((className) => {
        document.body.classList.remove(className);
      });
    document.body.classList.add(`theme-${activeTheme}`);
  }, [activeTheme]);

  // ...rest of component
}
```

### [2\. Theme Selector Component](https://mksaas.com/docs/themes\#2-theme-selector-component)

The `ThemeSelector` component in `src/components/layout/theme-selector.tsx` provides the UI for users to switch between themes:

src/components/layout/theme-selector.tsx

```
export function ThemeSelector() {
  if (!websiteConfig.ui.theme?.enableSwitch) {
    return null;
  }

  const { activeTheme, setActiveTheme } = useThemeConfig();
  const t = useTranslations('Common.theme');

  // Theme options
  const DEFAULT_THEMES = [\
    {\
      name: t('default'),\
      value: 'default',\
    },\
    // ...other themes\
  ];

  // ...component rendering
}
```

### [3\. CSS Implementation](https://mksaas.com/docs/themes\#3-css-implementation)

The themes are defined in the global CSS file ( `src/styles/globals.css`) using CSS variables and Tailwind CSS:

src/styles/globals.css

```
/* Base theme variables defined in :root */
:root {
  --radius: 0.5rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.141 0.005 285.823);
  /* ...other variables */
}

/* Dark mode overrides */
.dark {
  --background: oklch(0.141 0.005 285.823);
  --foreground: oklch(0.985 0 0);
  /* ...other variables */
}

/* Theme-specific overrides */
.theme-default {
  /* default theme */
}

.theme-neutral {
  --primary: var(--color-neutral-600);
  --primary-foreground: var(--color-neutral-50);

  @variant dark {
    --primary: var(--color-neutral-500);
    --primary-foreground: var(--color-neutral-50);
  }
}

/* ...other themes */
```

## [Creating Custom Themes](https://mksaas.com/docs/themes\#creating-custom-themes)

You can create your own custom themes by adding new theme definitions to the global CSS file.

### [1\. Add a New Theme Class](https://mksaas.com/docs/themes\#1-add-a-new-theme-class)

Add a new theme class to `src/styles/globals.css`:

src/styles/globals.css

```
.theme-custom {
  --primary: var(--color-purple-600);
  --primary-foreground: var(--color-purple-50);

  @variant dark {
    --primary: var(--color-purple-500);
    --primary-foreground: var(--color-purple-50);
  }
}
```

### [2\. Add the Theme to the Selector](https://mksaas.com/docs/themes\#2-add-the-theme-to-the-selector)

Modify the `ThemeSelector` component in `src/components/layout/theme-selector.tsx` to include your new theme:

src/components/layout/theme-selector.tsx

```
const DEFAULT_THEMES = [\
  {\
    name: t('default'),\
    value: 'default',\
  },\
  // ...existing themes\
  {\
    name: t('custom'),\
    value: 'custom',\
  },\
];
```

### [3\. Add the Translation Key](https://mksaas.com/docs/themes\#3-add-the-translation-key)

Add a new translation key for your theme in your translation files.

messages/en.jsonmessages/zh.json

```
{
  "Common": {
    "theme": {
      "custom": "Custom Theme"
    }
  }
}
```

## [Advanced Customization](https://mksaas.com/docs/themes\#advanced-customization)

For more advanced theme customization, you can modify the base theme variables.

### [Customizing the Base Theme](https://mksaas.com/docs/themes\#customizing-the-base-theme)

The base theme variables are defined in the `:root` selector in `src/styles/globals.css`. You can modify these variables to change the default appearance across all themes:

src/styles/globals.css

```
:root {
  --radius: 0.5rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.141 0.005 285.823);
  /* Modify other variables as needed */
}

.dark {
  --background: oklch(0.141 0.005 285.823);
  --foreground: oklch(0.985 0 0);
  /* Modify dark mode variables as needed */
}
```

### [Creating a Custom Color Palette](https://mksaas.com/docs/themes\#creating-a-custom-color-palette)

You can create a completely custom color palette by overriding all color variables in your theme class:

src/styles/globals.css

```
.theme-custom {
  --background: oklch(0.98 0.01 280);
  --foreground: oklch(0.2 0.01 280);
  --card: oklch(0.97 0.01 280);
  --card-foreground: oklch(0.2 0.01 280);
  /* Override all other color variables */
}
```

### [Theme Generators](https://mksaas.com/docs/themes\#theme-generators)

You can use the following theme generators to create your own custom themes, and then copy the CSS variables to your `globals.css` file.

- [shadcn/ui Theme Generator](https://ui.shadcn.com/themes)
- [tweakcn Theme Generator](https://tweakcn.com/editor/theme)
- [ui.pub Theme Generator](https://ui.pub/x/theme-gen)

This screenshot shows the default theme is now the custom theme.

![Custom Theme](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fcustom-theme.png&w=3840&q=75)

## [Troubleshooting](https://mksaas.com/docs/themes\#troubleshooting)

### [Theme Not Applying](https://mksaas.com/docs/themes\#theme-not-applying)

If your theme is not applying correctly:

1. Check that the theme class is correctly defined in `globals.css`
2. Verify that the theme selector is enabled in website configuration
3. Check browser console for any JavaScript errors
4. Clear browser cookies and reload the page

### [Custom Theme Flashing on Page Load](https://mksaas.com/docs/themes\#custom-theme-flashing-on-page-load)

If you see a flash of the default theme before your custom theme loads:

1. Set your custom theme as the default theme in `website.tsx`
2. Use a loading state or skeleton UI while the theme loads
3. Consider implementing server-side rendering for the initial theme

For server-side rendering, modify your layout component to pass the initial theme from cookies to the `ActiveThemeProvider`.

## [Best Practices](https://mksaas.com/docs/themes\#best-practices)

- **Color Contrast**: Ensure that text colors have sufficient contrast with background colors for accessibility
- **Test Both Modes**: Always test your themes in both light and dark modes
- **Limit Theme Options**: Offer a small selection of well-designed themes rather than many similar options
- **Theme Consistency**: Maintain consistent styling across different themes to avoid UI surprises

## [Next Steps](https://mksaas.com/docs/themes\#next-steps)

Now that you understand how to work with themes in MkSaaS, explore these related topics:

[**Images** \\
\\
Work with images in your MkSaaS website](https://mksaas.com/docs/images) [**Fonts** \\
\\
Work with fonts in your MkSaaS website](https://mksaas.com/docs/fonts) [**Environment Setup** \\
\\
Configure environment variables](https://mksaas.com/docs/env) [**Website Configuration** \\
\\
Configure core settings for the website](https://mksaas.com/docs/config/website)

### Table of Contents

[Core Features](https://mksaas.com/docs/themes#core-features) [Built-in Themes](https://mksaas.com/docs/themes#built-in-themes) [Available Themes](https://mksaas.com/docs/themes#available-themes) [Theme Configuration](https://mksaas.com/docs/themes#theme-configuration) [How Theme Switching Works](https://mksaas.com/docs/themes#how-theme-switching-works) [1\. Theme Provider](https://mksaas.com/docs/themes#1-theme-provider) [2\. Theme Selector Component](https://mksaas.com/docs/themes#2-theme-selector-component) [3\. CSS Implementation](https://mksaas.com/docs/themes#3-css-implementation) [Creating Custom Themes](https://mksaas.com/docs/themes#creating-custom-themes) [1\. Add a New Theme Class](https://mksaas.com/docs/themes#1-add-a-new-theme-class) [2\. Add the Theme to the Selector](https://mksaas.com/docs/themes#2-add-the-theme-to-the-selector) [3\. Add the Translation Key](https://mksaas.com/docs/themes#3-add-the-translation-key) [Advanced Customization](https://mksaas.com/docs/themes#advanced-customization) [Customizing the Base Theme](https://mksaas.com/docs/themes#customizing-the-base-theme) [Creating a Custom Color Palette](https://mksaas.com/docs/themes#creating-a-custom-color-palette) [Theme Generators](https://mksaas.com/docs/themes#theme-generators) [Troubleshooting](https://mksaas.com/docs/themes#troubleshooting) [Theme Not Applying](https://mksaas.com/docs/themes#theme-not-applying) [Custom Theme Flashing on Page Load](https://mksaas.com/docs/themes#custom-theme-flashing-on-page-load) [Best Practices](https://mksaas.com/docs/themes#best-practices) [Next Steps](https://mksaas.com/docs/themes#next-steps)

![Custom Theme](https://mksaas.com/_next/image?url=%2Fimages%2Fdocs%2Fcustom-theme.png&w=3840&q=75)

## MkSaaS Update Guide
# Updating the Codebase

How to keep your MkSaaS project up to date with the latest changes

MkSaaS is actively maintained and regularly updated with new features, bug fixes, and security patches. This guide explains how to update your project to the latest version.

While updating your codebase to the latest version is possible, it's important to note that the more customizations you make to your application, the more complex the update process becomes. This is because updates involve rebasing your custom code on top of the latest MkSaaS code using Git, which may require resolving merge conflicts and careful handling to preserve your customizations.

Before updating your codebase, ensure your Git repository is clean with no uncommitted changes.

## [Update Process](https://mksaas.com/docs/updates\#update-process)

### [Method 1: Using Git (Recommended)](https://mksaas.com/docs/updates\#method-1-using-git-recommended)

If you started your project using the Git repository, you can pull updates directly. There are two approaches:

#### [Option A: Merge Approach (Safer)](https://mksaas.com/docs/updates\#option-a-merge-approach-safer)

Choose this option if you want a safer update process with clear merge points.

```
# Add the upstream remote if you haven't already
git remote add upstream https://github.com/mksaas/mksaas.git

# Fetch the latest changes
git fetch upstream

# Create a new branch for the update
git checkout -b update-mksaas

# Merge the changes (resolve conflicts if necessary)
git merge upstream/main
```

#### [Option B: Rebase Approach (Cleaner History)](https://mksaas.com/docs/updates\#option-b-rebase-approach-cleaner-history)

Choose this option if you prefer a linear history. This approach is more advanced and may require more Git experience to resolve conflicts.

```
# Add the upstream remote if you haven't already
git remote add upstream https://github.com/mksaas/mksaas.git

# Fetch latest changes and rebase
git pull upstream main --rebase
```

If you have any merge conflicts, you will have to resolve them manually. If you are not sure how to do this, please refer to the [Git documentation](https://git-scm.com/docs/git-merge).

### [Method 2: Manual Update](https://mksaas.com/docs/updates\#method-2-manual-update)

If you prefer to update manually or didn't use Git:

1. Download the latest version of MkSaaS
2. Compare your customized files with the new version
3. Apply changes selectively, focusing on:
   - `package.json` for dependency updates
   - Configuration files like `next.config.js`
   - Core functionality in `src/lib` and `src/components` directories

## [Dependency Updates](https://mksaas.com/docs/updates\#dependency-updates)

To update only the dependencies:

pnpmnpmyarnbun

```
# Update all dependencies to their latest versions
pnpm update

# Update a specific dependency
pnpm update next

# Update to specific versions
pnpm add next@latest
```

For major dependency updates, check compatibility first:

pnpmnpmyarnbun

```
# Check for major updates
pnpm dlx npm-check-updates

# Apply major updates (use with caution)
pnpm dlx npm-check-updates -u
pnpm install
```

## [Database Schema Updates](https://mksaas.com/docs/updates\#database-schema-updates)

When updates include database schema changes:

1. Check the migration files in the `drizzle` directory
2. Apply migrations with:

pnpmnpmyarnbun

```
pnpm run db:migrate
```

## [Testing After Updates](https://mksaas.com/docs/updates\#testing-after-updates)

After updating, thoroughly test your application:

1. Run the development server:

pnpmnpmyarnbun

```
pnpm run dev
```

2. Check for console errors
3. Test critical user flows
4. Run linting and formatting:

pnpmnpmyarnbun

```
pnpm run lint
pnpm run format
```

5. Check build:

pnpmnpmyarnbun

```
pnpm run build
```

## [Keeping Up with Changes](https://mksaas.com/docs/updates\#keeping-up-with-changes)

To stay informed about updates:

1. Watch the [GitHub repository](https://github.com/MkSaaSHQ/mksaas-template)
2. Check the [changelog](https://mksaas.com/changelog) regularly
3. Join the [Discord community](https://discord.gg/mksaas)
4. Follow MkSaaS on [Twitter/X](https://x.com/mksaascom) and other social platforms

## [Next Steps](https://mksaas.com/docs/updates\#next-steps)

Now that you understand how to keep your MkSaaS project up to date, explore these related topics:

[**Environment Setup** \\
\\
Configure environment variables](https://mksaas.com/docs/env) [**Deployment** \\
\\
Deploy your application to a cloud provider](https://mksaas.com/docs/deployment/vercel) [**Website Configuration** \\
\\
Configure your MkSaaS project](https://mksaas.com/docs/config/website) [**Project Structure** \\
\\
Understand the organization of your codebase](https://mksaas.com/docs/structure)

### Table of Contents

[Update Process](https://mksaas.com/docs/updates#update-process) [Method 1: Using Git (Recommended)](https://mksaas.com/docs/updates#method-1-using-git-recommended) [Option A: Merge Approach (Safer)](https://mksaas.com/docs/updates#option-a-merge-approach-safer) [Option B: Rebase Approach (Cleaner History)](https://mksaas.com/docs/updates#option-b-rebase-approach-cleaner-history) [Method 2: Manual Update](https://mksaas.com/docs/updates#method-2-manual-update) [Dependency Updates](https://mksaas.com/docs/updates#dependency-updates) [Database Schema Updates](https://mksaas.com/docs/updates#database-schema-updates) [Testing After Updates](https://mksaas.com/docs/updates#testing-after-updates) [Keeping Up with Changes](https://mksaas.com/docs/updates#keeping-up-with-changes) [Next Steps](https://mksaas.com/docs/updates#next-steps)

## Custom Pages Guide
# Custom Pages

Learn how to customize and create new pages in your MkSaaS website

This guide covers the page system in your MkSaaS website, how to customize existing pages, and how to create new pages for your specific needs.

## [Core Features](https://mksaas.com/docs/pages\#core-features)

The MkSaaS template includes a versatile content management system that allows you to:

- Customize legal pages (Cookie Policy, Privacy Policy, Terms of Service)
- Maintain changelog entries for version releases
- Create marketing and informational pages (About, Contact, Waitlist)
- Add completely custom pages for your specific needs

## [Page Structure](https://mksaas.com/docs/pages\#page-structure)

Pages in MkSaaS are organized into different categories:

### [Legal Pages](https://mksaas.com/docs/pages\#legal-pages)

Legal pages are stored in the `content/pages` directory and rendered in the `src/app/[locale]/(marketing)/(legal)` routes:

- **Cookie Policy**: Information about how your website uses cookies
- **Privacy Policy**: Details about how you handle user data
- **Terms of Service**: Rules and regulations for using your service

### [Changelog Entries](https://mksaas.com/docs/pages\#changelog-entries)

Release notes are stored in the `content/release` directory and displayed on the Changelog page:

- **Version Releases**: Each release has its own MDX file with version details and changes

### [Marketing Pages](https://mksaas.com/docs/pages\#marketing-pages)

Marketing pages are rendered in the `src/app/[locale]/(marketing)/(pages)` routes:

- **About**: Information about your company or project
- **Contact**: Contact forms and information
- **Waitlist**: Registration for early access or notifications
- **Changelog**: Page displaying all release notes

## [Customizing Existing Pages](https://mksaas.com/docs/pages\#customizing-existing-pages)

### [Legal Pages](https://mksaas.com/docs/pages\#legal-pages-1)

Legal pages are written in MDX format and located in the `content/pages` directory. Each file includes frontmatter metadata and the content body.

**Example: Privacy Policy (privacy-policy.mdx)**

content/pages/privacy-policy.mdx

```
---
title: Privacy Policy
description: Our commitment to protecting your privacy and personal data
date: 2025-03-10T00:00:00.000Z
published: true
---

## Introduction

Welcome to our Privacy Policy. This document explains how we collect, use, and protect your personal information when you use our services.

... more content ...
```

To customize a legal page:

1. Open the corresponding MDX file in the `content/pages` directory
2. Update the frontmatter metadata (title, description, date)
3. Modify the content in Markdown format
4. Save the file

The page will automatically update with your changes.

### [Changelog Entries](https://mksaas.com/docs/pages\#changelog-entries-1)

Changelog entries are stored as MDX files in the `content/release` directory.

**Example: Release v1.0.0 (v1-0-0.mdx)**

content/release/v1-0-0.mdx

```
---
title: "Initial Release"
description: "Our first official release with core features and functionality"
date: "2024-03-01T00:00:00Z"
version: "v1.0.0"
published: true
---

### Core Features

We're excited to announce the initial release of our platform with the following core features:

- **User Authentication**: Secure login and registration with email verification
- **Dashboard**: Intuitive dashboard for managing your projects and resources

... more content ...
```

To add a new release:

1. Create a new MDX file in the `content/release` directory (e.g., `v1-1-0.mdx`)
2. Add the appropriate frontmatter metadata (title, description, date, version, published)
3. Write the release notes using Markdown
4. Save the file

The new release will automatically appear on your Changelog page, sorted by date (newest first).

## [Creating New Pages](https://mksaas.com/docs/pages\#creating-new-pages)

You can create completely custom pages for your specific needs. There are two approaches:

### [1\. MDX-Based Pages](https://mksaas.com/docs/pages\#1-mdx-based-pages)

For content-heavy pages that don't require complex interactivity:

1. Create a new MDX file in the `content/pages` directory (e.g., `faq.mdx`)
2. Add the appropriate frontmatter metadata
3. Write your content in Markdown format
4. Create a new page component in `src/app/[locale]/(marketing)/(pages)/faq/page.tsx`

Here's a template for the page component:

```
import { CustomPage } from '@/components/page/custom-page';
import { constructMetadata } from '@/lib/metadata';
import { getPage } from '@/lib/page/get-page';
import { getUrlWithLocale } from '@/lib/urls/urls';
import type { NextPageProps } from '@/types/next-page-props';
import type { Metadata } from 'next';
import type { Locale } from 'next-intl';
import { getTranslations } from 'next-intl/server';
import { notFound } from 'next/navigation';

export async function generateMetadata({
  params,
}: {
  params: Promise<{ locale: Locale }>;
}): Promise<Metadata | undefined> {
  const { locale } = await params;
  const page = await getPage('faq', locale);

  if (!page) {
    return {};
  }

  const t = await getTranslations({ locale, namespace: 'Metadata' });

  return constructMetadata({
    title: page.title + ' | ' + t('title'),
    description: page.description,
    canonicalUrl: getUrlWithLocale('/faq', locale),
  });
}

export default async function FAQPage(props: NextPageProps) {
  const params = await props.params;
  if (!params) {
    notFound();
  }

  const locale = params.locale as string;
  const page = await getPage('faq', locale);

  if (!page) {
    notFound();
  }

  return (
    <CustomPage
      title={page.title}
      description={page.description}
      date={page.date}
      content={page.body}
    />
  );
}
```

### [2\. Component-Based Pages](https://mksaas.com/docs/pages\#2-component-based-pages)

For pages that require more complex interactivity:

1. Create a new directory in `src/app/[locale]/(marketing)/(pages)` (e.g., `pricing`)
2. Add a `page.tsx` file that exports your custom page component

Example of a custom page component:

```
import { Button } from '@/components/ui/button';
import { constructMetadata } from '@/lib/metadata';
import { getUrlWithLocale } from '@/lib/urls/urls';
import type { NextPageProps } from '@/types/next-page-props';
import type { Metadata } from 'next';
import type { Locale } from 'next-intl';
import { getTranslations } from 'next-intl/server';

export async function generateMetadata({
  params,
}: {
  params: Promise<{ locale: Locale }>;
}): Promise<Metadata | undefined> {
  const { locale } = await params;
  const t = await getTranslations({ locale, namespace: 'Metadata' });
  const pt = await getTranslations({ locale, namespace: 'PricingPage' });

  return constructMetadata({
    title: pt('title') + ' | ' + t('title'),
    description: pt('description'),
    canonicalUrl: getUrlWithLocale('/pricing', locale),
  });
}

export default async function PricingPage(props: NextPageProps) {
  const params = await props.params;
  const locale = params?.locale as Locale;
  const t = await getTranslations('PricingPage');

  return (
    <div className="max-w-4xl mx-auto space-y-8">
      <div className="space-y-4">
        <h1 className="text-center text-3xl font-bold tracking-tight">
          {t('title')}
        </h1>
        <p className="text-center text-lg text-muted-foreground">
          {t('subtitle')}
        </p>
      </div>

      {/* Your custom pricing components */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        {/* Pricing cards go here */}
      </div>

      <div className="text-center mt-12">
        <Button size="lg">{t('cta')}</Button>
      </div>
    </div>
  );
}
```

## [Custom Layouts](https://mksaas.com/docs/pages\#custom-layouts)

You can customize the layout for different page types by modifying the following files:

- `src/app/[locale]/(marketing)/(legal)/layout.tsx` \- For legal pages
- `src/app/[locale]/(marketing)/(pages)/layout.tsx` \- For marketing pages

These layout files control the container, spacing, and overall structure of the pages.

## [Page Routes](https://mksaas.com/docs/pages\#page-routes)

The page routes are defined in the `src/routes.ts` file. The routing system includes several important route categories that control access and navigation in your application:

### [Protected Routes](https://mksaas.com/docs/pages\#protected-routes)

Protected routes require user authentication to access. If a user tries to access these routes without being logged in, they will be automatically redirected to the login page. The login page will include a `callbackUrl` parameter to redirect the user back to their intended destination after successful authentication.

src/routes.ts

```
export const protectedRoutes = [\
  Routes.Dashboard,\
  Routes.SettingsProfile,\
  Routes.SettingsBilling,\
  Routes.SettingsSecurity,\
  Routes.SettingsNotifications,\
];
```

### [Routes Not Allowed for Logged-in Users](https://mksaas.com/docs/pages\#routes-not-allowed-for-logged-in-users)

These routes are specifically blocked for users who are already logged in. When an authenticated user tries to access these routes, they will be automatically redirected to the default login redirect page (typically the dashboard).

src/routes.ts

```
export const routesNotAllowedByLoggedInUsers = [\
  Routes.Login,\
  Routes.Register\
];
```

### [Default Login Redirect](https://mksaas.com/docs/pages\#default-login-redirect)

This route defines where users are redirected after successful login if no specific `callbackUrl` is provided. By default, it redirects to the dashboard, but this can be configured in your website configuration:

src/routes.ts

```
export const DEFAULT_LOGIN_REDIRECT = websiteConfig.routes.defaultLoginRedirect ?? Routes.Dashboard;
```

## [SEO Optimization](https://mksaas.com/docs/pages\#seo-optimization)

MkSaaS includes built-in SEO features for pages:

1. Each page generates appropriate metadata using the `generateMetadata` function
2. Canonical URLs are automatically created
3. Page titles and descriptions are used for SEO metadata

## [Best Practices](https://mksaas.com/docs/pages\#best-practices)

- **Keep Content Updated**: Regularly review and update your legal pages and documentation
- **Use Clear Structure**: Organize content with proper headings and sections
- **Include Metadata**: Always provide accurate title, description, and date in frontmatter
- **Optimize Images**: If including images in MDX content, optimize them for web
- **Test Translations**: If supporting multiple languages, test all translations
- **Mobile Responsiveness**: Ensure all pages are fully responsive on mobile devices

## [Next Steps](https://mksaas.com/docs/pages\#next-steps)

Now that you understand how to work with pages in MkSaaS, explore these related topics:

[**Themes** \\
\\
Configure theme and appearance settings](https://mksaas.com/docs/themes) [**Fonts** \\
\\
Customize typography in your MkSaaS website](https://mksaas.com/docs/fonts) [**Images** \\
\\
Work with images in your MkSaaS website](https://mksaas.com/docs/images) [**Website Configuration** \\
\\
Configure core settings for the website](https://mksaas.com/docs/config/website)

### Table of Contents

[Core Features](https://mksaas.com/docs/pages#core-features) [Page Structure](https://mksaas.com/docs/pages#page-structure) [Legal Pages](https://mksaas.com/docs/pages#legal-pages) [Changelog Entries](https://mksaas.com/docs/pages#changelog-entries) [Marketing Pages](https://mksaas.com/docs/pages#marketing-pages) [Customizing Existing Pages](https://mksaas.com/docs/pages#customizing-existing-pages) [Legal Pages](https://mksaas.com/docs/pages#legal-pages-1) [Changelog Entries](https://mksaas.com/docs/pages#changelog-entries-1) [Creating New Pages](https://mksaas.com/docs/pages#creating-new-pages) [1\. MDX-Based Pages](https://mksaas.com/docs/pages#1-mdx-based-pages) [2\. Component-Based Pages](https://mksaas.com/docs/pages#2-component-based-pages) [Custom Layouts](https://mksaas.com/docs/pages#custom-layouts) [Page Routes](https://mksaas.com/docs/pages#page-routes) [Protected Routes](https://mksaas.com/docs/pages#protected-routes) [Routes Not Allowed for Logged-in Users](https://mksaas.com/docs/pages#routes-not-allowed-for-logged-in-users) [Default Login Redirect](https://mksaas.com/docs/pages#default-login-redirect) [SEO Optimization](https://mksaas.com/docs/pages#seo-optimization) [Best Practices](https://mksaas.com/docs/pages#best-practices) [Next Steps](https://mksaas.com/docs/pages#next-steps)

## AI Features Setup
# AI

Learn how to set up and use AI features with OpenAI, DeepSeek, and other AI providers

This guide will help you set up and use AI features with OpenAI, DeepSeek, and other AI providers.

## [Next Steps](https://mksaas.com/docs/ai\#next-steps)

While this guide is under construction, explore these related topics:

[**Project Structure** \\
\\
Understand the organization of your codebase](https://mksaas.com/docs/structure) [**IDE Setup** \\
\\
Configure your development environment](https://mksaas.com/docs/ide) [**Getting Started** \\
\\
Set up and run your MkSaaS application](https://mksaas.com/docs/start) [**Database Setup** \\
\\
Configure your database for AI features](https://mksaas.com/docs/database)

### Table of Contents

[Next Steps](https://mksaas.com/docs/ai#next-steps)
