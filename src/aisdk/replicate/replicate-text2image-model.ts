import { ReplicateModelId, ReplicateText2ImageSettings } from "./replicate-settings";
import type { Text2ImageModelV1, Text2ImageModelV1CallWarning } from "@/aisdk/provider";
import { ReplicateClient, ReplicateClientConfig } from "./replicate-client";
import { extractImageUrls, handleReplicateError } from "./replicate-error";
import type { FetchFunction } from "@ai-sdk/provider-utils";
import type { Resolvable } from "@ai-sdk/provider-utils";

interface ReplicateText2ImageModelConfig {
  apiToken: string;
  provider: string;
  baseURL: string;
  headers?: Record<string, string>;
  fetch?: FetchFunction;
}

export class ReplicateText2ImageModel implements Text2ImageModelV1 {
  readonly specificationVersion = "v1";

  readonly modelId: ReplicateModelId;
  readonly settings: ReplicateText2ImageSettings;

  private readonly config: ReplicateText2ImageModelConfig;
  private client: ReplicateClient;

  get provider(): string {
    return this.config.provider;
  }

  get maxImagesPerCall(): number {
    return this.settings.maxImagesPerCall ?? 1;
  }

  constructor(
    modelId: ReplicateModelId,
    settings: ReplicateText2ImageSettings,
    config: ReplicateText2ImageModelConfig
  ) {
    this.modelId = modelId;
    this.settings = settings;
    this.config = config;
    
    this.client = new ReplicateClient({
      apiToken: config.apiToken,
      baseURL: config.baseURL,
      headers: config.headers,
      fetch: config.fetch,
    });
  }

  async doGenerate({
    prompt,
    negativePrompt,
    n = 1,
    seed,
    steps,
    guidanceScale,
    size,
    aspectRatio,
    outputFormat,
    providerOptions,
    headers,
    abortSignal,
  }: Parameters<Text2ImageModelV1["doGenerate"]>[0]): Promise<
    Awaited<ReturnType<Text2ImageModelV1["doGenerate"]>>
  > {
    const warnings: Array<Text2ImageModelV1CallWarning> = [];
    const images: Array<string> = [];

    if (!this.config.apiToken) {
      warnings.push({
        type: "other",
        message: "Replicate API token is not set",
      });
      return { images, warnings };
    }

    try {
      // Prepare input parameters
      const input: Record<string, any> = {
        prompt: prompt || "Generate a creative image",
        ...(this.settings.outputFormat || outputFormat) && {
          output_format: this.settings.outputFormat || outputFormat || "jpg"
        },
        ...(negativePrompt && { negative_prompt: negativePrompt }),
        ...(seed !== undefined && { seed }),
        ...(steps !== undefined && { num_inference_steps: steps }),
        ...(guidanceScale !== undefined && { guidance_scale: guidanceScale }),
        ...(size && { 
          width: size.width,
          height: size.height 
        }),
        ...(aspectRatio && { aspect_ratio: aspectRatio }),
        // Add any provider-specific options
        ...(providerOptions?.replicate ?? {}),
      };

      console.log("üöÄ Calling Replicate API with model:", this.modelId);
      console.log("üìã Input parameters:", JSON.stringify(input, null, 2));

      // Call Replicate API
      const output = await this.client.run(this.modelId, input);
      
      console.log("‚úÖ Replicate API response:", output);

      // Extract image URLs from response
      const imageUrls = extractImageUrls(output);
      
      if (imageUrls.length === 0) {
        warnings.push({
          type: "other",
          message: "No images generated by Replicate API",
        });
        return { images, warnings };
      }

      // Take only the requested number of images
      const resultUrls = imageUrls.slice(0, n);
      images.push(...resultUrls);

      console.log(`üì∏ Generated ${images.length} image(s)`);

    } catch (error: any) {
      console.error("‚ùå Replicate API error:", error);
      
      const errorMessage = handleReplicateError(error);
      warnings.push({
        type: "other",
        message: errorMessage,
      });
    }

    return { images, warnings };
  }
}